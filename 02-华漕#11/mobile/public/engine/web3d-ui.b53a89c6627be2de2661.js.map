{"version":3,"file":"engine/web3d-ui.b53a89c6627be2de2661.js","mappings":";;;;;;;;;;;;;;;;;;;AAA0D;AACsB;AACA;AAClC;AACgB;AACX;AACnD;AACA;AACA;AACA;AACA,4BAA4B,kEAAQ;AACpC,uCAAuC,wFAAmB;AAC1D,uCAAuC,wFAAmB;AAC1D,6BAA6B,sDAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,wCAAwC,sEAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,gBAAgB;AACvF;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,wCAAwC,2DAAW;AACnD;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,UAAU;AACV;AACA;AACA;AACA,oCAAoC,sEAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2DAAW;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,gDAAgD;AAClH;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,iBAAiB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAW;AACnD;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oCAAoC,sEAAU;AAC9C;AACA;AACA;AACA;AACA;AACA,2CAA2C,2DAAW;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,iBAAiB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,wCAAwC,2DAAW;AACnD;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtQ+B;AACY;AACe;AAC1D;AACA;AACA,+BAA+B,0CAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,kCAAkC,qDAAO;AACzC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,6BAA6B,oEAAS;AACtC;AACA;AACA;AACA;AAC0B;;;;;;;;;;;;;;;;;;ACtCK;AACS;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,8BAA8B,0CAAa;AAC3C;AACA;AACA,SAAS;AACT;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iDAAS;AACzC;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wCAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC9D+B;AACoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oCAAoC,0CAAa;AACjD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,gCAAgC,0CAAa;AAC7C;AACA;AACA,kCAAkC,0CAAa;AAC/C;AACA;AACA,kCAAkC,0CAAa;AAC/C;AACA;AACA;AACA;AACA,oCAAoC,wCAAW;AAC/C;AACA;AACA;AACA;AACA,oCAAoC,0CAAa;AACjD;AACA;AACA,sCAAsC,0CAAa;AACnD;AACA;AACA,sCAAsC,0CAAa;AACnD;AACA;AACA;AACA,2CAA2C,iDAAoB;AAC/D;AACA;AACA;AACA;AACA;AACA,8DAA8D,kDAAqB;AACnF,2CAA2C,oDAAuB,GAAG,iBAAiB;AACtF,6CAA6C,8CAAiB;AAC9D,uCAAuC,uCAAU;AACjD;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,kFAAkF;AAClF;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7HmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAW;AACnC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACb+B;AAC/B;AACqC;AACI;AACA;AACzC;AACA;AACA,qBAAqB,YAAY;AACjC,mBAAmB,YAAY;AAC/B,mBAAmB;AACnB;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB;AACA;AACA,sBAAsB,kDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,sCAAsC;AACtC,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0CAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0CAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,wBAAwB,yDAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6CAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oDAAuB;AACzD;AACA,8BAA8B,6CAAgB;AAC9C,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,yCAAyC,iDAAoB;AAC7D;AACA,gCAAgC,uCAAU;AAC1C;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uCAAU;AACpC;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uCAAU;AAChC;AACA;AACA,2BAA2B,kEAAyB;AACpD;AACA;AACA;AACmB;;;;;;;;;;;;;;;;;;;;AC5QY;AAC/B;AACqC;AACI;AACa;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB,kDAAqB;AAC7C;AACA;AACA;AACA,uCAAuC;AACvC;AACA,yBAAyB,wCAAW,IAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gEAAW;AACvC;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,kDAAS;AAC9C;AACA;AACA,UAAU;AACV,wBAAwB,kDAAS;AACjC,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uEAA8B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,2BAA2B,wEAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,iBAAiB;AACjB,+BAA+B,qCAAqC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,+DAAsB;AACrE,6CAA6C,iEAAwB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qDAAqD;AACrD,UAAU;AACV;AACA;AACA,gEAAgE;AAChE;AACA;AACA,0CAA0C,gBAAgB;AAC1D;AACA;AACA;AACA;AACA,uBAAuB,0CAAa;AACpC;AACA,wBAAwB,sDAAyB;AACjD,+BAA+B;AAC/B,iCAAiC,uCAAU;AAC3C,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mEAA0B;AAC7D;AACA,uCAAuC,kEAAyB;AAChE;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kEAAyB;AACpD;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5V+B;AAC/B;AACqC;AACA;AACI;AACzC;AACA;AACA,0BAA0B,kDAAqB;AAC/C,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,yBAAyB,wCAAW,IAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kDAAS;AACjC;AACA;AACA;AACA,iCAAiC,kDAAS;AAC1C;AACA,kBAAkB;AAClB,gDAAgD,kDAAS;AACzD;AACA,kBAAkB;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,yBAAyB;AAC5E;AACA,kBAAkB;AAClB,mBAAmB;AACnB;AACA;AACuB;;;;;;;;;;;;;;;;;;AC7GQ;AAC/B;AACqC;AACrC;AACA,wBAAwB,kDAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0CAAa;AACxC;AACA,2BAA2B,0CAAa;AACxC;AACA;AACA;AACA;AACA,yBAAyB,wCAAW;AACpC;AACA,qBAAqB;AACrB;AACA;AACA;AACA,+BAA+B,iEAAwB;AACvD;AACA;AACA,mBAAmB;AACnB;AACA;AACA,2BAA2B,iEAAwB;AACnD;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0CAAa;AAClC,sBAAsB,0CAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iEAAwB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iEAAwB;AACnD;AACA;AACA;;;;;;;;;;;;;;;;;ACpEoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmB;;;;;;;;;;;;;;;;;;;AC5BY;AACW;AACY;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0CAAa;AACxC,2BAA2B,0CAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,0BAA0B;AAC1B,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,sCAAsC,0CAAa;AACnD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,oCAAoC,wCAAW;AAC/C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,wCAAW;AAC/C;AACA;AACA;AACA;AACA,uCAAuC,0CAAa;AACpD;AACA;AACA,wCAAwC,2DAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mDAAU;AAC3C;AACA;AACA;AACA;AACA,mCAAmC,oDAAuB;AAC1D;AACA,iBAAiB;AACjB,qCAAqC,8CAAiB;AACtD,mCAAmC,iDAAoB;AACvD;AACA;AACA;AACA,2BAA2B,uCAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wCAAW;AACvD;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wCAAwC,0CAAa;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wCAAW;AACvC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,UAAU;AACV;AACA,4BAA4B,wCAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC9U+B;AACW;AACY;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,0BAA0B;AAC1B,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,sCAAsC,0CAAa;AACnD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,oCAAoC,wCAAW;AAC/C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qCAAqC,mDAAU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,oCAAoC,0CAAa;AACjD;AACA;AACA;AACA;AACA;AACA,oCAAoC,0CAAa;AACjD;AACA;AACA;AACA,uCAAuC,2DAAW;AAClD;AACA;AACA;AACA;AACA;AACA,mCAAmC,iDAAoB;AACvD;AACA;AACA;AACA;AACA,sDAAsD,kDAAqB;AAC3E,mCAAmC,qDAAwB,GAAG,gDAAgD;AAC9G,qCAAqC,8CAAiB;AACtD,+BAA+B,uCAAU;AACzC,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,mCAAmC,iDAAoB;AACvD;AACA;AACA;AACA;AACA,sDAAsD,kDAAqB;AAC3E,mCAAmC,oDAAuB,GAAG,iBAAiB;AAC9E,qCAAqC,8CAAiB;AACtD,+BAA+B,uCAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAW;AAC3C;AACA;AACA;AACA;AACA,+BAA+B,0CAAa;AAC5C;AACA;AACA,gCAAgC,2DAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC7M+B;AACW;AACY;AACE;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,sBAAsB;AACtB,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mDAAU;AAC/C;AACA;AACA;AACA,sCAAsC,6DAAW;AACjD;AACA,cAAc,wDAAwD;AACtE;AACA,oCAAoC,iDAAoB;AACxD;AACA;AACA;AACA;AACA,uDAAuD,kDAAqB;AAC5E,oCAAoC,oDAAuB,GAAG,iBAAiB;AAC/E,sCAAsC,8CAAiB;AACvD,gCAAgC,uCAAU;AAC1C;AACA;AACA;AACA;AACA,uCAAuC,2DAAW;AAClD;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAW;AAC3C;AACA;AACA;AACA,+BAA+B,0CAAa;AAC5C;AACA;AACA,gCAAgC,2DAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtJqE;AACA;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,4BAA4B,0EAAiB;AAC7C;AACA,oBAAoB,0EAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,mCAAmC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,mCAAmC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,mCAAmC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;AChNsE;AACtE;AACA;AACA;AACA;AACA,uBAAuB,8EAAoB;AAC3C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACwC;;;;;;;;;;;;;;;;;;AC7FT;AACuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0CAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,gCAAgC,2DAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACoB;;;;;;;;;;;;;;;;;;;ACzCgC;AACpD;AACkD;AACF;AAChD;AACA;AACA;AACA;AACA,IAAI,gEAAqB;AACzB,IAAI,8DAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,aAAa,yDAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qBAAqB,4DAAU;AAC/B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gBAAgB,2DAAgB;AAChC;AACA;AACA;AACA;AACyB;;;;;;;;;;;;;;;;;;;;AC3KzB;AAC0C;AACV;AAChC,kEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+HAA+H,iCAAiC;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iIAAiI,iCAAiC;AAClK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2HAA2H,iCAAiC;AAC5J;AACA;AACA;AACA;AACA;AACA,+IAA+I,iCAAiC;AAChL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,cAAc;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,KAAK;AACL;AACA;AAC4B;;;;;;;;;;;;;;;;;ACtIG;AACyB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA,8BAA8B,kEAAY;AAC1C;AACA,8BAA8B,kEAAY;AAC1C;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT;AACA;AACA,qBAAqB;AACrB,2BAA2B;AAC3B,yBAAyB;AACzB,0BAA0B;AAC1B;AACA,sBAAsB,kEAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kEAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACgC;;;;;;;;;;;;;;;;;AC3EyC;AACzE;AACA;AACA;AACA,UAAU,kBAAkB;AAC5B,UAAU,mBAAmB;AAC7B,UAAU,mBAAmB;AAC7B,UAAU,kBAAkB;AAC5B,UAAU,kBAAkB;AAC5B,UAAU,mBAAmB;AAC7B,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oFAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8B;;;;;;;;;;;;;;;;;;;AChGC;AAC/B;AACqC;AACkB;AACvD;AACA;AACA;AACA;AACA;AACA,2BAA2B,kDAAqB;AAChD;AACA;AACA;AACA;AACA;AACA,iCAAiC,kEAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iEAAwB;AACpE;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,uCAAuC,2CAA2C;AAClF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwB;;;;;;;;;;;;;;;;ACjNxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,cAAc;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,0CAA0C,GAAG,eAAe,GAAG;AAC/D;AACA;AACA;AACA;AACA;AACA,+BAA+B,KAAK;AACpC,gCAAgC,KAAK;AACrC;AACA,oCAAoC,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS;AACvC,+BAA+B,WAAW;AAC1C,+BAA+B,KAAK;AACpC,gCAAgC,KAAK;AACrC;AACA,oCAAoC,KAAK;AACzC;AACA;AACA;AACA,gDAAgD,WAAW;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;;;;;;;ACnIgB;AACI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,oBAAoB,kBAAkB;AACpD,gBAAgB;AAChB,gBAAgB;AAChB,gBAAgB;AAChB;AACA,qBAAqB,SAAS,IAAI,SAAS,IAAI,SAAS;AACxD;AACA;AACA;AACA,cAAc,iCAAiC;AAC/C,cAAc,uDAAuD;AACrE,cAAc,iEAAiE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACnJuB;AACvB;AACA;AACA;AACA,uBAAuB,6CAAC;AACxB;AACA;AACA,QAAQ,6CAAC;AACT,yBAAyB,6CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6CAAC;AACjB;AACA,oBAAoB,6CAAC;AACrB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC9EuB;AACvB;AACA,sBAAsB,6CAAC;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6CAAC,wBAAwB,0BAA0B;AAC3E,sBAAsB;AACtB;AACA;AACA,wBAAwB,6CAAC,wBAAwB,0BAA0B;AAC3E;AACA,iBAAiB;AACjB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,4BAA4B,6CAAC;AAC7B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6CAAC;AAClC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,mBAAmB,6CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/IuB;AACkB;AACzC;AACA,sBAAsB,kDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,8BAA8B,6CAAC;AAC/B;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,6BAA6B,6CAAC;AAC9B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmB;;;;;;;;;;;ACpDnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,gBAAgB;AAChB,iBAAiB;AACjB,kBAAkB;AAClB,qBAAqB;AACrB,2BAA2B;AAC3B;AACA,mBAAmB;AACnB,mBAAmB;AACnB,qBAAqB;AACrB;AACA;AACA,iDAAiD,eAAe;AAChE;AACA,6BAA6B;AAC7B,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,eAAe;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3M+B;AAC2D;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sFAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4JAA4J,WAAW;AACvK,gFAAgF,eAAe;AAC/F;AACA;AACA;AACA,wBAAwB,sFAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oGAAoG,WAAW;AAC/G,uGAAuG,eAAe;AACtH;AACA;AACA;AACA,wBAAwB,sFAAW;AACnC;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,oGAAoG,WAAW;AAC/G,yEAAyE,eAAe;AACxF,yEAAyE,eAAe;AACxF;AACA;AACA;AACA,wBAAwB,sFAAW;AACnC;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;;;;;;AC7DW;AACc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,0CAAa;AACpD,gCAAgC,0CAAa;AAC7C;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qDAAO;AAC7C;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5EgC;AACmC;AACb;AACH;AACP;AACuB;AACV;AACO;AACtB;AAC2B;AACJ;AACA;AACjB;AAChD,YAAY,YAAY;AACxB;AACuD;AACvD;AACA,aAAa,gDAAY;AACzB;AACA;AACA;AACA,2BAA2B,kEAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,GAAG;AACvD,YAAY,kDAAc;AAC1B,YAAY,kDAAc;AAC1B;AACA;AACA,MAAM;AACN;AACA,+BAA+B,kDAAc;AAC7C;AACA,iDAAa,GAAG,qDAAO;AACvB,8DAA0B,GAAG,gFAAoB;AACjD,2DAAuB,GAAG,6EAAiB;AAC3C,2DAAuB,GAAG,6EAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6EAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2DAAQ;AACvC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,0DAAa;AACjB,uBAAuB,mEAAO;AAC9B;AACA;AACA,2BAA2B,2EAAW;AACtC;AACA,QAAQ,2DAA0B;AAClC,QAAQ,gEAA+B;AACvC;AACA,QAAQ,kFAAyB;AACjC,2BAA2B,sFAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kDAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gEAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6DAAW;AAC1C,oEAAoE,iDAAa;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://web3d/../src/ui/business/DimensionBusiness.js","webpack://web3d/../src/ui/business/ElevationBusiness.js","webpack://web3d/../src/ui/capture/Capture.js","webpack://web3d/../src/ui/capture/CaptureLine.js","webpack://web3d/../src/ui/capture/DrawFrame.js","webpack://web3d/../src/ui/clip/clip_box.js","webpack://web3d/../src/ui/clip/clip_group.js","webpack://web3d/../src/ui/clip/clip_manager.js","webpack://web3d/../src/ui/clip/clip_plane.js","webpack://web3d/../src/ui/commands/dimension/CreatPoint.js","webpack://web3d/../src/ui/commands/dimension/DrawLine.js","webpack://web3d/../src/ui/commands/dimension/DrawLinePointToFace.js","webpack://web3d/../src/ui/commands/dimension/DrawLinePointToLine.js","webpack://web3d/../src/ui/commands/dimension/dimension.js","webpack://web3d/../src/ui/commands/display_control.js","webpack://web3d/../src/ui/commands/elevation/elevation.js","webpack://web3d/../src/ui/commands/index.js","webpack://web3d/../src/ui/commands/light_adjust.js","webpack://web3d/../src/ui/common/VisibilityController.js","webpack://web3d/../src/ui/common/building_controller.js","webpack://web3d/../src/ui/common/selectionset.js","webpack://web3d/../src/ui/elements/ViewCube.js","webpack://web3d/../src/ui/elements/clipSlider.js","webpack://web3d/../src/ui/elements/command_ui/ContextMenu.js","webpack://web3d/../src/ui/elements/command_ui/command_ui.js","webpack://web3d/../src/ui/elements/command_ui/toolbar.js","webpack://web3d/../src/ui/elements/rangeSlide.js","webpack://web3d/../src/ui/lable/CreateLable.js","webpack://web3d/../src/ui/pick/PointPick.js","webpack://web3d/../src/ui/screenAdaptation.js","webpack://web3d/../src/web3d-ui.js"],"sourcesContent":["import { DrawLine } from \"../commands/dimension/DrawLine\";\r\nimport { DrawLinePointToFace } from \"../commands/dimension/DrawLinePointToFace\";\r\nimport { DrawLinePointToLine } from \"../commands/dimension/DrawLinePointToLine\";\r\nimport { PointPick } from \"../pick/PointPick\";\r\nimport { CreatPoint } from \"../commands/dimension/CreatPoint\";\r\nimport { CreateLable } from \"../lable/CreateLable\";\r\nlet dataArray = [];\r\nclass DimensionBusiness {\r\n    constructor(viewer) {\r\n        this.viewer = viewer;\r\n        this.drawLine = new DrawLine(viewer);\r\n        this.drawLinePointToFace = new DrawLinePointToFace(viewer);\r\n        this.drawLinePointToLine = new DrawLinePointToLine(viewer);\r\n        this.pointPick = new PointPick(viewer);\r\n    }\r\n\r\n    drawPointToPoint(obj) {\r\n        this.pointPick.getPick(true);\r\n        window.type = \"point\"\r\n        // 点点测距\r\n        this.drawLine.drawLine(obj, true);\r\n        this.drawLinePointToFace.drawLinePointToFace();\r\n        this.drawLinePointToLine.drawLinePointToLine();\r\n\r\n    }\r\n\r\n    drawPointToFace(obj) {\r\n        this.hideEscTitle()\r\n        this.pointPick.getPick(true)\r\n        window.type = \"face\"\r\n        // 点面测距\r\n        this.drawLine.drawLine();\r\n        this.drawLinePointToFace.drawLinePointToFace(obj, true);\r\n        this.drawLinePointToLine.drawLinePointToLine();\r\n    }\r\n\r\n    drawPointToLine(obj) {\r\n        this.hideEscTitle()\r\n        this.pointPick.getPick(true)\r\n        window.type = \"line\"\r\n        // 点线测距\r\n        this.drawLine.drawLine();\r\n        this.drawLinePointToFace.drawLinePointToFace();\r\n        this.drawLinePointToLine.drawLinePointToLine(obj, true);\r\n    }\r\n\r\n    //取消操作\r\n    cancelOperation() {\r\n        $(document).unbind('click');\r\n        $(document).unbind('mousemove');\r\n        this.pointPick.getPick();\r\n        this.drawLine.drawLine();\r\n        this.drawLinePointToFace.drawLinePointToFace();\r\n        this.drawLinePointToLine.drawLinePointToLine();\r\n        if (!!this.viewer.Selection) this.viewer.Selection.enable(true)\r\n        this.viewer.DecorationManager._scene.children.forEach(item => {\r\n            this.viewer.DecorationManager.removeDecoration(item)\r\n        })\r\n        this.viewer.redraw('start')\r\n    }\r\n\r\n    //确定绘线\r\n    determineDrawLines() {\r\n        this.viewer.DecorationManager._scene.children.forEach(item => {\r\n            if (item.name == \"point\") {\r\n                let position = new THREE.Vector3(item.position.x, item.position.y, item.position.z);\r\n                dataArray.push(position);\r\n            }\r\n            this.viewer.DecorationManager.removeDecoration(item);\r\n        })\r\n        this.viewer.redraw(\"start\");\r\n\r\n        let obj = {\r\n            type: window.type,\r\n            everyLinePointsNew: window.everyLinePointsNew,\r\n            verticalPoints: window.verticalPoints,\r\n            verticalPointToLine: window.verticalPointToLine,\r\n            dataArrayPoint: window.dataArray,\r\n            dataArray: dataArray,\r\n        };\r\n        JSON.stringify(obj);\r\n        return obj;\r\n    }\r\n\r\n    //根据所绘线名称显示\r\n    drawLines(obj) {\r\n        if (obj.type == \"point\") {\r\n            if (obj.dataArrayPoint) {\r\n                let points = []\r\n                //去重标注\r\n                obj.everyLinePointsNew = obj.everyLinePointsNew.reduce(function(tempArr, item) {\r\n                    if (tempArr.findIndex((ele) => ele.id === item.id) === -1) {\r\n                        tempArr.push(item)\r\n                    }\r\n                    return tempArr\r\n                }, [])\r\n                obj.everyLinePointsNew.forEach(item => {\r\n                    points = []\r\n                    item.oneLinePoints.oneLinePoints.forEach(itemPoint => {\r\n\r\n                        //重新绘点\r\n                        let point = new CreatPoint(itemPoint)\r\n                        let pointTable = point.createPoint(itemPoint, this.viewer, 'point')\r\n                        this.viewer.DecorationManager.addDecoration(pointTable, 0)\r\n\r\n                        //重新绘线\r\n                        points.push(itemPoint.x)\r\n                        points.push(itemPoint.y)\r\n                        points.push(itemPoint.z)\r\n\r\n                        const geometry = new THREE.BufferGeometry();\r\n                        const vertices = new Float32Array(points);\r\n\r\n                        geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n                        const material = new THREE.MeshBasicMaterial({ color: 'white' });\r\n                        material.depthFunc = THREE.AlwaysDepth\r\n                        const line = new THREE.Line(geometry, material);\r\n                        this.viewer.DecorationManager.addDecoration(line, 0)\r\n                        this.viewer.redraw(\"start\")\r\n                    })\r\n                    //重新绘制距离标注\r\n                    item.taggingPoint.forEach(itemTaggingPoint => {\r\n                        let table = new CreateLable(this.viewer)\r\n                        let numText = table.create2DObject(itemTaggingPoint.num, itemTaggingPoint.pos, 'lineLabel')\r\n                        this.viewer.DecorationManager.addDecoration(numText, 0)\r\n                        this.viewer.redraw(\"start\")\r\n                        return\r\n                    })\r\n                })\r\n            }\r\n        } else if (obj.type == \"face\") {\r\n            if (obj.verticalPoints) {\r\n                obj.verticalPoints.forEach(item => {\r\n                    //重新绘点\r\n                    let point = new CreatPoint(item.oneVertical[0])\r\n                    let pointTable = point.createPoint(item.oneVertical[0], this.viewer, 'point')\r\n                    this.viewer.DecorationManager.addDecoration(pointTable, 0)\r\n\r\n                    let pointTable1 = point.createPoint(item.oneVertical[1], this.viewer, 'point')\r\n                    this.viewer.DecorationManager.addDecoration(pointTable1, 0)\r\n\r\n                    //重新绘制垂足\r\n                    let pointSurface = new CreateLable(this.viewer)\r\n                    let triangle = pointSurface.create2DObjectSvgPointSurface(item.oneVertical[2])\r\n                    this.viewer.DecorationManager.addDecoration(triangle, 0)\r\n                    this.viewer.redraw('start')\r\n\r\n                    //重新绘制线\r\n                    var geometry = new THREE.BufferGeometry();\r\n                    var vertices = new Float32Array([\r\n                        item.oneVertical[1].x, item.oneVertical[1].y, item.oneVertical[1].z,\r\n                        item.oneVertical[2].x, item.oneVertical[2].y, item.oneVertical[2].z\r\n                    ]);\r\n                    geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n                    var material = new THREE.LineDashedMaterial({ color: 0xff0000, dashSize: 0.05, gapSize: 0.05 });\r\n                    material.depthFunc = THREE.AlwaysDepth\r\n                    var mesh = new THREE.Line(geometry, material);\r\n                    mesh.computeLineDistances(); //不可或缺的，若无，则线段不能显示为虚线\r\n                    this.viewer.DecorationManager.addDecoration(mesh, 0)\r\n                    this.viewer.redraw('start')\r\n\r\n\r\n                    var geometry = new THREE.BufferGeometry();\r\n                    var vertices = new Float32Array([\r\n                        item.oneVertical[0].x, item.oneVertical[0].y, item.oneVertical[0].z,\r\n                        item.oneVertical[2].x, item.oneVertical[2].y, item.oneVertical[2].z\r\n                    ]);\r\n                    geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n                    var material = new THREE.MeshBasicMaterial({ color: 0xffff00 });\r\n                    material.depthFunc = THREE.AlwaysDepth\r\n                    var mesh = new THREE.Line(geometry, material);\r\n                    this.viewer.DecorationManager.addDecoration(mesh, 0)\r\n                    this.viewer.redraw('start')\r\n\r\n                    //重新绘制距离标注\r\n                    item.taggingFace.forEach(item => {\r\n                        let table = new CreateLable(this.viewer)\r\n                        let numText = table.create2DObject(item.num, item.pos, 'lineLabel')\r\n                        this.viewer.DecorationManager.addDecoration(numText, 0)\r\n                        this.viewer.redraw(\"start\")\r\n                    })\r\n\r\n                })\r\n            }\r\n        } else if (obj.type == \"line\") {\r\n            if (obj.verticalPointToLine) {\r\n\r\n                obj.verticalPointToLine.forEach(item => {\r\n                    //重新绘点\r\n                    let point = new CreatPoint(item.oneVertical[0])\r\n                    let pointTable = point.createPoint(item.oneVertical[0], this.viewer, 'point')\r\n                    this.viewer.DecorationManager.addDecoration(pointTable, 0)\r\n\r\n\r\n                    //重新绘制垂足\r\n                    let pointSurface = new CreateLable(this.viewer)\r\n                    let triangle = pointSurface.create2DObjectSvgDropFoot(item.oneVertical[1])\r\n                    this.viewer.DecorationManager.addDecoration(triangle, 0)\r\n                    this.viewer.redraw('start')\r\n\r\n                    //重新绘线\r\n                    var geometry = new THREE.BufferGeometry();\r\n                    var vertices = new Float32Array([\r\n                        item.oneVertical[0].x, item.oneVertical[0].y, item.oneVertical[0].z,\r\n                        item.oneVertical[1].x, item.oneVertical[1].y, item.oneVertical[1].z\r\n                    ]);\r\n                    geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n                    var material = new THREE.MeshBasicMaterial({ color: 0xffffff });\r\n                    material.depthFunc = THREE.AlwaysDepth\r\n                    var mesh = new THREE.Line(geometry, material);\r\n                    this.viewer.DecorationManager.addDecoration(mesh, 0)\r\n                    this.viewer.redraw('start')\r\n\r\n                    //去重标注\r\n                    item.taggingLine = item.taggingLine.reduce(function(tempArr, item) {\r\n                        if (tempArr.findIndex((ele) => ele.pos.x === item.pos.x && ele.pos.y === item.pos.y && ele.pos.z === item.pos.z) === -1) {\r\n                            tempArr.push(item)\r\n                        }\r\n                        return tempArr\r\n                    }, [])\r\n                    //重新绘制距离标注\r\n                    item.taggingLine.forEach(item => {\r\n                        let table = new CreateLable(this.viewer)\r\n                        let numText = table.create2DObject(item.num, item.pos, 'lineLabel')\r\n                        this.viewer.DecorationManager.addDecoration(numText, 0)\r\n                        this.viewer.redraw(\"start\")\r\n                    })\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    //清除\r\n    clearBefore(obj) {\r\n        this.drawLine.clearBefore();\r\n        this.drawLinePointToFace.clearBefore();\r\n        this.drawLinePointToLine.clearBefore();\r\n        obj = {\r\n            type: obj.type,\r\n            everyLinePointsNew: [],\r\n            verticalPoints: [],\r\n            verticalPointToLine: [],\r\n            dataArrayPoint: [],\r\n            dataArray: [],\r\n        };\r\n        dataArray = [];\r\n        window.dataArray = [];\r\n        window.everyLinePointsNew = [];\r\n        window.verticalPoints = [];\r\n        window.verticalPointToLine = [];\r\n        return obj;\r\n\r\n    }\r\n\r\n    hideEscTitle() {\r\n        $(\"#measureEscTip\").hide();\r\n    }\r\n\r\n    showEscTitle() {\r\n        $(\"#measureEscTip\").show();\r\n    }\r\n}\r\n\r\nexport { DimensionBusiness }","import * as THREE from \"three\";\r\nimport {Capture} from \"../capture/Capture\";\r\nimport {Elevation} from \"../commands/elevation/elevation\";\r\nclass ElevationBusiness{\r\n    getElevation(viewer){\r\n        let currentPoint = new THREE.Vector3()\r\n        $(document).mousemove(function (event){\r\n            let clientPos = {\r\n                x:event.originalEvent.clientX,\r\n                y:event.originalEvent.clientY,\r\n            }\r\n\r\n            if (typeof(viewer.pick(clientPos)) == \"undefined\"){\r\n                return\r\n            }else {\r\n                currentPoint = viewer.pick(clientPos).point\r\n            }\r\n            //捕捉\r\n            if (viewer.pick(clientPos).object.edge){\r\n                let arr = viewer.pick(clientPos).object.edge.geometry.attributes.position.array\r\n                let capture = new Capture(viewer)\r\n                let point1 = capture.getCapture(viewer,arr,currentPoint)\r\n\r\n                if (typeof(point1) == \"undefined\"){\r\n                    return\r\n                }else {\r\n                    //point.set(point1.x,point1.y,point1.z)\r\n                }\r\n            }\r\n\r\n        })\r\n\r\n        //标高\r\n        let elevation = new  Elevation(viewer)\r\n        elevation.getHeight(viewer)\r\n    }\r\n}\r\n\r\nexport {ElevationBusiness}\r\n","import * as THREE from \"three\";\r\nimport { DrawFrame } from \"./DrawFrame\";\r\nclass Capture {\r\n    constructor(viewer) {\r\n        this.viewer = viewer\r\n    }\r\n\r\n    //捕获方法，jyp-捕获顶点\r\n    getCapture(viewer, arr, currentPoint) {\r\n        let that = this\r\n        let pointAll = [] //jyp-相交物体顶点\r\n        let pointIndex = []\r\n        let newArr = Array.from(arr);\r\n\r\n        let p1\r\n        newArr.forEach((item, index) => {\r\n            if (index % 3 == 0) {\r\n                pointIndex.push(index)\r\n            }\r\n\r\n        })\r\n        pointIndex.forEach(item => {\r\n            let point = newArr.slice(item, item + 3)\r\n            let pointV3 = new THREE.Vector3(point[0], point[1], point[2])\r\n            pointAll.push(pointV3)\r\n\r\n        })\r\n        let num = 0\r\n        for (let i = 0; i < pointAll.length; i++) {\r\n            num = that.calculateDistance(pointAll[i], currentPoint)\r\n\r\n            /*jyp-计算物体顶点和鼠标点击点的距离\r\n            小于0.05（为啥是0.05不知道？）则拾取到顶点，画一个小绿框，\r\n            大于0.05，则检查现有场景是否有小绿框，有，则移除*/\r\n            if (num <= 0.1) {\r\n                p1 = pointAll[i]\r\n                console.log('捕获成功')\r\n                let frame = new DrawFrame()\r\n                viewer.DecorationManager.addDecoration(frame.drawFrame(p1, viewer, 'drawFrame'), 0)\r\n                viewer.redraw(\"start\")\r\n                return p1\r\n            } else {\r\n                viewer.DecorationManager._scene.children.forEach(item => {\r\n                    if (item.name == 'frame' && !!item.deco_scene) {\r\n                        viewer.DecorationManager.removeDecoration(item)\r\n                        viewer.redraw(\"start\")\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    //计算距离\r\n    calculateDistance(startPoint, endPoint) {\r\n        let num = 0\r\n        let line3 = new THREE.Line3()\r\n        line3.start = startPoint\r\n        line3.end = endPoint\r\n        num = line3.distance()\r\n        return num\r\n    }\r\n}\r\n\r\nexport { Capture }","import * as THREE from \"three\";\r\nimport { CreateLable } from \"../lable/CreateLable\";\r\nclass CaptureLine {\r\n    constructor(viewer) {\r\n        this.viewer = viewer\r\n    }\r\n\r\n    getCaptureLine(points, obj, v = false) {\r\n        let scope = this;\r\n        if (!this.eventHandlerCaptureLine) {\r\n            this.eventHandlerCaptureLine = function(event) {\r\n                event.preventDefault();\r\n                let verticesArr;\r\n                let verticesIndex; //顶点的index信息\r\n                let verticesIndexEven = []; //顶点index为偶数的\r\n                let pointIndex = [];\r\n                let pointAll = [];\r\n                let pos = {};\r\n                let captureLineResult = {};\r\n                switch (event.type) {\r\n                    case 'touchmove':\r\n                        pos.x = event.changedTouches[0].clientX - 16; //取小红点的位置\r\n                        pos.y = event.changedTouches[0].clientY - 50;\r\n                        break;\r\n                    case 'mousemove':\r\n                        pos.x = event.offsetX;\r\n                        pos.y = event.offsetY;\r\n                        break;\r\n                    default:\r\n                        return;\r\n                }\r\n\r\n                if (!scope.viewer.pick(pos)) return; //捕获失败\r\n\r\n                verticesIndex = Array.from(scope.viewer.pick(pos).object._edge.geometry.index.array);\r\n                verticesIndex.forEach((item, index) => {\r\n                    if (index % 2 == 0) {\r\n                        verticesIndexEven.push(index);\r\n                    }\r\n                })\r\n\r\n                verticesArr = Array.from(scope.viewer.pick(pos).object.edge.geometry.attributes.position.array);\r\n                verticesArr.forEach((item, index) => {\r\n                    if (index % 3 == 0) {\r\n                        pointIndex.push(index);\r\n                    }\r\n                })\r\n\r\n                pointIndex.forEach(item => {\r\n                    let pointVertices = verticesArr.slice(item, item + 3);\r\n                    let point = new THREE.Vector3(pointVertices[0], pointVertices[1], pointVertices[2]);\r\n                    pointAll.push(point);\r\n                })\r\n\r\n                verticesIndexEven.forEach(item => {\r\n                    let s = scope.viewer.pick(pos).point;\r\n\r\n                    let d = new THREE.Vector3();\r\n                    d.subVectors(s, pointAll[verticesIndex[item]]);\r\n\r\n                    let dir = new THREE.Vector3();\r\n                    dir.subVectors(pointAll[verticesIndex[item + 1]], pointAll[verticesIndex[item]]);\r\n\r\n                    let add = new THREE.Vector3();\r\n                    add.addVectors(pointAll[verticesIndex[item]], d.projectOnVector(dir));\r\n\r\n                    let pOne = s;\r\n                    let pTwo = add;\r\n                    let line3 = new THREE.Line3(pTwo, pOne);\r\n                    let num = line3.distance();\r\n                    //鼠标移动的点和物体的边距离小于0.05，则拾取到边，画一条黄色线。\r\n                    if (num < 0.1) {\r\n                        $(\"#container\").css(\"cursor\", \"default\")\r\n                        let d = new THREE.Vector3()\r\n                        d.subVectors(points[0], pointAll[verticesIndex[item]])\r\n\r\n                        let dir = new THREE.Vector3();\r\n                        dir.subVectors(pointAll[verticesIndex[item + 1]], pointAll[verticesIndex[item]])\r\n\r\n                        let add = new THREE.Vector3();\r\n                        add.addVectors(pointAll[verticesIndex[item]], d.projectOnVector(dir));\r\n                        captureLineResult = add;\r\n\r\n                        let geometry = new THREE.BufferGeometry();\r\n                        let vertices = new Float32Array([\r\n                            pointAll[verticesIndex[item]].x, pointAll[verticesIndex[item]].y, pointAll[verticesIndex[item]].z,\r\n                            pointAll[verticesIndex[item + 1]].x, pointAll[verticesIndex[item + 1]].y, pointAll[verticesIndex[item + 1]].z\r\n                        ]);\r\n\r\n                        geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n                        var material = new THREE.MeshBasicMaterial({ color: 0xffff00 });\r\n                        material.depthFunc = THREE.AlwaysDepth;\r\n                        var mesh = new THREE.Line(geometry, material);\r\n                        mesh.name = \"borderLine\";\r\n\r\n                        scope.viewer.DecorationManager.addDecoration(mesh, 0);\r\n                        scope.viewer.redraw('start');\r\n                    } else {\r\n                        scope.viewer.DecorationManager._scene.children.forEach((item, index) => {\r\n                            if (item.name == 'borderLine' && !!item.deco_scene) {\r\n                                scope.viewer.DecorationManager.removeDecoration(item)\r\n                                scope.viewer.redraw(\"start\");\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n                window.captureLineResult = captureLineResult;\r\n            };\r\n        }\r\n        \r\n        let canvas = scope.viewer.Renderer.domElement;\r\n        let mobileMeaHandle = document.getElementById(\"mobileMeasureHandleArea\"); //移动端操作手柄\r\n        if (v) {\r\n            if ('ontouchstart' in document.documentElement) {\r\n                mobileMeaHandle.addEventListener('touchmove', scope.eventHandlerCaptureLine);\r\n            } else {\r\n                canvas.addEventListener('mousemove', scope.eventHandlerCaptureLine);\r\n            }\r\n        } else {\r\n            canvas.removeEventListener('mousemove', scope.eventHandlerCaptureLine);\r\n            mobileMeaHandle.removeEventListener('touchmove', scope.eventHandlerCaptureLine);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport { CaptureLine }","import { CreateLable } from \"../lable/CreateLable\";\r\n\r\nclass DrawFrame {\r\n    constructor() {}\r\n\r\n    //框，jyp-拾取到顶点画的小绿框\r\n    drawFrame(pos, viewer, className) {\r\n        let table = new CreateLable(viewer)\r\n        let num = ''\r\n        let name = 'frame'\r\n        let frame = table.create2DObject(num, pos, className, name)\r\n        return frame\r\n    }\r\n}\r\nexport { DrawFrame }","import * as THREE from \"three\";\r\n\r\nimport { Events } from \"core/Events\";\r\nimport { ClipGroup } from \"./clip_group\";\r\nimport { ClipPlane } from \"./clip_plane\";\r\n\r\nconst STATUS_OPACITY = {\r\n    get deactive() { return 0.0 },\r\n    get active() { return 0.1 },\r\n    get locked() { return 0.3 }\r\n};\r\nconst PLANE_INDEX = {\r\n    get Xn() { return 0 },\r\n    get Xp() { return 1 },\r\n    get Yn() { return 2 },\r\n    get Yp() { return 3 },\r\n    get Zn() { return 4 },\r\n    get Zp() { return 5 },\r\n};\r\n\r\nclass ClipBox extends ClipGroup {\r\n    /**\r\n     * 剖切盒构造函数\r\n     * opt.boundary指定剖切盒最大范围，此为可选参数，\r\n     * 如果指定，则剖切框最大范围由此参数决定，\r\n     * 如未指定则必须指定opt.viewer参数，剖切框范围将由模型范围动态决定。\r\n     * opt.viewer参数为当前剖切框作用的渲染对象接口，\r\n     * 指定此参数意味着剖切框将具备交互功能（可交互调整）。 */\r\n    constructor(opt = {}) {\r\n        opt.name = \"ClipBox\"\r\n        super(opt);\r\n        this.viewer = opt.viewer;\r\n        this.boundary = opt.boundary; // max range\r\n        this.boxColor = (!!opt.boxColor ? opt.boxColor : 0xeead55); // line color\r\n\r\n        // 如果未指定剖切盒范围，则使用模型外包围盒（会随之变化）\r\n        if (!this.boundary) {\r\n            // 剖切盒范围根据模型范围动态设定\r\n            if (!this.viewer) {\r\n                throw new Error(\"无法获得剖切盒的最大范围，既未通过参数指定，又无法获得模型范围！\");\r\n            }\r\n            var modelMgr = this.viewer.ModelManager;\r\n            var update_max_boundary_by_model = () => {\r\n                this.boundary = modelMgr.BoundingBox.clone();\r\n                var delta = new THREE.Vector3(0.001, 0.001, 0.001);\r\n                this.boundary.min.sub(delta);\r\n                this.boundary.max.add(delta);\r\n                // 添加6个剖切面，初始时与boundary一致\r\n                this._update_planes_by_boundary();\r\n            };\r\n            if (!!modelMgr.BoundingBox) {\r\n                // 如果此时（构造时）模型已经加载，则以包围盒为剖切盒最大范围\r\n                update_max_boundary_by_model();\r\n            }\r\n            this.viewer.ModelManager.addEventListener(\"MODEL_BOUNDARY_CHANGE\", e => {\r\n                // 剖切盒最大范围根据包围盒范围变化\r\n                update_max_boundary_by_model();\r\n            });\r\n        } else {\r\n            this._update_planes_by_boundary();\r\n        }\r\n\r\n        // 交互剖切时的“活动”剖切面显示状态切换\r\n        this.addEventListener(\"ACTIVEPLANE_CHANGE\", e => {\r\n            if (!!e.oldface) {\r\n                var mat = this.MarksBox.material[e.oldface.materialIndex];\r\n                mat.opacity = STATUS_OPACITY.deactive;\r\n            }\r\n            if (!!e.newface) {\r\n                var mat = this.MarksBox.material[e.newface.materialIndex];\r\n                mat.opacity = STATUS_OPACITY.active;\r\n            }\r\n        });\r\n        // 交互剖切时的“锁定”剖切面显示状态切换\r\n        this.addEventListener(\"PLANE_STATUS_CHANGE\", e => {\r\n            var mat = this.MarksBox.material[e.planeInfo.PickedFace.materialIndex];\r\n            if (e.planeInfo.locked)\r\n                mat.opacity = STATUS_OPACITY.locked;\r\n            else\r\n                mat.opacity = STATUS_OPACITY.active;\r\n        });\r\n    }\r\n    // 交互剖切时的剖切面位置改变（根据事件参数中的交互移动向量）\r\n    _move_plane(planeInfo, move_vector) {\r\n        let face = planeInfo.PickedFace;\r\n        let index = face.materialIndex;\r\n        let ps = [...this.planesToClip];\r\n        let p = ps[index];\r\n        let pos0 = p.getPosition();\r\n        let pos = pos0.clone();\r\n        pos.add(move_vector);\r\n        // 修正超出范围的pos\r\n        let pb = this.boundary[[\"min\", \"max\"][index % 2]];\r\n        let pc = ps[Math.floor(index / 2) * 2 + 1 - (index % 2)];\r\n        var sz = new THREE.Vector3();\r\n        this.boundary.getSize(sz);\r\n        sz = Math.min(sz.x, sz.y, sz.z);\r\n        pc = pc.getPosition().addScaledVector(face.normal, sz / 1000);\r\n        let l = face.normal.dot(pc);\r\n        let g = face.normal.dot(pb);\r\n        let v = face.normal.dot(pos);\r\n        if (v < l) pos.copy(pc);\r\n        else if (v > g) pos.copy(pb);\r\n        //\r\n        if (pos0.distanceTo(pos) > 0.001) {\r\n            p.setFromPosition(pos);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    _update_planes_by_boundary() {\r\n        this.updateByBoundary(false);\r\n    }\r\n    _update_marks_by_planes() {\r\n        // 当前剖切盒\r\n        var cur_box = this.CurrentBox;\r\n\r\n        // 根据box3刷新几何坐标\r\n        var update_geom = (geom, box) => {\r\n            const pnts = [\"min\", \"max\"];\r\n            const vertices = [];\r\n            for (var i = 0; i < 8; i++) {\r\n                vertices.push(box[pnts[parseInt((i + 1) / 2) % 2]][\"x\"]);\r\n                vertices.push(box[pnts[parseInt(i / 2) % 2]][\"y\"]);\r\n                vertices.push(box[pnts[parseInt(i / 4)]][\"z\"]);\r\n            }\r\n            if (geom.hasAttribute(\"position\")) {\r\n                geom.attributes.position.copyArray(vertices);\r\n            } else {\r\n                geom.setAttribute(\"position\",\r\n                    new THREE.Float32BufferAttribute(vertices, 3));\r\n                // 注意，此处必须与PLANE_INDEX匹配\r\n                geom.setIndex([\r\n                    0, 4, 7, 7, 3, 0, // 左\r\n                    1, 2, 6, 6, 5, 1, // 右\r\n                    0, 1, 5, 5, 4, 0, // 前\r\n                    2, 3, 7, 7, 6, 2, // 后\r\n                    2, 1, 0, 0, 3, 2, // 下\r\n                    4, 5, 6, 6, 7, 4, // 上\r\n                ]);\r\n                for (var i = 0; i < 6; i++) {\r\n                    geom.addGroup(i * 6, 6, i);\r\n                }\r\n            }\r\n            geom.computeVertexNormals();\r\n            geom.computeBoundingBox();\r\n            geom.computeBoundingSphere();\r\n            geom.attributes.position.needsUpdate = true;\r\n        };\r\n\r\n        if (!this.MarksFrame) {\r\n            this.MarksFrame = new THREE.Box3Helper(cur_box, this.boxColor);\r\n            this.marks.add(this.MarksFrame);\r\n            const marksBoxMaterails = [...function* () {\r\n                var colors = [\r\n                    0xff0000, 0xff0000,\r\n                    0x00ff00, 0x00ff00,\r\n                    0x0000ff, 0x0000ff\r\n                ];\r\n                for (var color of colors) {\r\n                    var mat = new THREE.MeshBasicMaterial({\r\n                        color: color,\r\n                        side: THREE.DoubleSide\r\n                    });\r\n                    mat.transparent = true;\r\n                    mat.opacity = STATUS_OPACITY.deactive;\r\n                    mat.depthTest = true;\r\n                    mat.depthWrite = false;\r\n                    yield mat;\r\n                }\r\n            }()];\r\n            const marksBoxGeometry = new THREE.BufferGeometry();\r\n            update_geom(marksBoxGeometry, cur_box);\r\n            this.MarksBox = new THREE.Mesh(marksBoxGeometry, marksBoxMaterails);\r\n            this.MarksBox.name = \"ClipBox_Marks\"\r\n            this.marks.addPickable(this.MarksBox);\r\n        } else {\r\n            // 调整几何尺寸和位置\r\n            this.MarksFrame.box.copy(cur_box);\r\n            update_geom(this.MarksBox.geometry, cur_box);\r\n            this.MarksBox.invalidBoundary();\r\n        }\r\n    }\r\n    _show_filter(dir_filter) {\r\n        var mats = this.MarksBox.material;\r\n        for (var mat of mats) {\r\n            mat.opacity = STATUS_OPACITY.deactive;\r\n        }\r\n        if (dir_filter.x) {\r\n            mats[PLANE_INDEX.Xn].opacity = STATUS_OPACITY.locked;\r\n            mats[PLANE_INDEX.Xp].opacity = STATUS_OPACITY.locked;\r\n        }\r\n        if (dir_filter.y) {\r\n            mats[PLANE_INDEX.Yn].opacity = STATUS_OPACITY.locked;\r\n            mats[PLANE_INDEX.Yp].opacity = STATUS_OPACITY.locked;\r\n        }\r\n        if (dir_filter.z) {\r\n            mats[PLANE_INDEX.Zn].opacity = STATUS_OPACITY.locked;\r\n            mats[PLANE_INDEX.Zp].opacity = STATUS_OPACITY.locked;\r\n        }\r\n    }\r\n\r\n    get CurrentBox() {\r\n        // 根据剖切面构造box3\r\n        var cur_box = new THREE.Box3;\r\n        let ps = [...this.planesToClip];\r\n        if (ps.length != 6) return null;\r\n        var ms = [\"min\", \"max\"];\r\n        for (var i = 0; i < 6; i++) {\r\n            var m = ms[i % 2];\r\n            var pos = ps[i].getPosition();\r\n            if (i < 2) {\r\n                cur_box[m].copy(pos);\r\n            } else {\r\n                cur_box[m].add(pos);\r\n            }\r\n        }\r\n        return cur_box;\r\n    }\r\n    set CurrentBox(box) {\r\n        let ps = [...this.planesToClip];\r\n        var ms = [\"min\", \"max\"];\r\n        for (var i = 0; i < 6; i++) {\r\n            var m = ms[i % 2];\r\n            ps[i].setFromPosition(box[m]);\r\n        }\r\n    }\r\n    // bForce为true剖切盒才会随着剖切边界放大（强制回到边界位置）\r\n    // 否则剖切盒只会随边界变小\r\n    updateByBoundary(bForce = false) {\r\n        if (!this.boundary) return;\r\n        let m = [\"min\", \"max\"];\r\n        if (this.count > 0) {\r\n            let p = [...this.planesToClip];\r\n            for (var i = 0; i < 6; i++) {\r\n                if (!bForce && this.boundary.intersectsPlane(p[i].plane)) {\r\n                    continue;\r\n                }\r\n                p[i].setFromPosition(this.boundary[m[i % 2]]);\r\n            }\r\n        } else {\r\n            for (var i = 0; i < 6; i++) {\r\n                var dir = [0, 0, 0];\r\n                // 注意，此处必须与PLANE_INDEX匹配\r\n                dir[Math.floor(i / 2)] = (i % 2 > 0 ? 1 : -1);\r\n                this.addPlane(this.boundary[m[i % 2]], dir);\r\n            }\r\n            // 响应每一个加入box的剖切面的变更，以更新剖切盒可视效果\r\n            for (var plane of this.planesToClip) {\r\n                plane.addEventListener(\"CLIP_PLANE_CHANGE\", e => {\r\n                    // 更新marks\r\n                    this._update_marks_by_planes();\r\n                });\r\n            }\r\n            this._update_marks_by_planes();\r\n        }\r\n    }\r\n    boxToJson() {\r\n        return this.CurrentBox.toJson();\r\n    }\r\n    boxFromJson(boxJson) {\r\n        var box = new THREE.Box3;\r\n        box.fromJson(boxJson);\r\n        this.CurrentBox = box;\r\n        this.dispatchEvent(Events.CLIP_GROUP_CLIPPED());\r\n    }\r\n}\r\n\r\nexport { ClipBox };\r\n","import * as THREE from \"three\";\r\n\r\nimport { Events } from \"core/Events\";\r\nimport { ClipPlane } from \"./clip_plane\";\r\nimport { ObservedSet } from \"core/utils/observed_set\";\r\n\r\nconst PRIVATE = {\r\n    ACTIVE: Symbol(\"CG_ACTIVE\"),\r\n    INTERSECT: Symbol(\"CG_INTERSECT\"),\r\n};\r\n\r\nconst INTERACT_EVENT = {\r\n    ACTIVEPLANE_CHANGE(oldf, newf) {\r\n        return {\r\n            type: \"ACTIVEPLANE_CHANGE\",\r\n            oldface: oldf,\r\n            newface: newf\r\n        };\r\n    },\r\n    PLANE_STATUS_CHANGE(info) {\r\n        return {\r\n            type: \"PLANE_STATUS_CHANGE\",\r\n            planeInfo: info\r\n        };\r\n    },\r\n};\r\n\r\nclass ClipGroup extends THREE.EventDispatcher {\r\n    constructor(opt) {\r\n        super();\r\n\r\n        this.planesToClip = new Set(); // 当前剖切面组中的剖切面（ClipPlane）\r\n\r\n        this.marks = new THREE.Group(); // 用于对剖切面展示和交互控制的图形元素\r\n        this.marks.visible = false;\r\n        this.marks_pickable = new Set;\r\n        this.marks.name = !!opt.name ? opt.name : \"A_ClipGroup\";\r\n        var scope = this;\r\n        this.marks.addPickable = function (...objs) {\r\n            objs.forEach(o => scope.marks_pickable.add(o));\r\n            this.add(...objs);\r\n        };\r\n        var origin_remove = this.marks.remove;\r\n        this.marks.remove = function (...objs) {\r\n            objs.forEach(o => scope.marks_pickable.delete(o));\r\n            origin_remove.call(this, ...objs);\r\n        };\r\n\r\n        this[PRIVATE.ACTIVE] = false;\r\n        this[PRIVATE.INTERSECT] = false;\r\n\r\n\r\n        this.elements = new ObservedSet();\r\n        this.elements.addEventListener(\"OSET_ADDED\", e => {\r\n            if (this.active) e.object.add_clip_planes(this, this.intersect);\r\n        });\r\n        this.elements.addEventListener(\"OSET_DELETED\", e => {\r\n            if (this.active) e.object.remove_clip_planes(this);\r\n        });\r\n\r\n        if (!!opt.viewer)\r\n            this.viewer = opt.viewer;\r\n\r\n        this.interactRequireCtrlKey = true;\r\n        this.interactLockDelay = 50;\r\n    }\r\n    addPlane(...args) {\r\n        var plane;\r\n        if (args.length == 1) {\r\n            if (!(args[0] instanceof ClipPlane))\r\n                throw new Error(\"参数类型必须为ClipPlane！\");\r\n            plane = args[0];\r\n        } else if (args.length == 2) {\r\n            plane = new ClipPlane(args[0], args[1]);\r\n        } else {\r\n            throw new Error(\"参数数量错误！\");\r\n        }\r\n\r\n        var n0 = this.planesToClip.size;\r\n        this.planesToClip.add(plane);\r\n        if (this.planesToClip.size > n0) {\r\n            this.dispatchEvent(Events.CLIP_GROUP_ADD_PLANE(this, plane));\r\n            if (this.active)\r\n                this.elements.forEach(e => e.add_clip_planes([plane.plane], this.intersect));\r\n        }\r\n        return plane;\r\n    }\r\n    removePlane(plane) {\r\n        if (!this.planesToClip.has(plane))\r\n            return false;\r\n        var n0 = this.planesToClip.size;\r\n        this.planesToClip.delete(plane);\r\n        if (this.planesToClip.size < n0) {\r\n            this.dispatchEvent(Events.CLIP_GROUP_REMOVE_PLANE(this, plane));\r\n            if (this.active)\r\n                this.elements.forEach(e => e.remove_clip_planes([plane.plane]));\r\n        }\r\n        return true;\r\n    }\r\n    // 控制当前剖切面集合之间是否取交集\r\n    get intersect() { return this[PRIVATE.INTERSECT]; }\r\n    set intersect(v) {\r\n        this[PRIVATE.INTERSECT] = v;\r\n        this.elements.forEach(e => {\r\n            try {\r\n                e.set_clip_intersect(v)\r\n            } catch (ex) {\r\n                console.error(e, ex);\r\n            }\r\n        });\r\n    }\r\n    // 控制当前剖切面集合是否执行剖切（通过清空/填充剖切面数组）\r\n    get active() { return this[PRIVATE.ACTIVE]; }\r\n    set active(v) {\r\n        if (this[PRIVATE.ACTIVE] == v) return;\r\n        this[PRIVATE.ACTIVE] = v;\r\n        this.dispatchEvent(Events.CLIP_GROUP_STATUS_CHANGE(this));\r\n        if (v) this.elements.forEach(e => e.add_clip_planes(this, this.intersect));\r\n        else this.elements.forEach(e => e.remove_clip_planes(this));\r\n    }\r\n    // 交互操作\r\n    _show_filter() { }\r\n    show(filterData = null) {\r\n        if (this.marks.visible && !filterData) return;\r\n        this.marks.visible = true;\r\n        if (!!filterData) {\r\n            this._show_filter(filterData);\r\n        }\r\n        this._redraw(\"clip show\");\r\n    }\r\n    hide() {\r\n        if (!this.marks.visible) return;\r\n        this.marks.visible = false;\r\n        this._redraw(\"clip hide\");\r\n    }\r\n\r\n    get interaction_enabled() {\r\n        return !!this._interaction_enabled;\r\n    }\r\n    set interaction_enabled(enable) {\r\n        if (!this.viewer) return;\r\n        if (!!this._interaction_enabled == !!enable) return;\r\n        this._interaction_enabled = !!enable;\r\n        if (!this._interaction_funcs) {\r\n            var scope = this;\r\n            var timeoutID;\r\n            this._interaction_funcs = {\r\n                ondown: event => {\r\n                    if (event.button != 0) return;\r\n                    if (this.interactRequireCtrlKey && !event.ctrlKey)\r\n                        return;\r\n                    if (!scope.marks.visible)\r\n                        return;\r\n                    // scope.CurrentPlaneInfo.locked = true;\r\n                    timeoutID = setTimeout(() =>\r\n                        scope.CurrentPlaneInfo.locked = true, this.interactLockDelay);\r\n                },\r\n                onup: event => {\r\n                    scope.CurrentPlaneInfo.locked = false;\r\n                    clearTimeout(timeoutID);\r\n                },\r\n                onmove: event => {\r\n                    if (!scope.marks.visible)\r\n                        return;\r\n                    if (!!scope.viewer.Controller && scope.viewer.Controller.inOperation)\r\n                        return;\r\n                    var pos = { x: event.offsetX, y: event.offsetY };\r\n                    scope._pick_plane_to_clip(pos);\r\n                    if (scope._do_interactive_clip(pos)) {\r\n                        scope._redraw(\"clip drag\"); // 必要时重绘\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        var canvas = this.viewer.Renderer.domElement;\r\n        if (enable) {\r\n            canvas.addEventListener('pointerdown', this._interaction_funcs.ondown);\r\n            canvas.addEventListener('pointerup', this._interaction_funcs.onup);\r\n            canvas.addEventListener('pointermove', this._interaction_funcs.onmove);\r\n        } else {\r\n            canvas.removeEventListener('pointerdown', this._interaction_funcs.ondown);\r\n            canvas.removeEventListener('pointerup', this._interaction_funcs.onup);\r\n            canvas.removeEventListener('pointermove', this._interaction_funcs.onmove);\r\n        }\r\n    }\r\n    get CurrentPlaneInfo() {\r\n        if (!this._curPlaneInfo) {\r\n            var scope = this;\r\n            var curFace = null;\r\n            this._curPlaneInfo = {\r\n                get PickedFace() { return curFace },\r\n                set PickedFace(f) {\r\n                    var oldFace = curFace;\r\n                    var refresh = () => {\r\n                        this.locked = false;\r\n                        scope.dispatchEvent(INTERACT_EVENT.ACTIVEPLANE_CHANGE(oldFace, f));\r\n                        scope._redraw(\"clip change\");\r\n                    };\r\n                    if (!!f) {\r\n                        if (!oldFace ||\r\n                            oldFace.markObject != f.markObject ||\r\n                            oldFace.materialIndex != f.materialIndex) {\r\n                            curFace = f;\r\n                            refresh();\r\n                        }\r\n                    } else if (!!oldFace) {\r\n                        curFace = null;\r\n                        refresh();\r\n                    }\r\n                },\r\n                get locked() { return !!curFace && !!this._locked; },\r\n                set locked(v) {\r\n                    if (!!scope.viewer.Controller && scope.viewer.Controller.inOperation)\r\n                        return;\r\n                    if (!curFace || this._locked == v) return;\r\n                    this._locked = v;\r\n                    scope.dispatchEvent(INTERACT_EVENT.PLANE_STATUS_CHANGE(this));\r\n                    if (v) scope.dispatchEvent(Events.CLIP_GROUP_LOCK());\r\n                    else scope.dispatchEvent(Events.CLIP_GROUP_UNLOCK());\r\n                    if (!!scope.viewer.Controller)\r\n                        scope.viewer.Controller.enabled = !v;\r\n                    scope._redraw(\"clip lock/unlock\");\r\n                    scope.clipping = !v;\r\n                    setTimeout(() => scope.clipping = false, 100);\r\n                    delete scope.lastDragPos;\r\n                }\r\n            };\r\n        }\r\n        return this._curPlaneInfo;\r\n    }\r\n    _redraw(debugMsg = \"\") {\r\n        if (!this.viewer) return;\r\n        this.viewer.redraw(debugMsg);\r\n    }\r\n    _pick_plane_to_clip(pos) { // 需要重绘时返回true\r\n        if (this.CurrentPlaneInfo.locked)\r\n            return;\r\n        // 拾取剖切面\r\n        var toPickInfo;\r\n        this.viewer.pick(pos, info => {\r\n            toPickInfo = info;\r\n        }, [...this.marks_pickable], false);\r\n        // 处理剖切面的可见性\r\n        if (!toPickInfo) {\r\n            this.CurrentPlaneInfo.PickedFace = null; // 删除\r\n        } else {\r\n            toPickInfo.face.faceIndex = toPickInfo.faceIndex;\r\n            toPickInfo.face.markObject = toPickInfo.object;\r\n            this.CurrentPlaneInfo.PickedFace = toPickInfo.face; // 初始化or变更\r\n        }\r\n    }\r\n    _move_plane(planeInfo, move_vector) { return false; } // 虚函数\r\n    _do_interactive_clip(drag_pos) {\r\n        if (!this.CurrentPlaneInfo.locked)\r\n            return false;\r\n        // 执行剖切操作\r\n        var size = new THREE.Vector2();\r\n        this.viewer.Renderer.getSize(size);\r\n        var plane = new THREE.PlaneBufferGeometry(size.x, size.y);\r\n        if (!this.dragPlane) { // 用于拾取光标拖拽位置的面\r\n            this.dragPlane = new THREE.Mesh(plane);\r\n        } else {\r\n            this.dragPlane.geometry.dispose();\r\n            this.dragPlane.geometry = plane;\r\n        }\r\n        this.dragPlane.lookAt(this.viewer.camera.position);\r\n        this.dragPlane.position.copy(this.viewer.Controller.target);\r\n        this.dragPlane.updateMatrixWorld();\r\n\r\n        var vMove;\r\n        this.viewer.pick(drag_pos, info => {\r\n            vMove = info.point.clone();\r\n        }, this.dragPlane, false);\r\n        if (!vMove) {\r\n            console.error(\"未捕捉到剖切盒拖拽点\");\r\n            return false;\r\n        }\r\n        var curPos = vMove.clone();\r\n        var ret = false;\r\n        if (this.lastDragPos) { // 计算拖拽距离（模型坐标系）\r\n            vMove.sub(this.lastDragPos);\r\n            var fLen = vMove.length();\r\n            if (fLen > 0.1) {\r\n                vMove.projectOnVector(this.CurrentPlaneInfo.PickedFace.normal);\r\n                vMove.setLength(fLen);\r\n                this.clipping = true;\r\n                this.dispatchEvent(Events.CLIP_GROUP_CLIPPING(vMove));\r\n                if (!!this._move_plane(this.CurrentPlaneInfo, vMove)) {\r\n                    this.dispatchEvent(Events.CLIP_GROUP_CLIPPED(vMove));\r\n                    ret = true;\r\n                    this.lastDragPos = curPos;\r\n                }\r\n            }\r\n        } else {\r\n            this.lastDragPos = curPos;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    // 剖切面集合操作\r\n    *[Symbol.iterator]() {\r\n        for (var p of this.planesToClip) yield p.plane;\r\n    }\r\n    get count() {\r\n        return this.planesToClip.size;\r\n    }\r\n\r\n    toJson() {\r\n        var jsonarr = [];\r\n        for (var p of this) {\r\n            jsonarr.push({\r\n                normal: {\r\n                    x: p.normal.x,\r\n                    y: p.normal.y,\r\n                    z: p.normal.z,\r\n                },\r\n                constant: p.constant\r\n            });\r\n        }\r\n        return jsonarr;\r\n    }\r\n    fromJson(jsonArr, forceLength = false) {\r\n        var cnt = jsonArr.length;\r\n        if (!Array.isArray(jsonArr))\r\n            throw new Error(\"参数错误：不是数组！\");\r\n        if (cnt != this.planesToClip.size) {\r\n            if (!forceLength)\r\n                throw new Error(\"参数错误：长度错误！\");\r\n            var cntToDel = this.planesToClip.size - cnt;\r\n            var arrSet = [...this.planesToClip];\r\n            for (var i = 0; i < cntToDel; i++)\r\n                this.planesToClip.delete(arrSet[i]);\r\n            var cntToAdd = cnt - this.planesToClip.size;\r\n            for (var i = 0; i < cntToAdd; i++)\r\n                this.addPlane([0, 0, 0], [0, 0, 1]);\r\n        }\r\n        var ps = [...this.planesToClip];\r\n        for (var i = 0; i < cnt; i++) {\r\n            ps[i].plane.normal.set(\r\n                jsonArr[i].normal.x,\r\n                jsonArr[i].normal.y,\r\n                jsonArr[i].normal.z\r\n            );\r\n            ps[i].constant = jsonArr[i].constant;\r\n        }\r\n        this.dispatchEvent(Events.CLIP_GROUP_CLIPPED());\r\n    }\r\n}\r\n\r\nexport { ClipGroup };","import * as THREE from \"three\";\r\n\r\nimport { Events } from \"core/Events\";\r\nimport { ClipBox } from \"./clip_box\";\r\nimport { ClipGroup } from \"./clip_group\";\r\n\r\n\r\nclass ClipManager extends THREE.EventDispatcher {\r\n    constructor(viewer, opt = {}) {\r\n        super();\r\n        this.opt = opt;\r\n        this.opt.viewer = viewer;\r\n\r\n        this._groups = new Map();\r\n        this.marks = new THREE.Group(); // 用于对剖切面展示和交互控制的图形元素\r\n        this.marks.name = \"ClipManagerMarks\"\r\n        this.marks.visible = true;\r\n\r\n        viewer.SceneManager.addDirectly(this.marks, 0);\r\n\r\n        this._autoadd = true;\r\n        viewer.addEventListener(\"MODEL_ADD_OBJECT\",\r\n            e => {\r\n                if (this._autoadd)\r\n                    for (var g of this.groups)\r\n                        g.elements.add(e.object);\r\n            });\r\n        viewer.addEventListener(\"LOAD_CHUNK_FINISH\",\r\n            e => {\r\n                if (this._autoadd)\r\n                    for (var g of this.groups)\r\n                        g.elements.add(...e.new_objects);\r\n            });\r\n    }\r\n    get AutoAddAllElements() { return this._autoadd; }\r\n    set AutoAddAllElements(v) {\r\n        if (this._autoadd == v) return;\r\n        this._autoadd = v;\r\n        if (v) {\r\n            this.opt.viewer.ModelManager.segments_group.traverse(o => {\r\n                o.clear_clip_planes();\r\n            })\r\n            for (g of this.groups) {\r\n                g.elements.clear();\r\n                g.elements.add(...this.opt.viewer.ModelManager.all);\r\n            }\r\n        }\r\n    }\r\n    // 一个或两个参数，\r\n    // 参数必须包含剖切面组的名字，\r\n    // 可以指定要添加的剖切面组对象\r\n    // 或剖切面组的类型对象\r\n    addGroup(...args) {\r\n        var name = \"\";\r\n        var group = null;\r\n        if (args.length == 1) {\r\n            if (typeof (args[0]) != \"string\" || !args[0]) {\r\n                throw new Error(\"addGroup参数类型错误！\");\r\n            }\r\n            name = args[0];\r\n            group = new ClipGroup(this.opt);\r\n        }\r\n        else if (args.length == 2) {\r\n            args.forEach(a => {\r\n                if (a instanceof ClipGroup) {\r\n                    group = a;\r\n                } else if (a instanceof Function &&\r\n                    Object.getPrototypeOf(a) == ClipGroup) {\r\n                    group = new a(this.opt);\r\n                } else if (typeof (a) == \"string\") {\r\n                    name = a;\r\n                }\r\n            });\r\n            if (!name && !group) {\r\n                throw new Error(\"addGroup参数类型错误！\");\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"addGroup参数数量错误！\");\r\n        }\r\n        this._groups.set(name, group);\r\n        this.marks.add(group.marks);\r\n        if (!!this.opt.viewer.Selection) {\r\n            var mat = this.opt.viewer.Selection.HighlightMaterial;\r\n            if (!group.elements.has(mat))\r\n                group.elements.add(mat);\r\n        }\r\n        if (this._autoadd) {\r\n            group.elements.clear();\r\n            group.elements.add(...this.opt.viewer.ModelManager.all);\r\n        }\r\n        return group;\r\n    }\r\n    getGroup(name) {\r\n        return this._groups.get(name);\r\n    }\r\n    removeGroup(name) {\r\n        var g = this._groups.get(name);\r\n        if (!!g) g.active = false;\r\n        this.marks.remove(g.marks);\r\n        return this._groups.delete(name);\r\n    }\r\n    getAll() {\r\n        return [...this._groups].map(e => Object({ name: e[0], group: e[1] }));\r\n    }\r\n    get names() { return this._groups.keys(); }\r\n    get groups() { return this._groups.values(); }\r\n}\r\n\r\nexport { ClipManager };\r\n","import * as THREE from \"three\";\r\n\r\nimport { Events } from \"core/Events\";\r\n\r\nclass ClipPlane extends THREE.EventDispatcher {\r\n    constructor(pos, dir) {\r\n        super();\r\n        function fixVector3(v) {\r\n            if (v.isVector3)\r\n                return v;\r\n            else if (Array.isArray(v))\r\n                return new THREE.Vector3(...v);\r\n            else\r\n                return new THREE.Vector3(v.x, v.y, v.z);\r\n        }\r\n        pos = fixVector3(pos);\r\n        dir = fixVector3(dir);\r\n        var c = pos.dot(dir);\r\n        this.plane = new THREE.Plane(dir.negate(), c);\r\n    }\r\n    get constant() { return this.plane.constant; }\r\n    set constant(v) {\r\n        if (this.plane.constant != v) {\r\n            this.plane.constant = v;\r\n            this.dispatchEvent(Events.CLIP_PLANE_CHANGE(this));\r\n        }\r\n    }\r\n    get normal() { return this.plane.normal.clone().negate(); }\r\n    set normal(v) {\r\n        this.plane.normal.set(-v.x, -v.y, -v.z);\r\n        this.dispatchEvent(Events.CLIP_PLANE_CHANGE(this));\r\n    }\r\n    getPosition() { return this.normal.multiplyScalar(this.constant); }\r\n    setFromPosition(pos) {\r\n        // 使剖切面移动到位置pos（pos在平面上），而方向不变\r\n        var newC = -pos.dot(this.plane.normal);\r\n        this.constant = newC;\r\n    }\r\n    rotate(theta, axis, axispos) {\r\n        if (!theta) return;\r\n        if (!axispos) axispos.set(0, 0, 0);\r\n        if (!axis) axis.set(0, 0, 1);\r\n        var m4 = new THREE.Matrix4();\r\n        var m4r = new THREE.Matrix4();\r\n        m4.identity();\r\n        m4.makeTranslation(-axispos.x, -axispos.y, -axispos.z);\r\n        m4r.identity();\r\n        m4r.makeRotationAxis(axis.normalize(), theta);\r\n        m4.multiply(m4r);\r\n        m4r.identity();\r\n        m4r.makeTranslation(axispos.x, axispos.y, axispos.z);\r\n        m4.multiply(m4r);\r\n        var newP = this.plane.clone();\r\n        newP.normal.negate();\r\n        newP.applyMatrix4(m4);\r\n        newP.normal.negate();\r\n        if (!this.plane.equals(newP)) {\r\n            this.plane.copy(newP);\r\n            this.dispatchEvent(Events.CLIP_PLANE_CHANGE(this));\r\n        }\r\n    }\r\n    reverse() {\r\n        // 剖切反向\r\n        this.plane.constant = -this.plane.constant;\r\n        this.plane.normal.negate();\r\n        this.dispatchEvent(Events.CLIP_PLANE_CHANGE(this));\r\n    }\r\n}\r\n\r\nexport { ClipPlane };","import {CreateLable} from \"../../lable/CreateLable\";\r\n\r\n//点\r\nclass CreatPoint {\r\n    constructor(pos){\r\n        this.pos = pos\r\n    }\r\n    //绘点\r\n    createPoint  (pos,viewer,className)  {\r\n        let table = new CreateLable(viewer)\r\n        let num = ''\r\n        let name = 'point'\r\n        let pointTable = table.create2DObject(num,pos,className,name)\r\n        // viewer.DecorationManager.addDecoration(pointTable,0)\r\n        return pointTable\r\n\r\n    };\r\n\r\n    createPoint1  (pos,viewer,className)  {\r\n        let table = new CreateLable(viewer)\r\n        let num = ''\r\n        let name = 'point1'\r\n        let pointTable = table.create2DObject(num,pos,className,name)\r\n        // viewer.DecorationManager.addDecoration(pointTable,0)\r\n        return pointTable\r\n\r\n    };\r\n}\r\nexport {CreatPoint}\r\n","import * as THREE from \"three\";\r\nimport { CreatPoint } from \"./CreatPoint\";\r\nimport { CreateLable } from \"../../lable/CreateLable\";\r\n\r\nlet isFace = false\r\nlet taggingPoint = []\r\nlet everyLinePoints = []\r\nlet arrayData = []\r\nlet everyLinePointsNew = []\r\nlet oneLinePoints = []\r\nlet points = []\r\nlet pointAll = []\r\nlet pointsArr = [];\r\nlet flag = false\r\nclass DrawLine {\r\n    constructor(viewer) {\r\n        this.viewer = viewer;\r\n    }\r\n    _disableSelection(viewer) {\r\n        if (!!viewer.Selection)\r\n            viewer.Selection.enable(false)\r\n    }\r\n    drawLine(obj, v = false) {\r\n        let scope = this;\r\n        let pointOne = new THREE.Vector3();\r\n        let pointTwo = new THREE.Vector3();\r\n        let line, num1, index, p1;\r\n\r\n        let pointFirst;\r\n        let pointTable;\r\n        let pointIndex = [];\r\n        let pointAll1 = [];\r\n        let taggingOne;\r\n        scope._disableSelection(scope.viewer);\r\n\r\n        let last;\r\n        let lastPos = {};\r\n        let isMobile = false;\r\n        let isWeb = false;\r\n        let canvas = scope.viewer.Renderer.domElement;\r\n        let mobileMeaHandle = document.getElementById(\"mobileMeasureHandleArea\");\r\n        if (!this.eventHandlerPtoP) {\r\n            this.eventHandlerPtoP = function(event) {\r\n                event.preventDefault();\r\n                let clientPos = {};\r\n                switch (event.type) {\r\n                    case 'touchend':\r\n                        let now = Date.now();\r\n                        let time = now - (last || now);\r\n                        isMobile = time > 0 && time < 1000;\r\n                        if (isMobile) {\r\n                            clientPos.x = lastPos.x; //两秒之内点击，取上次touchend的位置，排除再次touchend画点时的位置变化\r\n                            clientPos.y = lastPos.y;\r\n                        } else {\r\n                            lastPos.x = event.changedTouches[0].clientX - 16; //记录上一次小红点位置\r\n                            lastPos.y = event.changedTouches[0].clientY - 50;\r\n                        }\r\n                        last = Date.now();\r\n                        break;\r\n                    case 'click':\r\n                        clientPos.x = event.offsetX;\r\n                        clientPos.y = event.offsetY;\r\n                        isWeb = true;\r\n                        break;\r\n                    default:\r\n                        return;\r\n                }\r\n\r\n                if (!isMobile && !isWeb) return;\r\n                if (!scope.viewer.pick(clientPos)) {\r\n                    scope.quitDrawLine(scope);\r\n                    return;\r\n                }\r\n\r\n                points = [];\r\n                pointOne = scope.viewer.pick(clientPos).point\r\n                let arr = scope.viewer.pick(clientPos).object.edge.geometry.attributes.position.array\r\n                let arrNew = Array.from(arr)\r\n\r\n                oneLinePoints.push(pointOne)\r\n\r\n                arrNew.forEach((item, index) => {\r\n                    if (index % 3 == 0) {\r\n                        pointIndex.push(index)\r\n                    }\r\n                })\r\n\r\n                pointIndex.forEach(item => {\r\n                    let point = arrNew.slice(item, item + 3)\r\n                    let pointV3 = new THREE.Vector3(point[0], point[1], point[2])\r\n                    pointAll1.push(pointV3)\r\n                })\r\n\r\n                pointAll1.forEach(item => {\r\n                    let p1 = item\r\n                    let p2 = pointOne\r\n                    let line3 = new THREE.Line3(p2, p1)\r\n                    let num = line3.distance()\r\n                    if (num < 0.05) {\r\n                        pointOne = item\r\n                    }\r\n                })\r\n                pointAll.push(pointOne)\r\n                arrayData.push(pointOne)\r\n                window.dataArray = arrayData\r\n\r\n                //点击的两个点之间标注一段距离和一条直线\r\n                if (pointAll.length >= 2) {\r\n                    let p1 = pointAll[pointAll.length - 1]\r\n                    let p2 = pointAll[pointAll.length - 2]\r\n                    let line3 = new THREE.Line3(p2, p1)\r\n                    let num = line3.distance()\r\n                    num = num / 3.28084\r\n                    num = num.toFixed(3)\r\n                    if (num != 0.00) {\r\n                        let pos1 = new THREE.Vector3()\r\n                        let pos = line3.getCenter(pos1)\r\n\r\n                        let table = new CreateLable(scope.viewer)\r\n\r\n                        let numText = table.create2DObject(num, pos, 'lineLabel')\r\n                        taggingOne = {\r\n                            num: num,\r\n                            pos: pos\r\n                        }\r\n                        taggingPoint.push(taggingOne)\r\n                        scope.viewer.DecorationManager.addDecoration(numText, 0)\r\n                        scope.viewer.redraw(\"start\")\r\n                    }\r\n                }\r\n\r\n                pointFirst = new CreatPoint(pointOne)\r\n                pointTable = pointFirst.createPoint(pointOne, scope.viewer, 'point')\r\n                scope.viewer.DecorationManager.addDecoration(pointTable, 0)\r\n\r\n                //一条射线\r\n                let material = new THREE.LineBasicMaterial({\r\n                    color: 'white'\r\n                });\r\n                material.depthFunc = THREE.AlwaysDepth\r\n                let geometry = new THREE.BufferGeometry();\r\n                points.push(pointOne);\r\n                points.push(pointOne);\r\n                geometry.setFromPoints(points)\r\n                line = new THREE.Line(geometry, material);\r\n\r\n                scope.viewer.DecorationManager.addDecoration(line, 0)\r\n                scope.viewer.redraw(\"start\")\r\n                flag = true;\r\n\r\n                isMobile = false;\r\n                isWeb = false;\r\n                last = 0;\r\n\r\n                //移动\r\n                if (!flag) return;\r\n                if (!scope.eventHandlerMovePtoP) {\r\n                    scope.eventHandlerMovePtoP = function(event) {\r\n                        event.preventDefault();\r\n                        let clientPos = {};\r\n                        switch (event.type) {\r\n                            case 'touchmove':\r\n                                clientPos.x = event.changedTouches[0].clientX - 16;\r\n                                clientPos.y = event.changedTouches[0].clientY - 50;\r\n                                $(\"#measureEscTip\").hide();\r\n                                break;\r\n                            case 'mousemove':\r\n                                clientPos.x = event.offsetX;\r\n                                clientPos.y = event.offsetY;\r\n                                var measureEscTip = document.getElementById(\"measureEscTip\");\r\n                                var x = event.pageX;\r\n                                var y = event.pageY;\r\n                                measureEscTip.style.left = x - 0.5 * measureEscTip.offsetWidth + 80 + \"px\";\r\n                                measureEscTip.style.top = y - 0.5 * measureEscTip.offsetHeight + \"px\";\r\n                                $(\"#measureEscTip\").show();\r\n                                break;\r\n                            default:\r\n                                return;\r\n                        }\r\n                        if (!scope.viewer.pick(clientPos)) {\r\n                            $(\"#measureEscTip\").hide();\r\n                            return;\r\n                        }\r\n\r\n                        pointTwo = scope.viewer.pick(clientPos).point;\r\n                        pointAll1.forEach(item => {\r\n                            let p1 = item;\r\n                            let p2 = pointTwo;\r\n                            let line3 = new THREE.Line3(p2, p1);\r\n                            let num = line3.distance();\r\n                            if (num < 0.05) {\r\n                                pointTwo = item;\r\n                            }\r\n                        })\r\n                        points.splice(points.length - 1, 1)\r\n                        points.push(new THREE.Vector3(pointTwo.x, pointTwo.y, pointTwo.z));\r\n                        line.geometry.setFromPoints(points)\r\n                        line.frustumCulled = false;\r\n                        scope.viewer.DecorationManager.addDecoration(line, 0)\r\n                        scope.viewer.redraw(\"start\");\r\n                    };\r\n                }\r\n                if ('ontouchstart' in document.documentElement) mobileMeaHandle.addEventListener('touchmove', scope.eventHandlerMovePtoP);\r\n                else canvas.addEventListener('mousemove', scope.eventHandlerMovePtoP);\r\n\r\n                let data = {\r\n                    oneLinePoints: oneLinePoints,\r\n                }\r\n                everyLinePoints.push(data)\r\n\r\n                //为了去重,添加表示\r\n                let ran = Math.round(Math.random() * 100);\r\n\r\n                if (obj) {\r\n                    everyLinePoints.forEach(item => {\r\n                        if (item.oneLinePoints.length != 0) {\r\n                            let data = {\r\n                                id: ran,\r\n                                oneLinePoints: item,\r\n                                taggingPoint: taggingPoint,\r\n                            }\r\n                            obj.everyLinePointsNew.push(data)\r\n                        }\r\n                    })\r\n                    window.everyLinePointsNew = obj.everyLinePointsNew\r\n                } else {\r\n                    everyLinePoints.forEach((item, index) => {\r\n                        if (item.oneLinePoints.length != 0) {\r\n                            let data = {\r\n                                id: ran,\r\n                                oneLinePoints: item,\r\n                                taggingPoint: taggingPoint,\r\n                            }\r\n                            everyLinePointsNew.push(data)\r\n                        }\r\n\r\n                    })\r\n                    window.everyLinePointsNew = everyLinePointsNew\r\n                }\r\n            };\r\n        }\r\n        if (v) {\r\n            if ('ontouchstart' in document.documentElement) mobileMeaHandle.addEventListener('touchend', this.eventHandlerPtoP);\r\n            else canvas.addEventListener('click', this.eventHandlerPtoP);\r\n        } else {\r\n            canvas.removeEventListener('click', this.eventHandlerPtoP);\r\n            mobileMeaHandle.removeEventListener('touchend', this.eventHandlerPtoP);\r\n            canvas.removeEventListener('mousemove', this.eventHandlerMovePtoP);\r\n            mobileMeaHandle.removeEventListener('touchmove', this.eventHandlerMovePtoP);\r\n        }\r\n    }\r\n\r\n    keyDownEsc(event) {\r\n        if (event.keyCode == 27) {\r\n            let scope = document._params;\r\n            scope.quitDrawLine(scope);\r\n        }\r\n    }\r\n\r\n    quitDrawLine(scope) {\r\n        pointAll = []\r\n        points = []\r\n\r\n        let movePointNew = []\r\n        let moveEnd = scope.viewer.DecorationManager._scene.children\r\n        movePointNew = scope.getArrEqual(moveEnd, pointsArr)\r\n        pointsArr = moveEnd\r\n        if (moveEnd.length <= 3) {\r\n            if (moveEnd[moveEnd.length - 1].children.length == 0) {\r\n                let p = new THREE.Group()\r\n                moveEnd[moveEnd.length - 1].children.push(p)\r\n                let moveEndNew = Array.from(moveEnd)\r\n                moveEndNew.forEach(item => {\r\n                    scope.viewer.DecorationManager.removeDecoration(item)\r\n                })\r\n            }\r\n        } else {\r\n            if (moveEnd[moveEnd.length - 1].children.length == 0) {\r\n                let p = new THREE.Group()\r\n                moveEnd[moveEnd.length - 1].children.push(p)\r\n                let moveCaptureLine = []\r\n                let movePoint = []\r\n                moveEnd.forEach((item, index) => {\r\n                    if (item.type == \"Line\") {\r\n                        moveCaptureLine.push(item)\r\n                    }\r\n                    if (item.name == 'point') {\r\n                        movePoint.push(item)\r\n                    }\r\n                })\r\n                let moveCaptureLineNew = Array.from(moveCaptureLine)\r\n                if (moveCaptureLineNew.length >= 1) {\r\n                    scope.viewer.DecorationManager.removeDecoration(moveCaptureLineNew[moveCaptureLineNew.length - 1])\r\n                }\r\n\r\n                if (movePointNew.length == 0) {\r\n                    return\r\n                } else\r\n                if (movePointNew[movePointNew.length - 1].type == \"Object3D\" && movePointNew[movePointNew.length - 2].type == \"Line\") {\r\n                    scope.viewer.DecorationManager.removeDecoration(movePointNew[movePointNew.length - 1])\r\n                    if (movePointNew[movePointNew.length - 1].children.length == 0) {\r\n                        return\r\n                    }\r\n                    scope.viewer.DecorationManager.removeDecoration(movePointNew[movePointNew.length - 2])\r\n                }\r\n            }\r\n        }\r\n        scope.viewer.redraw(\"start\")\r\n        flag = false\r\n    }\r\n\r\n    getArrEqual(arr1, arr2) {\r\n        let newArr = [];\r\n        for (let i = 0; i < arr2.length; i++) {\r\n            for (let j = 0; j < arr1.length; j++) {\r\n                if (arr1[j] != arr2[i]) {\r\n                    newArr.push(arr1[j]);\r\n                }\r\n            }\r\n        }\r\n        return newArr;\r\n    }\r\n    clearBefore() {\r\n        //清除点点数据\r\n        everyLinePointsNew = []\r\n        everyLinePoints = []\r\n        taggingPoint = []\r\n        arrayData = []\r\n        oneLinePoints = []\r\n        points = []\r\n        pointAll = []\r\n        flag = false\r\n    }\r\n}\r\n\r\nexport { DrawLine }","import * as THREE from \"three\";\r\nimport { CreatPoint } from \"./CreatPoint\";\r\nimport { CreateLable } from \"../../lable/CreateLable\";\r\n\r\nlet taggingFace = []\r\nlet verticalPoints = []\r\nlet points = []\r\nlet pointAll = []\r\nclass DrawLinePointToFace {\r\n    constructor(viewer) {\r\n        this.viewer = viewer;\r\n    }\r\n    _disableSelection(viewer) {\r\n        if (!!viewer.Selection)\r\n            viewer.Selection.enable(false)\r\n    }\r\n\r\n    drawLinePointToFace(obj, v = false) {\r\n        let scope = this;\r\n        let point;\r\n        let normals = [];\r\n        let pointIndex = [];\r\n        let pointAll = [];\r\n        this._disableSelection(scope.viewer);\r\n\r\n        let last;\r\n        let lastPos = {};\r\n        let isMobile = false;\r\n        let isWeb = false;\r\n        if (!this.eventHandlerPtoF) {\r\n            this.eventHandlerPtoF = function(event) {\r\n                event.preventDefault();\r\n                let clientPos = {};\r\n                switch (event.type) {\r\n                    case 'touchend':\r\n                        let now = Date.now();\r\n                        let time = now - (last || now);\r\n                        isMobile = time > 0 && time < 1000;\r\n                        if (isMobile) {\r\n                            clientPos.x = lastPos.x; //两秒之内点击，取上次touchend的位置，排除再次touchend画点时的位置变化\r\n                            clientPos.y = lastPos.y;\r\n                        } else {\r\n                            lastPos.x = event.changedTouches[0].clientX - 16; //记录上一次小红点位置\r\n                            lastPos.y = event.changedTouches[0].clientY - 50;\r\n                        }\r\n                        last = Date.now();\r\n                        break;\r\n                    case 'click':\r\n                        clientPos.x = event.offsetX;\r\n                        clientPos.y = event.offsetY;\r\n                        isWeb = true;\r\n                        break;\r\n                    default:\r\n                        return;\r\n                }\r\n\r\n                if (!isMobile && !isWeb) return;\r\n                if (!scope.viewer.pick(clientPos)) return;\r\n                point = scope.viewer.pick(clientPos).point\r\n\r\n                let arr = scope.viewer.pick(clientPos).object.edge.geometry.attributes.position.array\r\n                let arrNew = Array.from(arr)\r\n\r\n                arrNew.forEach((item, index) => {\r\n                    if (index % 3 == 0) {\r\n                        pointIndex.push(index)\r\n                    }\r\n                })\r\n\r\n                pointIndex.forEach(item => {\r\n                    let point = arrNew.slice(item, item + 3)\r\n                    let pointV3 = new THREE.Vector3(point[0], point[1], point[2])\r\n                    pointAll.push(pointV3)\r\n                })\r\n\r\n                pointAll.forEach(item => {\r\n                    let p1 = item\r\n                    let p2 = point\r\n                    let line3 = new THREE.Line3(p2, p1)\r\n                    let num = line3.distance()\r\n                    if (num < 0.05) {\r\n                        point = item\r\n                    }\r\n                })\r\n\r\n                points.push(point)\r\n                let pointFirst = new CreatPoint(point)\r\n                let pointTable = pointFirst.createPoint(point, scope.viewer, 'point')\r\n                scope.viewer.DecorationManager.addDecoration(pointTable, 0)\r\n                scope.viewer.redraw('start')\r\n                isMobile = false;\r\n                isWeb = false;\r\n                last = 0;\r\n\r\n                normals.push(scope.viewer.pick(clientPos).face.normal)\r\n                if (!points[1]) return; //点击了两下\r\n                let subVector = new THREE.Vector3()\r\n\r\n                let subVectorNew = subVector.subVectors(points[1], points[0])\r\n\r\n                let projectionVector = subVectorNew.projectOnVector(normals[1])\r\n\r\n                let addVector = new THREE.Vector3()\r\n\r\n                let dropFoot = addVector.addVectors(points[0], projectionVector)\r\n\r\n                let pointSurface = new CreateLable(scope.viewer)\r\n                let triangle = pointSurface.create2DObjectSvgPointSurface(dropFoot)\r\n                scope.viewer.DecorationManager.addDecoration(triangle, 0)\r\n                scope.viewer.redraw('start')\r\n\r\n                //jyp-点和面图标之间的虚线\r\n                var geometry = new THREE.BufferGeometry();\r\n                var vertices = new Float32Array([\r\n                    points[1].x, points[1].y, points[1].z,\r\n                    dropFoot.x, dropFoot.y, dropFoot.z\r\n                ]);\r\n                geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n                var material = new THREE.LineDashedMaterial({ color: 0xff0000, dashSize: 0.05, gapSize: 0.05 });\r\n                material.depthFunc = THREE.AlwaysDepth\r\n                var mesh = new THREE.Line(geometry, material);\r\n                mesh.computeLineDistances(); //不可或缺的，若无，则线段不能显示为虚线\r\n                scope.viewer.DecorationManager.addDecoration(mesh, 0)\r\n                scope.viewer.redraw('start')\r\n\r\n                //jyp-距离线\r\n                var geometry = new THREE.BufferGeometry();\r\n                var vertices = new Float32Array([\r\n                    points[0].x, points[0].y, points[0].z,\r\n                    dropFoot.x, dropFoot.y, dropFoot.z\r\n                ]);\r\n                geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n                var material = new THREE.MeshBasicMaterial({ color: 0xffff00 });\r\n                material.depthFunc = THREE.AlwaysDepth\r\n                var mesh = new THREE.Line(geometry, material);\r\n                scope.viewer.DecorationManager.addDecoration(mesh, 0)\r\n                scope.viewer.redraw('start')\r\n\r\n                //距离标注\r\n                let pOne = points[0]\r\n                let pTwo = dropFoot\r\n                let line3 = new THREE.Line3(pTwo, pOne)\r\n                let num = line3.distance()\r\n                num = num / 3.28084\r\n                num = num.toFixed(3)\r\n\r\n                let pos1 = new THREE.Vector3()\r\n                let pos = line3.getCenter(pos1)\r\n\r\n                let table = new CreateLable(scope.viewer)\r\n                let numText = table.create2DObject(num, pos, 'lineLabel')\r\n\r\n                let taggingOne = {\r\n                    num: num,\r\n                    pos: pos\r\n                }\r\n                taggingFace.push(taggingOne)\r\n                // window.taggingFace = taggingFace\r\n                scope.viewer.DecorationManager.addDecoration(numText, 0)\r\n                scope.viewer.redraw(\"start\")\r\n\r\n                if (obj) {\r\n                    //一条垂线包含点\r\n                    let oneVerticalPoints = {\r\n                        oneVertical: [points[0], points[1], dropFoot],\r\n                        taggingFace: taggingFace\r\n                    }\r\n                    obj.verticalPoints.push(oneVerticalPoints)\r\n\r\n                    window.verticalPoints = obj.verticalPoints\r\n                } else {\r\n                    //一条垂线包含点\r\n                    let oneVerticalPoints = {\r\n                        oneVertical: [points[0], points[1], dropFoot],\r\n                        taggingFace: taggingFace\r\n                    }\r\n                    verticalPoints.push(oneVerticalPoints)\r\n\r\n                    window.verticalPoints = verticalPoints\r\n                }\r\n\r\n                points = []\r\n                normals = []\r\n\r\n            };\r\n        }\r\n\r\n        let canvas = scope.viewer.Renderer.domElement;\r\n        let mobileMeaHandle = document.getElementById(\"mobileMeasureHandleArea\");\r\n        if (v) {\r\n            if ('ontouchstart' in document.documentElement) mobileMeaHandle.addEventListener('touchend', this.eventHandlerPtoF);\r\n            else canvas.addEventListener('click', this.eventHandlerPtoF);\r\n        } else {\r\n            canvas.removeEventListener('click', this.eventHandlerPtoF);\r\n            mobileMeaHandle.removeEventListener('touchend', this.eventHandlerPtoF);\r\n        }\r\n    }\r\n\r\n    clearBefore() {\r\n        points = []\r\n        pointAll = []\r\n        verticalPoints = []\r\n        taggingFace = []\r\n    }\r\n}\r\n\r\nexport { DrawLinePointToFace }","import * as THREE from \"three\";\r\nimport { CreatPoint } from \"./CreatPoint\";\r\nimport { CreateLable } from \"../../lable/CreateLable\";\r\nimport { CaptureLine } from \"../../capture/CaptureLine\";\r\n\r\nlet points = []\r\nclass DrawLinePointToLine {\r\n    constructor(viewer) {\r\n        this.viewer = viewer;\r\n    }\r\n    _disableSelection(viewer) {\r\n        if (!!viewer.Selection)\r\n            viewer.Selection.enable(false)\r\n    }\r\n\r\n    drawLinePointToLine(obj, v = false) {\r\n        let scope = this;\r\n        this._disableSelection(scope.viewer);\r\n        let last;\r\n        let lastPos = {};\r\n        let isMobile = false;\r\n        let isWeb = false;\r\n        let taggingLine = [];\r\n        let verticalPointToLine = [];\r\n        \r\n        if(!this.eventHandlerPtoL){\r\n        this.eventHandlerPtoL = function(event) {\r\n            event.preventDefault();\r\n\r\n            //取当前位置\r\n            let pos = {};\r\n            switch (event.type) {\r\n                case 'touchend':\r\n                    let now = Date.now();\r\n                    let time = now - (last || now);\r\n                    isMobile = time > 0 && time < 1000;\r\n                    if (isMobile) {\r\n                        pos.x = lastPos.x; //两秒之内点击，取上次touchend的位置，排除再次touchend画点时的位置变化\r\n                        pos.y = lastPos.y;\r\n                    } else {\r\n                        lastPos.x = event.changedTouches[0].clientX - 16; //记录上一次小红点位置\r\n                        lastPos.y = event.changedTouches[0].clientY - 50;\r\n                    }\r\n                    last = Date.now();\r\n                    break;\r\n                case 'click':\r\n                    pos.x = event.offsetX;\r\n                    pos.y = event.offsetY;\r\n                    isWeb = true;\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n\r\n            if (!isMobile && !isWeb) return;\r\n            if (!scope.viewer.pick(pos)) return;\r\n\r\n            let point = scope.viewer.pick(pos).point;\r\n            points.push(point);\r\n            //画第一个点\r\n            if (points.length == 1) {\r\n                let pointFirst = new CreatPoint(point);\r\n                let pointTable = pointFirst.createPoint(point, scope.viewer, 'point');\r\n                scope.viewer.DecorationManager.addDecoration(pointTable, 0);\r\n                scope.viewer.redraw('start');\r\n                let captureLine = new CaptureLine(scope.viewer);\r\n                captureLine.getCaptureLine(points, obj, true);\r\n            } else if (JSON.stringify(window.captureLineResult) != \"{}\") {\r\n                $(\"#container\").css(\"cursor\", \"crosshair\");\r\n                let geometry1 = new THREE.BufferGeometry();\r\n                let vertices1 = new Float32Array([\r\n                    points[0].x, points[0].y, points[0].z,\r\n                    window.captureLineResult.x, window.captureLineResult.y, window.captureLineResult.z\r\n                ]);\r\n                geometry1.setAttribute('position', new THREE.BufferAttribute(vertices1, 3));\r\n                var material1 = new THREE.MeshBasicMaterial({ color: 0xffffff });\r\n                material1.depthFunc = THREE.AlwaysDepth;\r\n                var mesh1 = new THREE.Line(geometry1, material1);\r\n                mesh1.name = \"vertical\";\r\n                scope.viewer.DecorationManager.addDecoration(mesh1, 0);\r\n                scope.viewer.redraw('start');\r\n\r\n                let pointSurface = new CreateLable(scope.viewer);\r\n                let triangle = pointSurface.create2DObjectSvgDropFoot(window.captureLineResult);\r\n                scope.viewer.DecorationManager.addDecoration(triangle, 0);\r\n\r\n                let pOne = points[0];\r\n                let pTwo = window.captureLineResult;\r\n                let line3 = new THREE.Line3(pTwo, pOne);\r\n                let num = line3.distance();\r\n                num = (num / 3.28084).toFixed(3);\r\n\r\n                let pos1 = new THREE.Vector3();\r\n                let pos = line3.getCenter(pos1);\r\n\r\n                let table = new CreateLable(scope.viewer);\r\n                let numText = table.create2DObject(num, pos, 'lineLabel', \"lineLabel1\");\r\n\r\n                let taggingOne = {\r\n                    num: num,\r\n                    pos: pos\r\n                };\r\n                taggingLine.push(taggingOne);\r\n                // window.taggingLine = taggingLine\r\n\r\n                scope.viewer.DecorationManager.addDecoration(numText, 0);\r\n                scope.viewer.redraw('start');\r\n\r\n                if (obj) {\r\n                    //一条垂线包含点\r\n                    let oneVerticalPoints = {\r\n                        oneVertical: [points[0], window.captureLineResult],\r\n                        taggingLine: taggingLine\r\n                    };\r\n                    obj.verticalPointToLine.push(oneVerticalPoints);\r\n                    window.verticalPointToLine = obj.verticalPointToLine;\r\n                } else {\r\n                    //一条垂线包含点\r\n                    let oneVerticalPoints = {\r\n                        oneVertical: [points[0], window.captureLineResult],\r\n                        taggingLine: taggingLine\r\n                    };\r\n                    verticalPointToLine.push(oneVerticalPoints);\r\n                    window.verticalPointToLine = verticalPointToLine;\r\n                }\r\n                points = [];\r\n            }\r\n\r\n        };\r\n        }\r\n        let canvas = scope.viewer.Renderer.domElement;\r\n        let mobileMeaHandle = document.getElementById(\"mobileMeasureHandleArea\");\r\n        if (v) {\r\n            if('ontouchstart' in document.documentElement) mobileMeaHandle.addEventListener('touchend', this.eventHandlerPtoL);\r\n            else canvas.addEventListener('click', this.eventHandlerPtoL);\r\n        } else {\r\n            canvas.removeEventListener('click', this.eventHandlerPtoL);\r\n            mobileMeaHandle.removeEventListener('touchend', this.eventHandlerPtoL);\r\n        }\r\n    }\r\n\r\n    clearBefore() {\r\n        points = []\r\n\r\n        /*        //清除点线数据\r\n                let ca = new CaptureLine(viewer)\r\n                ca.clearBefore()*/\r\n\r\n    }\r\n}\r\n\r\nexport { DrawLinePointToLine }","import { DimensionBusiness } from \"../../business/DimensionBusiness\";\r\nimport { ElevationBusiness } from \"../../business/ElevationBusiness\";\r\n\r\n//绘线对象\r\nlet dimensionBusiness;\r\n//标高对象\r\nlet elevation;\r\n\r\nfunction init(viewer) {\r\n    $(\"#container\").append(`\r\n        <div id=\"mobileMeasureHandle\" class=\"mobile-measure-handle\">\r\n            <div class=\"mobile-mea-pos\">\r\n                <svg t=\"1670247324866\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"2807\" width=\"32\" height=\"32\">\r\n    <path d=\"M294.8 22.8L23.2 294.3c-12.5 12.5-12.5 32.8 0 45.3l656.2 656.2c12.5 12.5 32.8 12.5 45.3 0l271.5-271.5c12.5-12.5 12.5-32.8 0-45.3L340 \r\n    22.8c-12.5-12.5-32.8-12.5-45.2 0z m-198 288.5l215-215c3.1-3.1 8.2-3.1 11.3 0l33.9 33.9c3.1 3.1 3.1 8.2 0 11.3l-96.2 96.2 45.3 45.3 96.2-96.2c3.1-3.1 \r\n    8.2-3.1 11.3 0l22.4 22.4c3.1 3.1 3.1 8.2 0 11.3l-62.2 62.2L419 328l62.2-62.2c3.1-3.1 8.2-3.1 11.3 0l22.4 22.4c3.1 3.1 3.1 8.2 0 11.3l-62.2 62.2L498 \r\n    407l62.2-62.2c3.1-3.1 8.2-3.1 11.3 0l23.1 23.1c3.1 3.1 3.1 8.2 0 11.3l-96.2 96.2 45.3 45.3 96.2-96.2c3.1-3.1 8.2-3.1 11.3 0l22.4 22.4c3.1 3.1 3.1 \r\n    8.2 0 11.3l-62.2 62.2 45.3 45.3 62.2-62.2c3.1-3.1 8.2-3.1 11.3 0l22.4 22.4c3.1 3.1 3.1 8.2 0 11.3l-62.2 62.2 45.3 45.3 62.2-62.2c3.1-3.1 8.2-3.1 \r\n    11.3 0l23.1 23.1c3.1 3.1 3.1 8.2 0 11.3l-96.3 96 45.3 45.3 96.2-96.2c3.1-3.1 8.2-3.1 11.3 0l33.9 33.9c3.1 3.1 3.1 8.2 0 11.3l-215 215c-3.1 3.1-8.2 \r\n    3.1-11.3 0L96.8 322.6a7.85 7.85 0 0 1 0-11.3z\" p-id=\"2808\" fill=\"#333333\"></path></svg>\r\n            </div>\r\n            <div id=\"mobileMeasureHandleArea\" class=\"mobile-mea-handle-area\">\r\n                <span></span>\r\n            </div>\r\n        </div>\r\n        <div id=\"measureEscTip\" class=\"measure-esc-tip\">\r\n            <span>单击空白处退出绘线</span>\r\n        </div>\r\n        `);\r\n\r\n    $(\"#container\").append(`\r\n    <div id=\"measureSetting\" class=\"docking-panel measure-setting\">\r\n        <div class=\"docking-panel-title\">测量</div>\r\n        <div id=\"measureClose\" class=\"docking-panel-close-measure\">x</div>\r\n        <div id=\"measureUnfold\" class=\"docking-panel-enlarge-measure\"><img src=\"img/unfold.png\"></div>\r\n        <div id=\"measureSettingArea\" class=\"measure-setting-area\">\r\n            <div class=\"measure-child-btn\" id=\"measurePoint\">\r\n                <div><img src=\"img/点到点.png\"></div>\r\n                <div class=\"measure-child-btn-text\"><span>点点</span></div>\r\n            </div>\r\n            <div class=\"measure-child-btn\" id=\"measurePointToPlane\">\r\n                <div><img src=\"img/点到面.png\"></div>\r\n                <div class=\"measure-child-btn-text\"><span>点面</span></div>\r\n            </div>\r\n             <div class=\"measure-child-btn\" id=\"measurePointToLine\">\r\n                <div><img src=\"img/点到线.png\"></div>\r\n                <div class=\"measure-child-btn-text\"><span>点线</span></div>\r\n            </div>\r\n            <div class=\"measure-child-btn\" id=\"measureElevation\">\r\n                <div><img src=\"img/标高.png\"></div>\r\n                <div class=\"measure-child-btn-text\"><span>标高</span></div>\r\n            </div>\r\n            <div class=\"measure-child-btn\" id=\"cancelMeasure\">\r\n                <div><img src=\"img/delect.png\"></div>\r\n                <div class=\"measure-child-btn-text\"><span>删除</span></div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    `);\r\n\r\n    $(\"#measureSetting img\").each(function() {\r\n        $(this).attr('src', Web3D.BasePath + $(this).attr('src').slice($(this).attr('src').indexOf('img/')));\r\n    });\r\n\r\n    dimensionBusiness = new DimensionBusiness(viewer);\r\n    //标高对象\r\n    elevation = new ElevationBusiness()\r\n    //展开测量面板\r\n    $(\"#measureUnfold\").click(function(e) {\r\n        e.stopPropagation();\r\n        $(\"#measureSettingArea\").show();\r\n        $(\"#measureUnfold\").hide();\r\n        $(\"#measureClose\").show();\r\n        $(\"#mobileMeasureHandle\").hide();\r\n    });\r\n\r\n    //关掉测量面板\r\n    $(\"#measureClose\").click(function(e) {\r\n        e.stopPropagation();\r\n        $(\"#mobileMeasureHandle\").hide();\r\n        $(\"#measure-btn\").removeClass(\"bf-checked\");\r\n        $(\"#measureSetting\").hide();\r\n\r\n        $(\".measure-child-btn\").css('background', 'none');\r\n        dimensionBusiness.cancelOperation();\r\n    });\r\n\r\n    //删除按钮\r\n    $(\"#cancelMeasure\").click(function(e) {\r\n        e.stopPropagation();\r\n        $(\"#mobileMeasureHandle\").hide();\r\n        $(\".measure-child-btn\").css('background', 'none');\r\n\r\n        dimensionBusiness.hideEscTitle();\r\n        dimensionBusiness.cancelOperation();\r\n\r\n    })\r\n\r\n    //点到点测量\r\n    $(\"#measurePoint\").click(function(e) {\r\n        e.stopPropagation();\r\n        if ('ontouchstart' in document.documentElement) {\r\n            $(\"#mobileMeasureHandle\").show();\r\n            $(\"#mobileMeasureHandle\").css({ \"left\": \"0.5rem\", \"top\": \"1.2rem\" });\r\n            $(\"#measureUnfold\").show();\r\n            $(\"#measureClose\").hide();\r\n            $(\"#measureSettingArea\").hide();\r\n        }\r\n        $(\"#container\").css(\"cursor\", \"crosshair\");\r\n        $(\".measure-child-btn\").css('background', 'none');\r\n        $(\"#measurePoint\").css('background', 'rgba(34, 34, 34, 1)');\r\n\r\n        let obj = {\r\n            type: \"\"\r\n        };\r\n        dimensionBusiness.cancelOperation();\r\n        dimensionBusiness.clearBefore(obj);\r\n        dimensionBusiness.drawPointToPoint();\r\n\r\n    });\r\n\r\n    //点面距离\r\n    $(\"#measurePointToPlane\").click(function(e) {\r\n        e.stopPropagation();\r\n        if ('ontouchstart' in document.documentElement) {\r\n            $(\"#mobileMeasureHandle\").show();\r\n            $(\"#mobileMeasureHandle\").css({ \"left\": \"0.5rem\", \"top\": \"1.2rem\" });\r\n            $(\"#measureUnfold\").show();\r\n            $(\"#measureClose\").hide();\r\n            $(\"#measureSettingArea\").hide();\r\n        }\r\n        $(\"#container\").css(\"cursor\", \"crosshair\");\r\n        $(\".measure-child-btn\").css('background', 'none');\r\n        $(\"#measurePointToPlane\").css('background', 'rgba(34, 34, 34, 1)');\r\n\r\n        let obj = {\r\n            type: \"\"\r\n        };\r\n        dimensionBusiness.cancelOperation();\r\n        dimensionBusiness.clearBefore(obj)\r\n        dimensionBusiness.drawPointToFace()\r\n    })\r\n\r\n    //点线距离\r\n    $(\"#measurePointToLine\").click(function(e) {\r\n        e.stopPropagation();\r\n        if ('ontouchstart' in document.documentElement) {\r\n            $(\"#mobileMeasureHandle\").show();\r\n            $(\"#mobileMeasureHandle\").css({ \"left\": \"0.5rem\", \"top\": \"1.2rem\" });\r\n            $(\"#measureUnfold\").show();\r\n            $(\"#measureClose\").hide();\r\n            $(\"#measureSettingArea\").hide();\r\n        }\r\n        $(\"#container\").css(\"cursor\", \"crosshair\");\r\n        $(\".measure-child-btn\").css('background', 'none');\r\n        $(\"#measurePointToLine\").css('background', 'rgba(34, 34, 34, 1)');\r\n\r\n        // 点线测距\r\n        let obj = {\r\n            type: \"\"\r\n        };\r\n        dimensionBusiness.cancelOperation();\r\n        dimensionBusiness.clearBefore(obj);\r\n        dimensionBusiness.drawPointToLine();\r\n    })\r\n\r\n    //标高\r\n    $(\"#measureElevation\").click(function(e) {\r\n        e.stopPropagation();\r\n        $(\"#mobileMeasureHandle\").hide();\r\n        $(\".measure-child-btn\").css('background', 'none');\r\n        $(\"#measureElevation\").css('background', 'rgba(34, 34, 34, 1)');\r\n        if ('ontouchstart' in document.documentElement) {\r\n            $(\"#measureUnfold\").show();\r\n            $(\"#measureClose\").hide();\r\n            $(\"#measureSettingArea\").hide();\r\n        }\r\n\r\n        dimensionBusiness.hideEscTitle()\r\n        dimensionBusiness.cancelOperation();\r\n        //标高\r\n        elevation.getElevation(viewer)\r\n    })\r\n}\r\n\r\nvar dim_cmd = {\r\n    init: init,\r\n    id: \"measure-btn\",\r\n    title: \"测量\",\r\n    ico: \"img/测量.png\",\r\n    class: \"tool-btn\",\r\n    checkable: true,\r\n    act: function(e, checked) {\r\n        if (checked) {\r\n            $(\"#measureSetting\").show();\r\n            $(\"#measureUnfold\").hide();\r\n            $(\"#measureClose\").show();\r\n            $(\"#measureSettingArea\").show();\r\n        } else {\r\n            $(\"#measureSetting\").hide();\r\n            $(\"#mobileMeasureHandle\").hide();\r\n            $(\"#measureUnfold\").hide();\r\n            $(\"#measureClose\").show();\r\n            $(\".measure-child-btn\").css('background', 'none');\r\n            dimensionBusiness.cancelOperation();\r\n        }\r\n    },\r\n};\r\n\r\nexport { dim_cmd };","import { VisibilityController } from \"../common/VisibilityController\";\r\n\r\nvar cmds = {\r\n    init(viewer) {\r\n        if (!viewer.Selection) return false;\r\n        this._vc = new VisibilityController(viewer, 0.5);\r\n        this._viewer = viewer;\r\n        this._selectSet = viewer.Selection.Current;\r\n        return true;\r\n    },\r\n    _hide(reverse) {\r\n        if (reverse) this._vc.HidenSet.clear();\r\n        this._vc.HidenSet.add(...this._selectSet);\r\n        if (reverse) this._vc.reverse_hiden();\r\n        this._viewer.redraw();\r\n    },\r\n    _transp(reverse) {\r\n        if (reverse) this._vc.TransparentSet.clear();\r\n        this._vc.TransparentSet.add(...this._selectSet);\r\n        if (reverse) this._vc.reverse_transparent();\r\n        this._viewer.redraw();\r\n    },\r\n    _reset(reverse) {\r\n        this._vc.reset();\r\n        this._viewer.redraw();\r\n    },\r\n    _sel_sth() {\r\n        return this._selectSet.size > 0;\r\n    },\r\n    commands: [\r\n        {\r\n            id: \"dc_hide_sel_cmd\",\r\n            title: \"隐藏\",\r\n            ico: \"\",\r\n            class: \"tool-btn\",\r\n            act: () => {\r\n                cmds._hide();\r\n            },\r\n            get available() {\r\n                return cmds._sel_sth();\r\n            }\r\n        },\r\n        {\r\n            id: \"dc_hide_others_cmd\",\r\n            title: \"其他隐藏\",\r\n            ico: \"\",\r\n            class: \"tool-btn\",\r\n            act: () => {\r\n                cmds._hide(true);\r\n            },\r\n            get available() {\r\n                return cmds._sel_sth();\r\n            }\r\n        },\r\n        {\r\n            id: \"dc_transp_cmd\",\r\n            title: \"透明\",\r\n            ico: \"\",\r\n            class: \"tool-btn\",\r\n            act: () => {\r\n                cmds._transp();\r\n            },\r\n            get available() {\r\n                return cmds._sel_sth();\r\n            }\r\n        },\r\n        {\r\n            id: \"dc_transp_others_cmd\",\r\n            title: \"其他透明\",\r\n            ico: \"\",\r\n            class: \"tool-btn\",\r\n            act: () => {\r\n                cmds._transp(true);\r\n            },\r\n            get available() {\r\n                return cmds._sel_sth();\r\n            }\r\n        },\r\n        {\r\n            id: \"dc_reset_cmd\",\r\n            title: \"恢复显示\",\r\n            ico: \"\",\r\n            class: \"tool-btn\",\r\n            act: () => {\r\n                cmds._reset();\r\n            },\r\n            get available() {\r\n                return cmds._vc.HidenSet.size > 0 || cmds._vc.TransparentSet.size > 0;\r\n            }\r\n        },\r\n    ]\r\n};\r\n\r\nexport { cmds as display_control_cmds };\r\n","import * as THREE from \"three\";\r\nimport { CreateLable } from \"../../lable/CreateLable\";\r\nclass Elevation {\r\n    constructor(viewer) {\r\n        this.viewer = viewer\r\n    }\r\n\r\n    getHeight(viewer) {\r\n        let points = []\r\n        let point = new THREE.Vector3()\r\n        if (!!viewer.Selection)\r\n            viewer.Selection.enable(false)\r\n\r\n        $(document).click(function (event) {\r\n            let clientPos = {\r\n                x: event.originalEvent.clientX,\r\n                y: event.originalEvent.clientY,\r\n            }\r\n\r\n            if (typeof (viewer.pick(clientPos)) == \"undefined\") {\r\n                return\r\n            } else {\r\n                point = viewer.pick(clientPos).point\r\n            }\r\n            points.push(point)\r\n            points.forEach(item => {\r\n                let pos = item\r\n                let table = new CreateLable(viewer)\r\n                let num = pos.z\r\n                num = num / 3.28084\r\n                num = num.toFixed(3)\r\n\r\n                let triangle = table.create2DObjectSvg(pos, num)\r\n                viewer.DecorationManager.addDecoration(triangle, 0)\r\n\r\n                viewer.redraw('start')\r\n            })\r\n            points = []\r\n        })\r\n    }\r\n}\r\nexport { Elevation }\r\n","import { ClipSlider } from \"../elements/clipSlider\";\r\n\r\nimport { light_adjust_cmd } from \"./light_adjust\";\r\nimport { dim_cmd } from \"./dimension/dimension\";\r\n\r\n//初始化下方标签\r\nfunction init_commands(viewer) {\r\n    //if (!!Web3D.DefaultTools) return;\r\n    light_adjust_cmd.init(viewer);\r\n    dim_cmd.init(viewer)\r\n    let dt = {\r\n        home: {\r\n            id: \"home-btn\",\r\n            title: \"home\",\r\n            ico: \"img/home.png\",\r\n            class: \"tool-btn\",\r\n            act: function () {\r\n                viewer.Controller.reset();\r\n                viewer.fitToView();\r\n            }\r\n        },\r\n        dim: dim_cmd,\r\n        clip: {\r\n            id: \"sliced-btn\",\r\n            title: \"剖切\",\r\n            ico: \"img/sliced.png\",\r\n            class: \"tool-btn\",\r\n            checkable: true,\r\n            act: function (e, checked) {\r\n                viewer.ClipBox.interaction_enabled = true;\r\n                viewer.ClipBox.active = checked;\r\n                if (checked) {\r\n                    viewer.ClipBox.show();\r\n                } else {\r\n                    viewer.ClipBox.hide();\r\n                }\r\n            }\r\n        },\r\n        clipMobile: {\r\n            id: \"clipMobile-btns\",\r\n            title: \"剖切\",\r\n            ico: \"img/sliced.png\",\r\n            class: \"tool-btn\",\r\n            _ui: new ClipSlider(viewer),\r\n            on_popup(shown) {\r\n                this._ui.show(shown);\r\n            },\r\n            keep_checked: true,\r\n            children_check_group: true,\r\n            children: [{\r\n                id: \"clip-btn-x\",\r\n                title: \"X向剖切\",\r\n                text: \"X\",\r\n                class: \"tool-btn bf-checked\",\r\n                act: function (e, checked) {\r\n                    dt.clipMobile._ui.changeClipDir(this.id, checked);\r\n                }\r\n            },\r\n            {\r\n                id: \"clip-btn-y\",\r\n                title: \"Y向剖切\",\r\n                text: \"Y\",\r\n                class: \"tool-btn\",\r\n                act: function (e, checked) {\r\n                    dt.clipMobile._ui.changeClipDir(this.id, checked);\r\n                }\r\n            },\r\n            {\r\n                id: \"clip-btn-z\",\r\n                title: \"Z向剖切\",\r\n                text: \"Z\",\r\n                class: \"tool-btn\",\r\n                act: function (e, checked) {\r\n                    dt.clipMobile._ui.changeClipDir(this.id, checked);\r\n                }\r\n            }\r\n            ],\r\n        },\r\n        fitToView: {\r\n            id: \"fitToView-btn\",\r\n            title: \"充满\",\r\n            ico: \"img/fitToView.png\",\r\n            class: \"tool-btn\",\r\n            act: function () {\r\n                viewer.fitToView();\r\n            }\r\n        },\r\n        cam: {\r\n            id: \"cam-btns\",\r\n            title: \"视角\",\r\n            ico: \"img/front.png\",\r\n            class: \"tool-btn\",\r\n            children: [{\r\n                id: \"front-btn\",\r\n                title: \"前\",\r\n                ico: \"img/front.png\",\r\n                class: \"tool-btn front-btn\",\r\n                act() { viewer.Controller.applyBasicView(this.title); }\r\n            },\r\n            {\r\n                id: \"back-btn\",\r\n                title: \"后\",\r\n                ico: \"img/back.png\",\r\n                class: \"tool-btn back-btn\",\r\n                act() { viewer.Controller.applyBasicView(this.title); }\r\n            },\r\n            {\r\n                id: \"left-btn\",\r\n                title: \"左\",\r\n                ico: \"img/left.png\",\r\n                class: \"tool-btn left-btn\",\r\n                act() { viewer.Controller.applyBasicView(this.title); }\r\n            },\r\n            {\r\n                id: \"right-btn\",\r\n                title: \"右\",\r\n                ico: \"img/right.png\",\r\n                class: \"tool-btn right-btn\",\r\n                act() { viewer.Controller.applyBasicView(this.title); }\r\n            },\r\n            {\r\n                id: \"top-btn\",\r\n                title: \"上\",\r\n                ico: \"img/top.png\",\r\n                class: \"tool-btn top-btn\",\r\n                act() { viewer.Controller.applyBasicView(this.title); }\r\n            },\r\n            {\r\n                id: \"bottom-btn\",\r\n                title: \"下\",\r\n                ico: \"img/bottom.png\",\r\n                class: \"tool-btn bottom-btn\",\r\n                act() { viewer.Controller.applyBasicView(this.title); }\r\n            }\r\n            ]\r\n        },\r\n        ground: {\r\n            id: \"ground-btns\",\r\n            title: \"天地\",\r\n            ico: \"img/ground.png\",\r\n            class: \"tool-btn\",\r\n            children: [{\r\n                id: \"ground-btn\",\r\n                title: \"地面\",\r\n                ico: \"img/ground.png\",\r\n                class: \"tool-btn\",\r\n                checkable: true,\r\n                act: function (e, checked) {\r\n                    viewer._modelManager.builtin.ground.visible = checked;\r\n                    viewer.redraw(\"ground\");\r\n                }\r\n            },\r\n            {\r\n                id: \"sky-btn\",\r\n                title: \"天空\",\r\n                ico: \"img/sky.png\",\r\n                class: \"tool-btn bf-checked\",\r\n                checkable: true,\r\n                act: function (e, checked) {\r\n                    viewer._modelManager.builtin.sky.visible = checked;\r\n                    viewer.redraw(\"sky\");\r\n                }\r\n            }\r\n\r\n            ]\r\n        },\r\n        lights: light_adjust_cmd,\r\n    };\r\n    Web3D.DefaultTools = dt;\r\n}\r\n\r\nexport { init_commands };\r\n","\r\nimport jscolor from '@eastdesire/jscolor';\r\nimport '../elements/rangeSlide';\r\njscolor.trigger('change');\r\n\r\nfunction init(viewer) {\r\n    $(\"body\").append(`\r\n    <div id=\"light-setting\" class=\"docking-panel light-setting\">\r\n        <div class=\"docking-panel-title\">光源</div>\r\n        <div class=\"docking-panel-close\">x</div>\r\n        <div class=\"docking-panel-scroll\">\r\n            <div class=\"light-box light-ambient\">\r\n                <div class=\"light-title\">环境光</div>\r\n                <div class=\"light-attrs light-ambient-color\">\r\n                    <div class=\"light-attrs-name\" >颜色:</div>\r\n                    <div class=\"light-attrs-vlaue\">\r\n                        <input aria-label=\"ambientColor\" class=\"light-attrs-color\" data-index=0 value=\"#ffffff\" data-jscolor=\"{closeButton:true, closeText:'确定'}\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"light-attrs light-intensity\">\r\n                    <div class=\"light-attrs-name\">强度:</div>\r\n                    <div class=\"light-attrs-vlaue\">\r\n                        <range-slider id=\"ambient-intensity\" min=\"0\" max=\"3\" step=\"0.1\" value=\"0\" aria-label=\"rangeSlider1\"></range-slider>\r\n                    </div>\r\n                </div></div>\r\n            <div class=\"light-box light-direction\">\r\n                <div class=\"light-title\">平行光</div>\r\n                <div class=\"light-attrs light-direction-color\">\r\n                    <div class=\"light-attrs-name\">颜色:</div>\r\n                    <div class=\"light-attrs-vlaue\">\r\n                        <input aria-label=\"directionColor\" class=\"light-attrs-color\" data-index=2 value=\"#ffffff\" data-jscolor=\"{closeButton:true, closeText:'确定'}\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"light-attrs light-intensity\">\r\n                    <div class=\"light-attrs-name\">强度:</div>\r\n                    <div class=\"light-attrs-vlaue\">\r\n                        <range-slider id=\"direction-intensity\" min=\"0\" max=\"3\" step=\"0.1\" value=\"0\" aria-label=\"rangeSlider2\"></range-slider>\r\n                    </div>\r\n                </div>\r\n                <div class=\"light-attrs light-direction-position\">\r\n                    <div class=\"light-attrs-name\">角度:</div>\r\n                    <div class=\"light-attrs-vlaue\">\r\n                        <range-slider id=\"light-direction-angle\" min=\"-180\" max=\"180\" step=\"1\" value=\"0\" aria-label=\"rangeSlider3\"></range-slider>\r\n                    </div>\r\n                </div>\r\n                <div class=\"light-attrs light-direction-position\">\r\n                    <div class=\"light-attrs-name\">高度:</div>\r\n                    <div class=\"light-attrs-vlaue\">\r\n                        <range-slider id=\"light-direction-high\" min=\"0\" max=\"10000\" step=\"10\" value=\"0\" aria-label=\"rangeSlider5\"></range-slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"light-box light-hemisphere\">\r\n                <div class=\"light-title\">半球光</div>\r\n                <div class=\"light-attrs light-hemisphere-sky\">\r\n                    <div class=\"light-attrs-name\">天空发出光线颜色:</div>\r\n                    <div class=\"light-attrs-vlaue\">\r\n                        <input aria-label=\"skyColor\" class=\"light-attrs-color\" data-index=1 value=\"#ffffff\" data-jscolor=\"{closeButton:true, closeText:'确定'}\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"light-attrs light-hemisphere-ground\">\r\n                    <div class=\"light-attrs-name\">地面发出光线颜色:</div>\r\n                    <div class=\"light-attrs-vlaue\">\r\n                        <input aria-label=\"groundColor\" class=\"light-attrs-color\" data-index=1 data-ground=true value=\"#ffffff\" data-jscolor=\"{closeButton:true, closeText:'确定'}\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"light-attrs light-intensity\">\r\n                    <div class=\"light-attrs-name\">强度:</div>\r\n                    <div class=\"light-attrs-vlaue\">\r\n                        <range-slider id=\"hemisphere-intensity\" min=\"0\" max=\"3\" step=\"0.1\" value=\"0\" aria-label=\"rangeSlider6\"></range-slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    `);\r\n    $(\".docking-panel-close\").click(function () {\r\n        $(\"#settingLights-btns\").removeClass(\"bf-checked\");\r\n        $(\".light-setting\").hide();\r\n    });\r\n    $(\".light-attrs-color\").change(e => {\r\n        var index = $(e.target).data(\"index\");\r\n        var colorname = $(e.target).data(\"ground\");\r\n        colorname = colorname ? \"groundColor\" : \"color\";\r\n        viewer.LightManager[index][colorname] = new THREE.Color(e.target.dataset.currentColor);\r\n        viewer.redraw(\"ground/sky color\");\r\n    });\r\n\r\n    let cbs = {\r\n        \"ambient-intensity\": v => viewer.LightManager.Ambient.intensity = v,\r\n        \"direction-intensity\": v => viewer.LightManager.Directional.intensity = v,\r\n        \"hemisphere-intensity\": v => viewer.LightManager.Hemisphere.intensity = v,\r\n        \"light-direction-angle\": v => viewer.LightManager.SunLightAngle = v,\r\n        \"light-direction-high\": v => viewer.LightManager.SunLightDirZ = v\r\n    };\r\n    const defaultValues = {\r\n        \"ambient-intensity\": viewer.LightManager.Ambient.intensity,\r\n        \"direction-intensity\": viewer.LightManager.Directional.intensity,\r\n        \"hemisphere-intensity\": viewer.LightManager.Hemisphere.intensity,\r\n        \"light-direction-angle\": viewer.LightManager.SunLightAngle,\r\n        \"light-direction-high\": viewer.LightManager.SunLightDirZ\r\n    };\r\n    const elements = document.querySelectorAll(['range-slider']);\r\n    elements.forEach(element => {\r\n        element.insertAdjacentHTML('afterend', `<output>${element.value}</output>`);\r\n        element.addEventListener('change', e => {\r\n            const input = e.target;\r\n            const output = input.nextElementSibling;\r\n            if (output) {\r\n                output.textContent = input.value;\r\n                cbs[input.id](parseFloat(input.value));\r\n                viewer.redraw(\"light\");\r\n            }\r\n        });\r\n        element.value = defaultValues[element.id];\r\n    });\r\n}\r\n\r\nvar light_adjust_cmd = {\r\n    init: init,\r\n    id: \"settingLights-btns\",\r\n    title: \"光源\",\r\n    ico: \"img/light.png\",\r\n    class: \"tool-btn\",\r\n    checkable: true,\r\n    act: function (e, checked) {\r\n        if (checked) {\r\n            $(\"#light-setting\").show();\r\n        } else {\r\n            $(\"#light-setting\").hide();\r\n        }\r\n    },\r\n};\r\n\r\nexport { light_adjust_cmd };\r\n","import * as THREE from \"three\";\r\nimport { ElementGroup } from \"core/model/element_group\";\r\n\r\nclass VisibilityController {\r\n    constructor(viewer, opacity = 0.5) {\r\n        this._viewer = viewer;\r\n        // 相应选择集事件，以便进行自动状态转换\r\n        if (viewer.Selection) {\r\n            viewer.Selection.addEventListener('SELECTION_CHANGED', e => {\r\n                if (!!e.unselect_objs) {\r\n                    e.unselect_objs.forEach(o => {\r\n                        switch (o.VC_status) {\r\n                            case \"hiden\":\r\n                                this._hiden_set.add(o);\r\n                                break;\r\n                            case \"transparent\":\r\n                                this._trans_set.add(o);\r\n                                break;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        // 三个状态优先级：可见性 > 透明 > 普通\r\n        this._hiden_set = new ElementGroup();\r\n        this._hiden_set.Visible = false;\r\n        this._trans_set = new ElementGroup();\r\n        this._trans_set.Opacity = opacity;\r\n        this._trans_set.ShowTransparent(true);\r\n\r\n        // this._hiden_set.addEventListener(\"OSET_ADDED\", e => {\r\n        //     e.object.VC_status = \"hiden\";\r\n        // });\r\n        this._trans_set.addEventListener(\"OSET_ADDED\", e => {\r\n            e.object.VC_status = \"transparent\";\r\n        });\r\n\r\n    }\r\n    get HidenSet() { return this._hiden_set; }\r\n    get TransparentSet() { return this._trans_set; }\r\n    get Transparency() { return this._trans_set.Transparency; }\r\n    set Transparency(v) { this._trans_set.Transparency = v; }\r\n    reverse_hiden() {\r\n        var all = new ElementGroup(false, ...this._viewer.ModelManager.segments_group.children);\r\n        all.delete(...this._hiden_set);\r\n        this.reset_hiden();\r\n        this._hiden_set.add(...all);\r\n        all.clear();\r\n    }\r\n    reverse_transparent() {\r\n        var all = new ElementGroup(false, ...this._viewer.ModelManager.segments_group.children);\r\n        all.delete(...this._hiden_set);\r\n        all.delete(...this._trans_set);\r\n        this.reset_transparent();\r\n        this._trans_set.add(...all);\r\n        all.clear();\r\n    }\r\n    reset() {\r\n        this.reset_hiden();\r\n        this.reset_transparent();\r\n    }\r\n    reset_hiden() {\r\n        for (var o of this._hiden_set) {\r\n            delete o.VC_status;\r\n        }\r\n        this._hiden_set.clear();\r\n    }\r\n    reset_transparent() {\r\n        for (var o of this._trans_set) {\r\n            delete o.VC_status;\r\n        }\r\n        this._trans_set.clear();\r\n    }\r\n}\r\n\r\nexport { VisibilityController };\r\n","import { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"\r\n\r\nvar BASIC_VIEW = {\r\n    cam_rel_pos: [\r\n        { x: 0, y: 1, z: 0 },\r\n        { x: 0, y: -1, z: 0 },\r\n        { x: -1, y: 0, z: 0 },\r\n        { x: 1, y: 0, z: 0 },\r\n        { x: 0, y: 0, z: 1 },\r\n        { x: 0, y: 0, z: -1 },\r\n        { x: 1, y: -1, z: 1 }\r\n    ],\r\n    name_indices: {\r\n        NORTH: 0,\r\n        SOUTH: 1,\r\n        WEST: 2,\r\n        EAST: 3,\r\n        TOP: 4,\r\n        BOTTOM: 5,\r\n        HOME: 6,\r\n        前: 1,\r\n        后: 0,\r\n        左: 2,\r\n        右: 3,\r\n        上: 4,\r\n        下: 5,\r\n    }\r\n};\r\n\r\n// 采用Threejs官方提供的浏览（相机）控制\r\nclass BuildingController extends OrbitControls {\r\n    constructor(viewer) {\r\n        super(viewer.camera, viewer.Renderer.domElement);\r\n        this.viewer = viewer;\r\n        this.start = false;\r\n        this.inOperation = false;\r\n\r\n        var timeoutID;\r\n        this._onstart = () => {\r\n            this.start = true;\r\n            this.inOperation = false;\r\n            clearTimeout(timeoutID);\r\n        };\r\n        this._onchange = () => {\r\n            if (this.start)\r\n                this.inOperation = true;\r\n            this.viewer.redraw(\"Controller\");\r\n        };\r\n        this._onend = () => {\r\n            this.start = false;\r\n            timeoutID = setTimeout(() => this.inOperation = false, 100);\r\n        };\r\n\r\n        this.addEventListener('start', this._onstart);\r\n        this.addEventListener('change', this._onchange);\r\n        this.addEventListener('end', this._onend);\r\n\r\n        this.screenSpacePanning = true;\r\n        //\r\n        this.maxDistance = 10000;\r\n        //this.enableDamping = true;\r\n    }\r\n    detach() {\r\n        this.removeEventListener('start', this._onstart);\r\n        this.removeEventListener('change', this._onchange);\r\n        this.removeEventListener('end', this._onend);\r\n        this.viewer = null;\r\n        this.dispose();\r\n    }\r\n    applyBasicView(bv) {\r\n        if(!this.viewer) {\r\n            throw \"Controller::applyBasicView: Controller is discarded!\";\r\n        }\r\n        var position;\r\n        if (typeof (bv) == 'number' && bv >= 0 && bv < 6) {\r\n            position = BASIC_VIEW.cam_rel_pos[bv];\r\n        } else if (typeof (bv) == 'string' && bv in BASIC_VIEW.name_indices) {\r\n            position = BASIC_VIEW.cam_rel_pos[BASIC_VIEW.name_indices[bv]];\r\n        } else {\r\n            throw \"Controller::applyBasicView: Wrong parameter!\";\r\n        }\r\n        position = new THREE.Vector3(position.x, position.y, position.z);\r\n\r\n        var b = this.viewer.ModelManager.BoundingBox;\r\n        // 调整视角\r\n        var arg = {};\r\n        arg.target = new THREE.Vector3();\r\n        b.getCenter(arg.target);\r\n        arg.pos = arg.target.clone();\r\n        arg.pos.add(position);\r\n        this.viewer.look(arg);\r\n        this.viewer.fitToView();\r\n        return true;\r\n    }\r\n}\r\n\r\nexport { BuildingController };\r\n","import * as THREE from \"three\";\r\n\r\nimport { Events } from \"core/Events\";\r\nimport { ElementGroup } from \"core/model/element_group\"\r\n\r\nvar FiltersProperty = Symbol(\"filter_property\");\r\nvar FiltersData = Symbol(\"filter_funcs\");\r\nvar FiltersObjects = Symbol(\"filter_objs\");\r\n\r\nclass SelectionSet extends THREE.EventDispatcher {\r\n    constructor(viewer, HighlightColor = 0x880000, opacity = 0.8) {\r\n        super();\r\n        this.viewer = viewer;\r\n        // 选择集逻辑\r\n        // 处理选择集数据\r\n        this._selectionSet = new ElementGroup();\r\n        this._selectionSet.DyeColor = HighlightColor;\r\n        this._selectionSet.DyeOpacity = opacity;\r\n        this._selectionSet.Dye(true);\r\n    }\r\n\r\n    enable(v = true) {\r\n        if (!this.eventHandler) {\r\n            var scope = this;\r\n            this.eventHandler = {\r\n                onPickOperation: (event) => {\r\n                    // 确定拾取位置\r\n                    var pos = {};\r\n                    switch (event.type) {\r\n                        case 'touchend':\r\n                            if (event.changedTouches.length > 1)\r\n                                return;\r\n                            pos.x = event.changedTouches[0].clientX;\r\n                            pos.y = event.changedTouches[0].clientY;\r\n                            break;\r\n                        case 'click':\r\n                            pos.x = event.offsetX;\r\n                            pos.y = event.offsetY;\r\n                            break;\r\n                        default:\r\n                            return;\r\n                    }\r\n                    event.preventDefault();\r\n                    if (scope.viewer.Controller && scope.viewer.Controller.inOperation ||\r\n                        scope.viewer.ClipBox && scope.viewer.ClipBox.clipping)\r\n                        return;\r\n                    // 在交互点击位置拾取要处理的对象\r\n                    var toSelectObj = null, pickPos;\r\n                    scope.viewer.pick(pos, (pickinfo) => {\r\n                        for (var f of scope.Filters) {\r\n                            if (!f(pickinfo.object))\r\n                                return false;\r\n                        }\r\n                        toSelectObj = pickinfo.object;\r\n                        pickPos = pickinfo.point;\r\n                    }, this.Filters.ObjectsToSelect);\r\n                    var refresh = false;\r\n                    var unsel_objs = [];\r\n                    if (!event.shiftKey && scope._selectionSet.size > 0) {\r\n                        unsel_objs.push(...([...scope._selectionSet].filter(o => o != toSelectObj)));\r\n                        refresh = scope.unselect_except(toSelectObj, true);\r\n                    }\r\n                    if (!!toSelectObj) {\r\n                        if (!scope._selectionSet.has(toSelectObj)) {\r\n                            if (!event.shiftKey) {\r\n                                unsel_objs.push(...scope._selectionSet);\r\n                            }\r\n                            // 选中\r\n                            refresh = scope.select(toSelectObj, !!event.shiftKey);\r\n                        } else if (!!event.shiftKey) {\r\n                            // 反选\r\n                            unsel_objs.push(toSelectObj);\r\n                            refresh = scope.unselect_one(toSelectObj);\r\n                            toSelectObj = null;\r\n                        }\r\n                    }\r\n                    if (refresh) {\r\n                        // event\r\n                        if (unsel_objs.length < 1) unsel_objs = null;\r\n                        scope.dispatchEvent(Events.SELECTION_CHANGED(toSelectObj, unsel_objs, pickPos, event));\r\n                        //scope.viewer._effects.outline.selectedObjects = scope._selectionSet;\r\n                        scope.viewer.redraw(\"SELECTION_CHANGED\");\r\n                    }\r\n                },\r\n                onEscOperation: (event) => {\r\n                    if (event.keyCode == 27) {\r\n                        scope.unselect_except(null, true);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        var canvas = this.viewer.Renderer.domElement;\r\n        if (v) {\r\n            canvas.addEventListener('touchend', this.eventHandler.onPickOperation, false);\r\n            canvas.addEventListener('click', this.eventHandler.onPickOperation, false);\r\n            // TODO: canvas不响应键盘事件？\r\n            document.addEventListener('keydown', this.eventHandler.onEscOperation, false);\r\n        } else {\r\n            canvas.removeEventListener('touchend', this.eventHandler.onPickOperation);\r\n            canvas.removeEventListener('click', this.eventHandler.onPickOperation);\r\n            // TODO: canvas不响应键盘事件？\r\n            document.removeEventListener('keydown', this.eventHandler.onEscOperation);\r\n            this.unselect_except(null, true);\r\n        }\r\n    }\r\n\r\n    select(...objs) {\r\n        if (objs.length < 1) return false;\r\n        var append = false;\r\n        if (objs.length > 1) {\r\n            append = objs[objs.length - 1];\r\n            if (typeof (append) != \"boolean\")\r\n                append = false;\r\n            else\r\n                objs.pop();\r\n        }\r\n        if (!append) {\r\n            this._selectionSet.clear();\r\n        }\r\n        if (typeof (objs[0]) == \"string\") {\r\n            // 将所有参数作为uuid对待\r\n            objs = objs.map(uuid =>\r\n                this.viewer._modelManager.\r\n                    segments_group.children.find(o => o.uuid == uuid));\r\n        }\r\n        var ret = false;\r\n        for (var i = 0; i < objs.length; i++) {\r\n            var obj = objs[i];\r\n            if (!obj) continue;\r\n            if (this._selectionSet.has(obj)) continue;\r\n            this._selectionSet.add(obj);\r\n            ret = true;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    unselect_except(objsToKeep, force_redraw) {\r\n        if (!objsToKeep) objsToKeep = [];\r\n        if (!Array.isArray(objsToKeep))\r\n            objsToKeep = [objsToKeep];\r\n        var refresh = false;\r\n        objsToKeep = objsToKeep.filter(o => this._selectionSet.has(o));\r\n        refresh = (objsToKeep.length != this._selectionSet.size);\r\n        if (refresh) {\r\n            this._selectionSet.clear();\r\n            objsToKeep.forEach(o => this._selectionSet.add(o));\r\n            if (!!force_redraw)\r\n                this.viewer.redraw(\"unselect_except\");\r\n        }\r\n        return refresh;\r\n    }\r\n\r\n    unselect_one(obj, force_redraw) {\r\n        if (!obj || !this._selectionSet.has(obj)) {\r\n            return false;\r\n        }\r\n        this._selectionSet.delete(obj);\r\n        if (!!force_redraw) {\r\n            this.viewer.redraw(\"unselect_one\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    get Current() { return this._selectionSet; }\r\n    get HighlightMaterial() { return this._selectionSet.HighlightMaterial; }\r\n\r\n    get Filters() {\r\n        if (!this[FiltersProperty]) {\r\n            function getParameterNames(fn) {\r\n                if (typeof fn !== 'function') return [];\r\n                var COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\r\n                var code = fn.toString().replace(COMMENTS, '');\r\n                var result = code.slice(code.indexOf('(') + 1, code.indexOf(')'))\r\n                    .match(/([^\\s,]+)/g);\r\n                return result === null\r\n                    ? []\r\n                    : result;\r\n            }\r\n            this[FiltersProperty] = {\r\n                [FiltersData]: new Set(),\r\n                [FiltersObjects]: null,\r\n                add(f) {\r\n                    if (!(f instanceof Function)) return false;\r\n                    if (getParameterNames(f).length != 1) return false;\r\n                    this[FiltersData].add(f);\r\n                    return true;\r\n                },\r\n                remove(f) {\r\n                    return this[FiltersData].delete(f);\r\n                },\r\n                *[Symbol.iterator]() { for (var f of this[FiltersData]) yield f; },\r\n                get ObjectsToSelect() {\r\n                    return this[FiltersObjects];\r\n                },\r\n                set ObjectsToSelect(v) {\r\n                    if (!v) {\r\n                        this[FiltersObjects] = null;\r\n                        return;\r\n                    }\r\n                    if (!Array.isArray(v) || v.length == 0) return;\r\n                    this[FiltersObjects] = v;\r\n                }\r\n            };\r\n        }\r\n        return this[FiltersProperty];\r\n    }\r\n}\r\n\r\nexport { SelectionSet };\r\n","\r\nclass ViewCube extends HTMLElement {\r\n    // class ViewCube extends EventTarget {\r\n    constructor() {\r\n        super();\r\n        var WrapDiv = document.createElement(\"div\");\r\n        WrapDiv.style.width = \"2em\";\r\n        WrapDiv.style.height = \"2em\";\r\n        WrapDiv.style.transformStyle = \"preserve-3d\";\r\n        // let shadow = this.attachShadow({ mode: 'open' });\r\n        // shadow.appendChild(this.WrapDiv);\r\n        this.appendChild(WrapDiv);\r\n        if (this.classList.length == 0) this.classList.add(\"cube\");\r\n        for (var name in this.FACES_TRANSFORM) {\r\n            WrapDiv.appendChild(this._createFace(name, this.classList));\r\n        }\r\n        this.appendChild(this._createHomeButton(this.classList));\r\n        this.classList.remove(this.classList);\r\n    }\r\n    rotateByCam(cam) {\r\n        if (!cam.isCamera) return false;\r\n        var dir = new THREE.Vector3();\r\n        cam.getWorldDirection(dir);\r\n        var up;\r\n        if (dir.x * dir.x < 0.0001 && dir.y * dir.y < 0.0001) {\r\n            var a = Math.PI / 2 + cam.rotation.toArray()[2];\r\n            if (dir.z > 0)\r\n                up = { x: Math.cos(a), y: Math.sin(a), z: 0 };\r\n            else\r\n                up = { x: Math.cos(-a), y: Math.sin(-a), z: 0 };\r\n        }\r\n        this.rotateByCamDir(dir, up);\r\n    }\r\n    rotateByCamDir(dir, up) {\r\n        if (!up) up = { x: 0, y: 0, z: 1 };\r\n        var ax = 0, az = 0;\r\n        var dr2 = dir.x * dir.x + dir.y * dir.y;\r\n        var ur2 = up.x * up.x + up.y * up.y;\r\n        if (dr2 > 0.0001) {\r\n            az = Math.acos(dir.x / Math.sqrt(dr2));\r\n            if (dir.y * dir.y > 0.0001) {\r\n                az *= dir.y / Math.abs(dir.y);\r\n            }\r\n            az += Math.PI / 2;\r\n            dr2 = dir.x * dir.x + dir.y * dir.y + dir.z * dir.z;\r\n            ax = Math.acos(-dir.z / Math.sqrt(dr2));\r\n        } else if (ur2 > 0.0001) {\r\n            az = -Math.acos(up.x / Math.sqrt(ur2));\r\n            if (up.y * up.y > 0.0001) {\r\n                az = az * up.y / Math.abs(up.y);\r\n            }\r\n            az += Math.PI / 2;\r\n            if (dir.z > 0) {\r\n                ax = Math.PI;\r\n                az -= Math.PI;\r\n            }\r\n        } else {\r\n            throw \"Error camera parameters!\";\r\n        }\r\n        var wrap = this.getElementsByTagName(\"div\")[0];\r\n        wrap.style.transform = `rotateX(${ax}rad) rotateZ(${az}rad)`;\r\n    }\r\n    _createFace(name, classes) {\r\n        var elDiv = document.createElement(\"div\");\r\n        var size = 2;\r\n        elDiv.style.position = \"absolute\";\r\n        elDiv.style.width = `${size}em`;\r\n        elDiv.style.height = `${size}em`;\r\n        elDiv.style.textAlign = \"center\";\r\n        elDiv.style.lineHeight = `${size}em`;\r\n        elDiv.innerText = name;\r\n        elDiv.style.transform = this.FACES_TRANSFORM[name];\r\n        for (var cls of classes)\r\n            elDiv.classList.add(cls);\r\n        elDiv.style.cursor = \"pointer\";\r\n        elDiv.addEventListener(\"click\", e => {\r\n            var evt = new CustomEvent(\"clickface\");\r\n            evt.face = name;\r\n            evt.button = e.button;\r\n            evt.ctrlKey = e.ctrlKey;\r\n            evt.shiftKey = e.shiftKey;\r\n            evt.altKey = e.altKey;\r\n            this.dispatchEvent(evt);\r\n        });\r\n        return elDiv;\r\n    }\r\n    _createHomeButton(classes) {\r\n        var elDiv = document.createElement(\"div\");\r\n        var size = 0.7;\r\n        elDiv.style.position = \"absolute\";\r\n        elDiv.style.top = `-${2 * size}em`;\r\n        elDiv.style.left = `-${1.4 * size}em`;\r\n        elDiv.style.width = `${size}em`;\r\n        elDiv.style.height = `${size}em`;\r\n        elDiv.style.textAlign = \"center\";\r\n        elDiv.style.lineHeight = `${size}em`;\r\n        elDiv.style.borderRadius = \"5px\";\r\n        var img = document.createElement(\"img\");\r\n        img.src = Web3D.BasePath + \"img/home.png\";\r\n        img.style.width = img.style.height = `${0.9 * size}em`;\r\n        img.style.display = \"inline-block\"\r\n        img.style.verticalAlign = \"top\";\r\n        img.style.filter = \"brightness(50%)\";\r\n        elDiv.appendChild(img);\r\n        for (var cls of classes)\r\n            elDiv.classList.add(cls);\r\n        elDiv.style.cursor = \"pointer\";\r\n        elDiv.addEventListener(\"click\", e => {\r\n            var evt = new CustomEvent(\"clickhome\");\r\n            evt.button = e.button;\r\n            evt.ctrlKey = e.ctrlKey;\r\n            evt.shiftKey = e.shiftKey;\r\n            evt.altKey = e.altKey;\r\n            this.dispatchEvent(evt);\r\n        });\r\n        return elDiv;\r\n    }\r\n}\r\n\r\nViewCube.prototype.FACES_TRANSFORM = {\r\n    \"上\": \"translateZ(1em) rotateZ(180deg)\",\r\n    \"下\": \"translateZ(-1em) rotateY(180deg)\",\r\n    \"左\": \"translateX(1em) rotateY(90deg) rotateZ(-90deg)\",\r\n    \"右\": \"translateX(-1em) rotateY(-90deg) rotateZ(90deg)\",\r\n    \"前\": \"translateY(-1em) rotateX(90deg) rotateZ(180deg)\",\r\n    \"后\": \"translateY(1em) rotateX(-90deg)\"\r\n};\r\n\r\nif (!customElements.get(\"web3d-view-cube\"))\r\n    customElements.define(\"web3d-view-cube\", ViewCube);\r\n\r\nexport { ViewCube };\r\n","import noUiSlider from 'nouislider';\r\nimport 'nouislider/dist/nouislider.css';\r\n\r\nclass ClipSlider {\r\n    constructor(viewer) {\r\n        this._viewer = viewer;\r\n        this._x = true;\r\n        this._y = false;\r\n        this._z = false;\r\n        var sliderContainer = $(\"<div>\");\r\n        sliderContainer.attr(\"id\", \"clipSlide\");\r\n        sliderContainer\r\n            .append($(\"<div>\").attr(\"id\", this.idX).addClass(\"xhandles\"))\r\n            .append($(\"<div>\").attr(\"id\", this.idY).addClass(\"yhandles\"))\r\n            .append($(\"<div>\").attr(\"id\", this.idZ).addClass(\"zhandles\"));\r\n        $(viewer.container).append(sliderContainer);\r\n    }\r\n\r\n    clear() { this._x = this._y = this._z = false; }\r\n    _getVisibility(dir) {\r\n        return $(\"#\" + this.id(dir)).is(\":visible\");\r\n    }\r\n    _setVisibility(dir, value) {\r\n        if (value) $(\"#\" + this.id(dir)).show().siblings().hide();\r\n        else $(\"#\" + this.id(dir)).hide();\r\n    }\r\n    get x() { return this._x; }\r\n    set x(v) {\r\n        this.clear();\r\n        this._x = v;\r\n        this._setVisibility(\"x\", v);\r\n    }\r\n    get y() { return this._y; }\r\n    set y(v) {\r\n        this.clear();\r\n        this._y = v;\r\n        this._setVisibility(\"y\", v);\r\n    }\r\n    get z() { return this._z; }\r\n    set z(v) {\r\n        this.clear();\r\n        this._z = v;\r\n        this._setVisibility(\"z\", v);\r\n    }\r\n    get any() {\r\n        return this.x || this.y || this.z;\r\n    }\r\n    id(dir) { return `clipSlide-${dir.toLowerCase()}handles`; }\r\n    get idX() { return this.id('x'); }\r\n    get idY() { return this.id('y'); }\r\n    get idZ() { return this.id('z'); }\r\n    get all_elems() {\r\n        return $(`#${this.idX},#${this.idY},#${this.idZ}`);\r\n    }\r\n    get all_active_elems() {\r\n        return $(`\\\r\n            ${this.x ? '#' + this.id('x') : ''}\\\r\n            ${this.y ? (this.x ? ',' : '') + '#' + this.id('y') : ''}\\\r\n            ${this.z ? (this.x || this.y ? ',' : '') + '#' + this.id('z') : ''}\\\r\n        `);\r\n    }\r\n\r\n    _createClipSlider(box, cur_box, _this) {\r\n        function create_comp(comp, rangemin, rangemax, startmin, startmax) {\r\n            var slider = document.getElementById(_this.id(comp));\r\n            noUiSlider.create(slider, {\r\n                start: [startmin / 3.28084, startmax / 3.28084],\r\n                connect: true,\r\n                direction: 'rtl',\r\n                orientation: 'vertical',\r\n                tooltips: [true, true],\r\n                range: {\r\n                    'min': [rangemin / 3.28084],\r\n                    'max': [rangemax / 3.28084]\r\n                }\r\n            });\r\n            slider.noUiSlider.on('update', function (values, handle) {\r\n                if (!!_this._viewer.ClipBox) {\r\n                    var clipGroup = [..._this._viewer.ClipBox.planesToClip];\r\n                    var idx = comp.charCodeAt(0) - 'x'.charCodeAt(0);\r\n                    var pos = new THREE.Vector3();\r\n                    pos.setComponent(idx, values[handle] * 3.28084);\r\n                    clipGroup[idx * 2 + handle].setFromPosition(pos);\r\n                    _this._viewer.ClipBox.planesToClip = new Set(clipGroup);\r\n                    _this._viewer.redraw(\"clip\");\r\n                }\r\n            });\r\n        }\r\n        create_comp('x', box.min.x, box.max.x, cur_box.min.x, cur_box.max.x);\r\n        create_comp('y', box.min.y, box.max.y, cur_box.min.y, cur_box.max.y);\r\n        create_comp('z', box.min.z, box.max.z, cur_box.min.z, cur_box.max.z);\r\n    }\r\n    show(shown) {\r\n        //\r\n        this.all_elems.hide();\r\n        this._viewer.ClipBox.active = false;\r\n        this._viewer.ClipBox.hide();\r\n        if (shown) {\r\n            this.all_active_elems.show();\r\n            this._viewer.ClipBox.active = true;\r\n            if (this.any) {\r\n                this._viewer.ClipBox.show(this);\r\n            }\r\n\r\n            // 创建滑动条\r\n            if (!this.inited) {\r\n                var box = this._viewer.ClipBox.boundary;\r\n                var cur_box = this._viewer.ClipBox.CurrentBox;\r\n                this._createClipSlider(box, cur_box, this);\r\n                this.inited = true;\r\n            }\r\n        }\r\n        this._viewer.redraw(\"clip\");\r\n    }\r\n    changeClipDir(btnId, enabled) {\r\n        function setClipSlide(boolean, _this) {\r\n            switch (btnId.slice(-1)) {\r\n                case \"x\":\r\n                    _this.x = boolean;\r\n                    break;\r\n                case \"y\":\r\n                    _this.y = boolean;\r\n                    break;\r\n                case \"z\":\r\n                    _this.z = boolean;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        setClipSlide(enabled, this);\r\n        if (enabled) {\r\n            this._viewer.ClipBox.show(this);\r\n        } else {\r\n            this.all_elems.hide();\r\n            this._viewer.ClipBox.hide();\r\n        }\r\n        this._viewer.redraw(\"clip\");\r\n    }\r\n\r\n    closeClipBox() {\r\n        //关掉剖切滑动条\r\n        this.all_elems.hide();\r\n        this._viewer.ClipBox.active = false;\r\n        this._viewer.ClipBox.hide();\r\n        this._viewer.redraw(\"clip\");\r\n    }\r\n}\r\n\r\nexport { ClipSlider };","import $ from 'jquery';\r\n\r\nclass ContextMenu {\r\n    constructor(viewer, menuId = \"context-menu\") {\r\n        this.menuBox = $(\"<div>\");\r\n        this.menuBox[0].id = menuId;\r\n        this.menuBox.hide();\r\n        $(\"body\").append(this.menuBox);\r\n        this.container = $(viewer.container);\r\n\r\n        this.items = {};\r\n\r\n        this._onContextMenu = e => {\r\n            e.preventDefault();\r\n            if (viewer.Controller.inOperation) return;\r\n            for (var menuItem of this.menuBox.children()) {\r\n                var item = this.items[menuItem.id];\r\n                $(menuItem).show();\r\n                if (\"available\" in item && !item.available) {\r\n                    $(menuItem).hide();\r\n                }\r\n            }\r\n            var rightedge = this.container[0].clientWidth - e.clientX;\r\n            if (rightedge < this.menuBox[0].offsetHeight) {\r\n                this.menuBox[0].style.left = e.clientX - this.menuBox[0].offsetWidth + \"px\";\r\n            } else {\r\n                this.menuBox[0].style.left = e.clientX + \"px\";\r\n            }\r\n            var bottomedge = this.container[0].clientHeight - e.clientY;\r\n            if (bottomedge < this.menuBox[0].offsetHeight) {\r\n                this.menuBox[0].style.top = e.clientY - this.menuBox[0].offsetHeight + \"px\";\r\n            } else {\r\n                this.menuBox[0].style.top = e.clientY + \"px\";\r\n            }\r\n            this.menuBox.show();\r\n        };\r\n        this._onHideMenu = e => {\r\n            e.preventDefault();\r\n            this.menuBox.hide();\r\n        };\r\n\r\n        this.enabled = true;\r\n    }\r\n    get enabled() { return this._enabled; }\r\n    set enabled(v) {\r\n        if (this._enabled == v) return;\r\n        this._enabled = v;\r\n        if (v) {\r\n            this.container.on(\"contextmenu\", this._onContextMenu);\r\n            this.container.on(\"click\", this._onHideMenu);\r\n            this.menuBox.on(\"click\", this._onHideMenu);\r\n        } else {\r\n            this.container.off(\"contextmenu\", this._onContextMenu);\r\n            this.container.off(\"click\", this._onHideMenu);\r\n            this.menuBox.off(\"click\", this._onHideMenu);\r\n        }\r\n    }\r\n    build(menuData) {\r\n        if (!menuData) return;\r\n        this.menuBox.empty();\r\n        this.items = {};\r\n        for (var item of menuData) {\r\n            if (!item.id || !item.title || !item.act && !item.children)\r\n                continue;\r\n            var menuItem = $(\"<div>\");\r\n            menuItem[0].id = item.id;\r\n            menuItem.addClass(\"context-menu\");\r\n            if (!!item.class) menuItem.addClass(item.class);\r\n            menuItem.text(item.title);\r\n            if (!!item.act) {\r\n                menuItem.on(\"click\", item.act);\r\n            } else if (!!item.children) {\r\n            }\r\n            this.menuBox.append(menuItem);\r\n            this.items[item.id] = item;\r\n        }\r\n    }\r\n}\r\n\r\nexport { ContextMenu };","import $ from 'jquery';\r\n\r\nlet _$ = (...args) => $(args.map(v => \".\" + v).join(\" \"));\r\n\r\nclass CommandUI extends HTMLElement {\r\n    constructor(ELEMENT_NAME, ELEMENT_CLASS, itemsData = [], builder = null) {\r\n        if (!!ELEMENT_NAME && !window.customElements.get(ELEMENT_NAME)) {\r\n            window.customElements.define(ELEMENT_NAME, ELEMENT_CLASS);\r\n        }\r\n        super();\r\n        this.uibuilder = builder;\r\n        this.build(itemsData);\r\n        _$(this.cssclass.node).on(\"pointerdown\", e => {\r\n            if (!node.hasClass(this.cssclass.clicked_node)) {\r\n                node.addClass(this.cssclass.clicked_node);\r\n            }\r\n            //e.stopPropagation();\r\n        });\r\n        document.addEventListener(\"pointerup\", e => {\r\n            _$(this.cssclass.node).removeClass(this.cssclass.clicked_node);\r\n        });\r\n    }\r\n    get cssclass() {\r\n        throw \"子类必须重载这个属性！\";\r\n        {\r\n            root_block,\r\n                node,\r\n                clicked_node,\r\n                checked_node,\r\n                popup_block\r\n        }\r\n    }\r\n    build(itemsData) {\r\n        var build_a_node = (action, checkable, unchecksiblings) => {\r\n            // 创建命令项\r\n            let node = document.createElement(\"div\");\r\n            node.id = action.id;\r\n            node.className = action.class;\r\n            if (action.keep_checked)\r\n                node.keep_checked = true;\r\n            node.addClass(this.cssclass.node);\r\n\r\n            this.uibuilder.addNodeContent(node, action);\r\n\r\n            // 命令执行事件\r\n            let createPopupEvent = (shown) => {\r\n                var evt = new CustomEvent(\"popup\");\r\n                evt.shown = shown;\r\n                return evt;\r\n            }\r\n            let closeAllPopupBar = () => {\r\n                var blocks_to_hide =\r\n                    _$(this.cssclass.root_block, this.cssclass.popup_block)\r\n                        .filter((i, elem) => !elem.parentNode.keep_checked);\r\n                blocks_to_hide.hide();\r\n                var parents = blocks_to_hide.map((i, e) => e.parentNode);\r\n                for (var p of parents) {\r\n                    p.dispatchEvent(createPopupEvent(false));\r\n                    p.removeClass(this.cssclass.checked_node);\r\n                }\r\n            }\r\n            if (!!action.children && !action.act) {\r\n                node.addEventListener(\"pointerup\", e => {\r\n                    e.stopPropagation();\r\n                    // node.removeClass(this.cssclass.clicked_node);\r\n                    var checked = node.hasClass(this.cssclass.checked_node);\r\n                    closeAllPopupBar();\r\n                    if (!checked) {\r\n                        node.addClass(this.cssclass.checked_node);\r\n                        node.dispatchEvent(createPopupEvent(true));\r\n                        $(node.querySelector(`.${this.cssclass.popup_block}`)).show();\r\n                    } else {\r\n                        node.removeClass(this.cssclass.checked_node);\r\n                        node.dispatchEvent(createPopupEvent(false));\r\n                        $(node.querySelector(`.${this.cssclass.popup_block}`)).hide();\r\n                    }\r\n                });\r\n            } else {\r\n                node.addEventListener(\"pointerup\", e => {\r\n                    e.stopPropagation();\r\n                    // node.removeClass(this.cssclass.clicked_node);\r\n                    closeAllPopupBar();\r\n                    let checked = false;\r\n                    if (checkable) {\r\n                        checked = !node.hasClass(this.cssclass.checked_node);\r\n                        if (checked) {\r\n                            node.addClass(this.cssclass.checked_node);\r\n                        } else {\r\n                            node.removeClass(this.cssclass.checked_node);\r\n                        }\r\n                        if (unchecksiblings) {\r\n                            $(node).siblings().removeClass(this.cssclass.checked_node);\r\n                        }\r\n                    }\r\n                    action.act(e, checked);\r\n                });\r\n            }\r\n\r\n            return node;\r\n        }\r\n        var build_a_cmds_list_UI = (actions, parent, checkgroup) => {\r\n            actions.forEach(action => {\r\n                let node = build_a_node(action,\r\n                    !!action.checkable || checkgroup, checkgroup);\r\n                parent.append(node);\r\n                if (!!action.children && action.children.length > 0) {\r\n                    var subBar = $(\"<div>\");\r\n                    subBar.attr(\"class\", this.cssclass.popup_block);\r\n                    subBar.hide();\r\n                    node.addEventListener(\"popup\", e => {\r\n                        if (!!action.on_popup)\r\n                            action.on_popup(e.shown);\r\n                    });\r\n                    build_a_cmds_list_UI(action.children, subBar,\r\n                        !!action.children_check_group);\r\n                    node.append(subBar[0]);\r\n                }\r\n            });\r\n        }\r\n        this.remove();\r\n        let root = $(\"<div>\");\r\n        root.addClass(this.cssclass.root_block);\r\n        this.append(root[0]);\r\n        build_a_cmds_list_UI(itemsData, root);\r\n    }\r\n}\r\n\r\nif (!(\"addClass\" in HTMLDivElement.prototype))\r\n    HTMLDivElement.prototype.addClass = function (className) {\r\n        if (!!className)\r\n            this.classList.add(className);\r\n    }\r\n\r\nif (!(\"removeClass\" in HTMLDivElement.prototype))\r\n    HTMLDivElement.prototype.removeClass = function (className) {\r\n        if (!!className)\r\n            this.classList.remove(className);\r\n    }\r\n\r\nif (!(\"hasClass\" in HTMLDivElement.prototype))\r\n    HTMLDivElement.prototype.hasClass = function (className) {\r\n        return !!className && (new Set(this.classList)).has(className);\r\n    }\r\n\r\nexport { CommandUI };","import $ from 'jquery';\r\nimport { CommandUI } from './command_ui';\r\n\r\nclass Toolbar extends CommandUI {\r\n    constructor(settings) {\r\n        var viewer = settings.viewer;\r\n\r\n        var toolBtnData = Web3D.DefaultTools;\r\n        var actions;\r\n        if (!settings || !settings.actions) {\r\n            actions = Object.keys(toolBtnData).map(function (action) {\r\n                return toolBtnData[action];\r\n            });\r\n        } else {\r\n            actions = settings.actions\r\n                .filter(a => typeof (a) != 'string' || a in toolBtnData)\r\n                .map(function (action) {\r\n                    if (typeof action === 'string') {\r\n                        return toolBtnData[action];\r\n                    }\r\n                    return action;\r\n                });\r\n        }\r\n\r\n        super(\"web3dui-toolbar\", Toolbar, actions, {\r\n            addNodeContent(node, action) {\r\n                if (action.ico) {\r\n                    var img = $(\"<img>\");\r\n                    img.attr(\"src\", Web3D.BasePath + action.ico)\r\n                        .attr(\"title\", action.title);\r\n                    node.append(img[0]);\r\n                } else {\r\n                    node.textContent = action.text;\r\n                }\r\n                var btnTip = $(\"<span></span>\")\r\n                btnTip.attr(\"class\", \"btnTip\")\r\n                    .text(action.title);\r\n                node.append(btnTip[0]);\r\n            }\r\n        });\r\n    }\r\n    get cssclass() {\r\n        return {\r\n            root_block: \"bottom-toolbar\",\r\n            node: \"btn\",\r\n            checked_node: \"bf-checked\",\r\n            popup_block: \"popup\",\r\n            clicked_node: \"btn-activated\"\r\n        };\r\n    }\r\n}\r\n\r\nexport { Toolbar };\r\n","// import * as style from './styles.css';\r\n\r\nconst UPDATE_EVENTS = ['input', 'change'];\r\nconst REFLECTED_ATTRIBUTES = ['min', 'max', 'step', 'value', 'disabled', 'value-precision'];\r\n\r\nconst ARIA_ATTRIBUTES = {\r\n    value: 'valuenow',\r\n    min: 'valuemin',\r\n    max: 'valuemax',\r\n};\r\n\r\nconst TEMPLATE = `\r\n  <div class=\"thumb-wrapper\">\r\n    <div class=\"thumb\"></div>\r\n  </div>\r\n`;\r\n\r\nclass RangeSliderElement extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        this._ignoreChange = false;\r\n        this._isRTL = this.getAttribute('dir') === 'rtl';\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return REFLECTED_ATTRIBUTES;\r\n    }\r\n\r\n    get _defaultValue() {\r\n        const min = Number(this.min);\r\n        const max = Number(this.max);\r\n        return String(max < min ? min : min + (max - min) / 2);\r\n    }\r\n\r\n    get min() { return this.getAttribute('min') || '0'; }\r\n    get max() { return this.getAttribute('max') || '100'; }\r\n    get step() { return this.getAttribute('step') || '1'; }\r\n    get value() { return this.getAttribute('value') || this._defaultValue; }\r\n    get disabled() { return this.getAttribute('disabled') || false }\r\n    get valuePrecision() { return this.getAttribute('value-precision') || ''; }\r\n\r\n    set min(min) { this.setAttribute('min', min); }\r\n    set max(max) { this.setAttribute('max', max); }\r\n    set step(step) { this.setAttribute('step', step); }\r\n    set value(value) {\r\n        this.setAttribute('value', value);\r\n        this.dispatchEvent(new Event('change', { bubbles: true }));\r\n    }\r\n    set disabled(disabled) { this.setAttribute('disabled', disabled); }\r\n    set valuePrecision(precision) { this.setAttribute('value-precision', precision); }\r\n\r\n    connectedCallback() {\r\n        if (!this.firstChild) {\r\n            this.innerHTML = TEMPLATE;\r\n        }\r\n\r\n        this.addEventListener('pointerdown', this._startHandler, false);\r\n        this.addEventListener('pointerup', this._endHandler, false);\r\n        this.addEventListener('keydown', this._keyCodeHandler, false);\r\n        this._update();\r\n\r\n        // Aria attributes\r\n        this.setAttribute('tabindex', '0');\r\n        this.setAttribute('role', 'slider');\r\n        setAriaAttribute(this, 'value', this.value);\r\n        setAriaAttribute(this, 'min', this.min);\r\n        setAriaAttribute(this, 'max', this.max);\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        this.removeEventListener('pointerdown', this._startHandler, false);\r\n        this.removeEventListener('pointerup', this._endHandler, false);\r\n        this.removeEventListener('keydown', this._keyCodeHandler, false);\r\n    }\r\n\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        if (oldValue === newValue || this._ignoreChange) return;\r\n        this._update();\r\n        setAriaAttribute(this, name, newValue);\r\n    }\r\n\r\n    _startHandler(e) {\r\n        this.focus();\r\n        this.classList.add('touch-active');\r\n\r\n        // Click and drag\r\n        this.setPointerCapture(e.pointerId);\r\n        this.addEventListener('pointermove', this._moveHandler, false);\r\n\r\n        // Click jump\r\n        this._reflectValue(e);\r\n    }\r\n\r\n    _moveHandler(e) {\r\n        this._reflectValue(e);\r\n    }\r\n\r\n    _endHandler(e) {\r\n        this.classList.remove('touch-active');\r\n        this.releasePointerCapture(e.pointerId);\r\n        this.removeEventListener('pointermove', this._moveHandler, false);\r\n\r\n        // TODO: check if value changed\r\n        this.dispatchEvent(new Event('change', { bubbles: true }));\r\n    }\r\n\r\n    _keyCodeHandler(e) {\r\n        const code = e.code;\r\n        const up = ['ArrowUp', 'ArrowRight'].includes(code);\r\n        const down = ['ArrowDown', 'ArrowLeft'].includes(code);\r\n\r\n        if (up) {\r\n            e.preventDefault();\r\n            this.stepUp();\r\n        } else if (down) {\r\n            e.preventDefault();\r\n            this.stepDown();\r\n        }\r\n    }\r\n\r\n    _reflectValue(e) {\r\n        const isRTL = Boolean(this._isRTL);\r\n        const min = Number(this.min);\r\n        const max = Number(this.max);\r\n        const oldValue = this.value;\r\n        const fullWidth = e.target.offsetWidth;\r\n        const offsetX = Math.min(Math.max(e.offsetX, 0), fullWidth);\r\n        const percent = offsetX / fullWidth;\r\n        const percentComplete = isRTL ? 1 - percent : percent;\r\n\r\n        // Fit the percentage complete between the range [min,max]\r\n        // by remapping from [0, 1] to [min, min+(max-min)].\r\n        const computedValue = min + percentComplete * (max - min);\r\n\r\n        // Constrain value\r\n        const newValue = this._constrainValue(computedValue);\r\n\r\n        if (oldValue !== newValue) {\r\n            this.value = newValue;\r\n        }\r\n    }\r\n\r\n    _constrainValue(value) {\r\n        const min = Number(this.min);\r\n        const max = Number(this.max);\r\n        const step = Number(this.step);\r\n        const valuePrecision = Number(this.valuePrecision) || getPrescision(this.step) || 0;\r\n\r\n        // min, max constrain\r\n        const saveValue = Math.min(Math.max(value, min), max);\r\n\r\n        // Rounding in steps\r\n        const nearestValue = Math.round(saveValue / step) * step;\r\n\r\n        // Value precision\r\n        const newValue = valuePrecision ? nearestValue.toFixed(valuePrecision) : Math.round(nearestValue).toString();\r\n\r\n        return newValue;\r\n    }\r\n\r\n    _update() {\r\n        const isRTL = Boolean(this._isRTL);\r\n        const min = Number(this.min);\r\n        const max = Number(this.max);\r\n        const value = Number(this.value);\r\n        const percent = (100 * (value - min)) / (max - min);\r\n        const percentComplete = isRTL ? 100 - percent : percent;\r\n        this.style.setProperty('--value-percent', percentComplete + '%');\r\n    }\r\n\r\n    stepUp(amount = this.step) {\r\n        const oldValue = Number(this.value);\r\n        const newValue = this._constrainValue(oldValue + Number(amount));\r\n        if (oldValue !== newValue) {\r\n            this.value = newValue;\r\n        }\r\n    }\r\n\r\n    stepDown(amount = this.step) {\r\n        const oldValue = Number(this.value);\r\n        const newValue = this._constrainValue(oldValue - Number(amount));\r\n        if (oldValue !== newValue) {\r\n            this.value = newValue;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getPrescision(value = '') {\r\n    const afterDecimal = value.split('.')[1];\r\n    return afterDecimal ? afterDecimal.length : 0;\r\n}\r\n\r\nfunction setAriaAttribute(element, name, value) {\r\n    const attributeName = ARIA_ATTRIBUTES[name];\r\n    if (!attributeName) return;\r\n    element.setAttribute(`aria-${attributeName}`, value);\r\n}\r\n\r\nconst ELEMENT_NAME = 'range-slider';\r\n\r\nif (!window.customElements.get(ELEMENT_NAME)) {\r\n    // window.RangeSliderElement = RangeSliderElement;\r\n    window.customElements.define(ELEMENT_NAME, RangeSliderElement);\r\n}\r\n","import * as THREE from \"three\";\r\nimport { CSS2DObject,CSS2DRenderer } from 'three/examples/jsm/renderers/CSS2DRenderer.js';\r\nclass CreateLable {\r\n\r\n    constructor(viewer) {\r\n        this.viewer = viewer\r\n    }\r\n    create2DObject(message,point,className,name) {\r\n        var div = document.createElement('div');\r\n        /*给标签设置你想要的的样式*/\r\n        div.textContent = message\r\n        div.className = className\r\n\r\n        const label = new CSS2DObject(div);\r\n        label.name = name\r\n        label.position.set(point.x,point.y,point.z)\r\n        return label;\r\n    }\r\n\r\n    create2DObjectSvg(point,message) {\r\n        var div = document.createElement('div');\r\n        div.className = 'elevationStyle'\r\n        let html = '<div class=\"triangleText\"><span>'+message+'</span></div><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" style=\"position: absolute;left: 10px;top: 10px\">' +\r\n            '<polyline points=\"20,20 40,40 60,20 20,20 120,20\" style=\"fill:none;stroke:#ff6600;stroke-width:3\"></polyline>' +\r\n            '</svg>'\r\n        div.insertAdjacentHTML('beforeend',html)\r\n\r\n        const svg = new CSS2DObject(div);\r\n        svg.position.set(point.x,point.y,point.z)\r\n        return svg;\r\n    }\r\n\r\n    create2DObjectSvgPointSurface(point) {  \r\n        var div = document.createElement('div');\r\n        div.className = 'elevationStyle'\r\n        let html = '<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" style=\"position: absolute;left: 10px;top: 10px\">' +\r\n            '<polyline points=\"20,20 60,20 60,60 20,60 20,20 20,20 60,60 60,20 20,60\" style=\"fill:none;stroke:#ff6600;stroke-width:1\"></polyline>' +\r\n            '</svg>'\r\n        div.insertAdjacentHTML('beforeend',html)\r\n\r\n        const svg = new CSS2DObject(div);\r\n        svg.position.set(point.x,point.y,point.z)\r\n        return svg;\r\n    }\r\n\r\n    create2DObjectSvgDropFoot(point) {  //jyp-点线的线的垂直标\r\n        var div = document.createElement('div');\r\n        div.className = 'elevationStyle'\r\n        div.style.width = \"40px\"\r\n        div.style.height = \"120px\"\r\n        let html = '<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" style=\"position: absolute;left: 10px;top: 10px\">' +\r\n            '<polyline points=\"10,20 10,50 10,50 40,50\" style=\"fill:none;stroke:#ff6600;stroke-width:1.5\" />' +\r\n            '<polyline points=\"10,40 20,40 20,40 20,50\" style=\"fill:none;stroke:#ff6600;stroke-width:1\" />' +\r\n            '</svg>'\r\n        div.insertAdjacentHTML('beforeend',html)\r\n\r\n        const svg = new CSS2DObject(div);\r\n        svg.position.set(point.x,point.y,point.z)\r\n        return svg;\r\n    }\r\n}\r\nexport {CreateLable}\r\n","import * as THREE from \"three\";\r\nimport { Capture } from \"../capture/Capture\";\r\nclass PointPick {\r\n    constructor(viewer) {\r\n        this.viewer = viewer;\r\n    }\r\n    getPick(v = false) {\r\n        let scope = this;\r\n        let mobileMeaHandle = document.getElementById(\"mobileMeasureHandleArea\");\r\n        let mobileMea = document.getElementById(\"mobileMeasureHandle\");\r\n        if (!this.eventHandler) {\r\n            this.eventHandler = function(event) {\r\n                event.preventDefault();\r\n                let currentPoint = new THREE.Vector3();\r\n                let point = new THREE.Vector3();\r\n                let clientPos = {};\r\n                switch (event.type) {\r\n                    case 'touchmove':\r\n                        let x = event.changedTouches[0].clientX - 22;\r\n                        let y = event.changedTouches[0].clientY - 50;\r\n                        mobileMea.style.left = x + 'px'; //设置图标位置\r\n                        mobileMea.style.top = y + 'px';\r\n                        clientPos.x = x + 6; //取小红点的位置\r\n                        clientPos.y = y;\r\n                        break;\r\n                    case 'mousemove':\r\n                        clientPos.x = event.offsetX;\r\n                        clientPos.y = event.offsetY;\r\n                        break;\r\n                    default:\r\n                        return;\r\n                }\r\n\r\n                if (typeof(scope.viewer.pick(clientPos)) == \"undefined\") {\r\n                    $(\"#container\").css(\"cursor\", \"default\");\r\n                    return\r\n                } else {\r\n                    $(\"#container\").css(\"cursor\", \"crosshair\");\r\n                    currentPoint = scope.viewer.pick(clientPos).point;\r\n                }\r\n                //捕捉\r\n                if (scope.viewer.pick(clientPos).object.edge) {\r\n                    //jyp-获取鼠标点击获取物体的所有顶点数据\r\n                    let arr = scope.viewer.pick(clientPos).object.edge.geometry.attributes.position.array;\r\n                    let capture = new Capture(scope.viewer);\r\n                    let point1 = capture.getCapture(scope.viewer, arr, currentPoint);\r\n\r\n                    if (typeof(point1) == \"undefined\") {\r\n                        return\r\n                    } else {\r\n                        point.set(point1.x, point1.y, point1.z)\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        let canvas = scope.viewer.Renderer.domElement;\r\n        if (v) {\r\n            if ('ontouchstart' in document.documentElement) mobileMeaHandle.addEventListener('touchmove', this.eventHandler);\r\n            else canvas.addEventListener('mousemove', this.eventHandler);\r\n\r\n        } else {\r\n            canvas.removeEventListener('mousemove', this.eventHandler);\r\n            mobileMeaHandle.removeEventListener('touchmove', this.eventHandler);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport { PointPick }","//屏幕适配，采用1：100的比例\r\nclass ScreenAdaptation {\r\n    constructor() {}\r\n    screenAdapt() {\r\n        var docEl = document.documentElement,\r\n            resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\r\n            _this = this,\r\n            detect = function() {\r\n                _this.detectOrient()\r\n            };\r\n\r\n        if (!document.addEventListener)\r\n            return;\r\n        window.addEventListener(resizeEvt, detect, false);\r\n        document.addEventListener('DOMContentLoaded', detect, false);\r\n    }\r\n\r\n    detectOrient() {\r\n        var cw = document.documentElement.clientWidth;\r\n        var _Width = 0,\r\n            _Height = 0,\r\n            sw, sh;\r\n\r\n        sw = window.screen.width;\r\n        sh = window.screen.height;\r\n        _Width = sw < sh ? sw : sh;\r\n        _Height = sw >= sh ? sw : sh;\r\n\r\n        if (cw == _Width) {\r\n            // 竖屏\r\n            this.setFontSize(true);\r\n            return;\r\n        }\r\n        if (cw == _Height) {\r\n            // 横屏\r\n            this.setFontSize(false);\r\n            return;\r\n        }\r\n        if (cw != _Width && cw != _Height) {\r\n            //web端调出开发工具，占据页面位置，使cw变化，而sw和sh不变化，主要为了使调试时候方便\r\n            if (sw < sh) {\r\n                // 竖屏\r\n                this.setFontSize(true);\r\n                return;\r\n            } else {\r\n                // 横屏\r\n                this.setFontSize(false);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    // @ori boolean 屏幕方向，默认竖屏 true\r\n    setFontSize(ori) {\r\n        var docEl = document.documentElement;\r\n        var clientWidth = docEl.clientWidth;\r\n        var clientHeight = docEl.clientHeight;\r\n        if (!clientWidth) return;\r\n        if (!clientHeight) return;\r\n        if (ori) {\r\n            //竖屏\r\n            if (clientWidth < 750) {\r\n                docEl.style.fontSize = 100 * (clientWidth / 750) + 'px';\r\n            } else {\r\n                docEl.style.fontSize = '100px';\r\n            }\r\n        } else {\r\n            //横屏\r\n            if (clientHeight < 750) {\r\n                docEl.style.fontSize = 100 * (clientHeight / 750) + 'px';\r\n            } else {\r\n                docEl.style.fontSize = '100px';\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport { ScreenAdaptation };","import { Web3D } from \"./web3d\";\r\nimport { BuildingController } from \"ui/common/building_controller\";\r\nimport { SelectionSet } from \"ui/common/selectionset\";\r\nimport { ClipManager } from \"ui/clip/clip_manager\";\r\nimport { init_commands } from 'ui/commands';\r\nimport { display_control_cmds } from 'ui/commands/display_control';\r\nimport { Toolbar } from 'ui/elements/command_ui/toolbar';\r\nimport { ContextMenu } from 'ui/elements/command_ui/ContextMenu'\r\nimport { ClipBox } from 'ui/clip/clip_box'\r\nimport { VisibilityController } from 'ui/common/VisibilityController'\r\nimport { DimensionBusiness } from 'ui/business/DimensionBusiness'\r\nimport { ElevationBusiness } from 'ui/business/ElevationBusiness'\r\nimport { ViewCube } from 'ui/elements/ViewCube';\r\n// import { Tag, Tags } from 'ui/Tags'\r\n\r\nimport { ScreenAdaptation } from 'ui/screenAdaptation';\r\n\r\nvar Viewer = Web3D.Viewer;\r\nif (!Viewer)\r\n    throw 'Web3D.Viewer is required!';\r\n\r\nvar screenAdaptation = new ScreenAdaptation();\r\nscreenAdaptation.screenAdapt();\r\n\r\nvar basePath = document.scripts;\r\nfor (var u of basePath) {\r\n    try {\r\n        let url = new URL(u.src);\r\n        if (url.pathname.search(/web3d-ui\\.[0-9a-z]{20}\\.js$/) > -1) {\r\n            Web3D.BasePath = url.href.split(\"/\").slice(0, -1).join('/');\r\n            Web3D.BasePath += '/';\r\n            break;\r\n        }\r\n    } catch { }\r\n}\r\nconsole.debug(\"引擎UI静态资源加载路径：\", Web3D.BasePath)\r\n\r\nWeb3D.ClipBox = ClipBox;\r\nWeb3D.VisibilityController = VisibilityController;\r\nWeb3D.DimensionBusiness = DimensionBusiness;\r\nWeb3D.ElevationBusiness = ElevationBusiness;\r\n// Web3D.Tags = Tags;\r\n// Web3D.Tag = Tag;\r\n\r\nViewer.prototype.UseController = function (mode/*目前只实现建筑类操作模式*/) {\r\n    if (!mode)\r\n        mode = 'building';\r\n    var controller;\r\n    switch (mode) {\r\n        case 'building':\r\n            controller = new BuildingController(this);\r\n            controller.saveState();\r\n            break;\r\n    }\r\n    if (!controller) return;\r\n\r\n    if (!!this.Controller) {\r\n        this.Controller.detach();\r\n    }\r\n    this.Controller = controller;\r\n\r\n    var vcWrap = $(\"#vc-wrap\");\r\n    if (controller) {\r\n        if (vcWrap.length < 1) {\r\n            var viewCube = new ViewCube();\r\n            viewCube.rotateByCam(this.camera)\r\n            controller.addEventListener('change', e => {\r\n                viewCube.rotateByCam(this.camera)\r\n            });\r\n            viewCube.addEventListener(\"clickface\", e => {\r\n                controller.applyBasicView(e.face);\r\n            });\r\n            viewCube.addEventListener(\"clickhome\", e => {\r\n                controller.applyBasicView(\"HOME\");\r\n            });\r\n            vcWrap = $(\"<div>\").attr(\"id\", \"vc-wrap\");\r\n            vcWrap.append(viewCube);\r\n            var container = $(this.container);\r\n            container.prepend(vcWrap);\r\n        }\r\n    }\r\n};\r\n\r\nViewer.prototype.InitToolbar = function (toolSetting) {\r\n    toolSetting.viewer = this;\r\n    init_commands(this);\r\n    this.Toolbar = new Toolbar(toolSetting);\r\n    this.container.append(this.Toolbar);\r\n    // Context Menu\r\n    this.ContextMenu = new ContextMenu(this);\r\n    var menu_items = [\r\n        Web3D.DefaultTools[\"home\"],\r\n        Web3D.DefaultTools[\"fitToView\"],\r\n    ];\r\n    if (display_control_cmds.init(this)) {\r\n        menu_items.push(...display_control_cmds.commands);\r\n    }\r\n    this.ContextMenu.build(menu_items);\r\n};\r\n\r\nViewer.prototype.InitProgress = function (opt) {\r\n    var container = $(this.container);\r\n    var progBar = $(\".load-bar\");\r\n    var progBarCur = $(\".load-bar-inner\");\r\n    if (progBar.length < 1) {\r\n        progBar = $(\"<div>\");\r\n        progBar.addClass(\"load-bar\");\r\n        progBarCur = $(\"<div>\");\r\n        progBarCur.addClass(\"load-bar-inner\");\r\n        progBar.append(progBarCur);\r\n        progBar.insertBefore(container.children().first());\r\n    }\r\n    //加载前的等待\r\n    var loadingIcon = $(\".loading-icon\");\r\n    if (loadingIcon.length < 1) {\r\n        loadingIcon = $(\"<img>\");\r\n        loadingIcon.attr(\"src\", Web3D.BasePath + \"img/loading.gif\").attr(\"class\", \"loading-icon\");\r\n        container.prepend(loadingIcon);\r\n    }\r\n    //进度条\r\n    this.addEventListener(\"LOAD_CHUNK_FINISH\", e => {\r\n        $('.loading-icon').hide();\r\n        progBar.show();\r\n        // e.url\r\n        var per = Math.floor(100 * e.index / e.count);\r\n        progBarCur.css(\"width\", per + \"%\");\r\n    });\r\n    this.addEventListener(\"LOAD_FINISH\", e => {\r\n        // $(\".load-bar\").hide(1000);\r\n        setTimeout(function () {\r\n            progBar.hide();\r\n        }, 1000);\r\n    });\r\n};\r\n\r\nfunction set_selection_clip(viewer) {\r\n    if (!viewer.ClipManager || !viewer.Selection) return;\r\n    var mat = viewer.Selection.HighlightMaterial;\r\n    for (var group of viewer.ClipManager.groups) {\r\n        if (group.elements.has(mat)) continue;\r\n        group.elements.add(mat);\r\n    }\r\n}\r\n\r\nViewer.prototype.InitSelection = function (highlightColor) {\r\n    if (!!this.Selection) return;\r\n    this.Selection = new SelectionSet(this, highlightColor);\r\n    this.Selection.enable(true);\r\n    set_selection_clip(this);\r\n};\r\n\r\nViewer.prototype.InitClipping = function () {\r\n    try {\r\n        this.ClipManager = new ClipManager(this);\r\n        this.ClipBox = this.ClipManager.addGroup(\"interactive_box\", Web3D.ClipBox);\r\n        var timeoutID = 0;\r\n        // 重新排序并生成场景\r\n        var rebuild = () => {\r\n            this.rebuild(false, false);\r\n        }\r\n        this.ClipBox.addEventListener(\"CLIP_GROUP_STATUS_CHANGE\", rebuild);\r\n        this.ClipBox.addEventListener(\"CLIP_GROUP_CLIPPED\", rebuild);\r\n        set_selection_clip(this);\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n    }\r\n\r\n};\r\n"],"names":[],"sourceRoot":""}