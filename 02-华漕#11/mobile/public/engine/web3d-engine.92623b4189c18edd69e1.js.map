{"version":3,"file":"engine/web3d-engine.92623b4189c18edd69e1.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACkB;;;;;;;;;;;;;;;;;;;;AChGlB;AACA;AACA;AAC+B;AAC/B;AACqD;AACR;AACS;AACU;AAChE;AACA;AACA,2BAA2B,oDAAuB;AAClD;AACA,qBAAqB,kDAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oDAAuB;AACjD;AACA;AACA;AACA,UAAU;AACV,uDAAuD;AACvD;AACA;AACA;AACA,iCAAiC,8DAAY;AAC7C;AACA;AACA;AACA;AACA,iCAAiC,+DAAY;AAC7C,sCAAsC,yEAAiB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,sDAAQ;AACrC;AACA;AACA;AACA;AACA;AACA,+CAA+C,iBAAiB,GAAG,eAAe;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,SAAS;AACT;AACA;AACA;AACA,yBAAyB,0CAAa;AACtC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mCAAmC;AAClD;AACA;AACA;AACA,2BAA2B,0CAAa;AACxC,uBAAuB,0CAAa;AACpC;AACA;AACA;AACA,6BAA6B,0CAAa;AAC1C;AACA;AACA,4BAA4B,0CAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uCAAU;AACpC;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,oBAAoB,+CAA+C,0CAAa;AAChF;AACA,sBAAsB,0CAAa;AACnC;AACA;AACA,wBAAwB,0CAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0CAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,wBAAwB,0CAAa;AACrC,wCAAwC;AACxC,4DAA4D;AAC5D,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,0CAAa;AACnC;AACA;AACA;AACA,4BAA4B,4CAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpX+B;AAC/B;AACA,YAAY,SAAS;AAC8B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4DAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAyB,GAAG,iBAAiB;AAC7D;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACwB;;;;;;;;;;;;;;;;;;AC7MO;AACmB;AACf;AACnC;AACA;AACA;AACA,2BAA2B,0DAAU;AACrC;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAkB;AAC9C,+BAA+B,kDAAqB;AACpD,gCAAgC,mDAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0CAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,kCAAkC,iEAA4B;AAC9D;AACA;AACA,yBAAyB,0CAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kDAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwB;;;;;;;;;;;;;;;;;AC1GmC;AAO5C;AACf;AACA;AACA;AACA,sCAAsC,oDAAU,CAAC,gEAAsB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,yDAAsB;AACjE;AACA;AACA;AACA;AACA;AACA,uCAAuC,oDAAiB,GAAG,cAAc;AACzE;AACA,2CAA2C,iDAAc;AACzD;AACA;AACA,gCAAgC,yDAAsB;AACtD,4CAA4C,+CAAY;AACxD;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACsB;;;;;;;;;;;;;;;;;ACtE4B;AACS;AAC3D;AACA;AACA;AACA;AACA;AACA,sCAAsC,oDAAU,CAAC,gEAAsB;AACvE,sCAAsC,oDAAU,CAAC,gEAAsB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,6DAA0B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+CAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA,YAAY,yGACe;AAC3B;AACA,KAAK;AACL;AACA;AACA;AACA,YAAY,yGACe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACtD+B;AAC/B,WAAW,MAAM;AACW;AAC5B;AACkD;AACD;AACK;AACR;AACX;AACY;AAC/C;AACA;AACA;AACA,2BAA2B,kDAAqB;AAChD;AACA;AACA,2BAA2B,0DAAU,IAAI;AACzC,iCAAiC,6CAAgB;AACjD,gCAAgC,qCAAG;AACnC;AACA,mCAAmC,6CAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,wCAAW,IAAI;AACjD,4CAA4C;AAC5C,wCAAwC;AACxC;AACA,0BAA0B,0DAAU;AACpC;AACA;AACA,0BAA0B,wDAAY,IAAI;AAC1C;AACA;AACA,sBAAsB;AACtB,cAAc;AACd,sBAAsB;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,4CAA4C,6CAAgB;AAC5D;AACA;AACA;AACA;AACA;AACA,uBAAuB,0CAAa,iBAAiB,0CAAa;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0DAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY,oDAAuB,GAAG,iBAAiB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6DAAwB;AACvD;AACA,sCAAsC,eAAe,GAAG,UAAU;AAClE;AACA,uCAAuC,eAAe,GAAG,UAAU;AACnE;AACA;AACA,mCAAmC,uDAAkB;AACrD,mCAAmC,iEAA4B;AAC/D;AACA;AACA;AACA;AACA,+BAA+B,KAAK,KAAK,sCAAsC;AAC/E,+BAA+B,+DAA0B;AACzD;AACA;AACA,yBAAyB,+DAAY;AACrC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0CAAa;AACjC,oBAAoB,0CAAa;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0CAAa;AAC5C;AACA;AACA;AACA;AACA,+BAA+B,0CAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4DAAuB;AACtD,+BAA+B,iEAA4B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iEAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wDAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,wBAAwB;AACxB;AACA;AACA;AACA,2BAA2B,iEAA4B;AACvD;AACA;AACA;;;;;;;;;;;;;;;;;;ACzWe;AACf;AACA;AACA,qBAAqB,WAAW,0CAAO,IAAI;AAC3C,mBAAmB,UAAU;AAC7B;AACA,mBAAmB,UAAU;AAC7B,kBAAkB,UAAU;AAC5B,wBAAwB,cAAc;AACtC,yBAAyB;AACzB;AACA;AACA;AACA,8BAA8B;AAC9B,4BAA4B;AAC5B,6BAA6B;AAC7B,kCAAkC;AAClC;AACA,iCAAiC;AACjC,gCAAgC;AAChC,4BAA4B;AAC5B,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB;AACA,2CAA2C;AAC3C;AACA;AACA,6EAA6E;AAC7E,mEAAmE;AACnE;AACA;AACA,wDAAwD;AACxD;AACA;AACA,2GAA2G;AAC3G;AACA;AACA;AACA,yBAAyB;AACzB,gDAAgD;AAChD;AACA,uGAAuG;AACvG;AACA;AACA;AACA,kDAAkD;AAClD,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,iDAAiD;AACjD,0DAA0D;AAC1D,wGAAwG;AACxG,MAAM;AACN;AACA,+BAA+B;AAC/B,qCAAqC;AACrC,kCAAkC;AAClC,MAAM;AACN;AACA,kBAAkB;AAClB;AACA,+DAA+D;AAC/D,yCAAyC;AACzC;AACA,+EAA+E;AAC/E,oCAAoC;AACpC;AACA,+CAA+C;AAC/C;AACA,uDAAuD;AACvD;AACA,oFAAoF;AACpF;AACA,0EAA0E;AAC1E;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA,sDAAsD;AACtD;AACA,MAAM;AACN;AACA;AACA;AACA,iCAAiC;AACjC,gCAAgC;AAChC,4BAA4B;AAC5B,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB;AACA,6BAA6B;AAC7B,mCAAmC;AACnC;AACA,kDAAkD;AAClD;AACA;AACA,mEAAmE;AACnE;AACA,4BAA4B;AAC5B,8BAA8B;AAC9B;AACA;AACA,8CAA8C;AAC9C,0CAA0C;AAC1C,2CAA2C;AAC3C;AACA,qGAAqG;AACrG;AACA;AACA,4DAA4D;AAC5D;AACA,uDAAuD;AACvD;AACA,4CAA4C;AAC5C,mEAAmE;AACnE,MAAM;AACN;AACA,+CAA+C;AAC/C,+BAA+B;AAC/B,sEAAsE;AACtE,0DAA0D;AAC1D,MAAM;AACN;AACA;AACA,0BAA0B;AAC1B,0BAA0B;AAC1B,0BAA0B;AAC1B,0BAA0B;AAC1B,0BAA0B;AAC1B,0BAA0B;AAC1B;AACA,iDAAiD;AACjD;AACA,uCAAuC;AACvC,2FAA2F;AAC3F,MAAM;AACN;AACA;AACA,kBAAkB;AAClB;AACA;AACA,iGAAiG;AACjG,qHAAqH;AACrH,gDAAgD;AAChD,2CAA2C;AAC3C;AACA;AACA,uDAAuD;AACvD;AACA;AACA,qFAAqF;AACrF;AACA,2DAA2D;AAC3D,wCAAwC;AACxC;AACA,0DAA0D;AAC1D,wCAAwC;AACxC;AACA,mHAAmH;AACnH,8LAA8L;AAC9L;AACA;AACA,+DAA+D;AAC/D,yCAAyC;AACzC,oDAAoD;AACpD,6EAA6E;AAC7E,kCAAkC;AAClC;AACA;AACA,qGAAqG;AACrG,gDAAgD;AAChD;AACA,yEAAyE;AACzE;AACA,0FAA0F;AAC1F,qCAAqC;AACrC;AACA,+EAA+E;AAC/E;AACA,2CAA2C;AAC3C;AACA,MAAM;AACN;AACA;;;;;;;;;;;;;;;;;AC7LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOe;AACyC;AACxD;AACA,kBAAkB,uCAAI;AACtB;AACA,qBAAqB,iDAAc;AACnC,mBAAmB,wEAAqB;AACxC,iBAAiB,sEAAmB;AACpC,aAAa,sDAAmB,CAAC,kEAAe;AAChD,SAAS,2CAAQ;AACjB,GAAG;AACH,YAAY,oDAAiB;AAC7B;AACA;AACA;;;;;;;;;;;;;;;;ACpCoD;AACpD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iCAAiC,4DAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;;;;;;;AC7BW;AACmB;AACV;AACkC;AAC5C;AAC9B;AACA,gCAAgC,0DAAU;AAC1C;AACA,cAAc,iDAAS;AACvB;AACA,uBAAuB,qFAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wCAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4B;;;;;;;;;;;;;;;;;;;;;;;;;;ACrDG;AACsD;AACN;AACN;AACI;AACA;AACF;AACL;AACA;AACS;AAC/E;AACmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,UAAU;AACV;AACA,qCAAqC;AACrC,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,4CAA4C,uBAAuB;AACnE;AACA;AACA;AACA;AACA;AACA,uBAAuB,mDAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iDAAmB;AAChD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wCAAwC,oDAAsB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qFAAS;AAC3C;AACA,oDAAoD,qBAAqB;AACzE;AACA;AACA,iCAAiC,uFAAU,CAAC,gFAAU;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2CAAa;AAC5C;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,4CAA4C,yCAAW;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wCAAwC;AACpE;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACoB;;;;;;;;;;;;;;;;;;;ACvMW;AACmB;AACf;AACK;AACxC;AACA,2BAA2B,kDAAqB;AAChD;AACA;AACA,0BAA0B,0DAAU,CAAC,iDAAS;AAC9C;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qCAAqC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwB;;;;;;;;;;;;;;;;;AClIO;AACU;AACzC;AACA;AACA;AACA,IAAI,yDAA4B;AAChC;AACA,0BAA0B,qDAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,qEAAwC;AAC5C;AACA;AACA;AACA;AACA;AACA,0BAA0B,qDAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,0BAA0B,qDAAwB;AAClD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,0BAA0B,qDAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,4EAA+C;AACnD;AACA;AACA;AACA;AACA,6CAA6C,OAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,0DAA6B;AACjC;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA,sBAAsB,0CAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,wDAA2B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,0DAA6B;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qDAAwB;AAClD;AACA;AACA;AACA,6CAA6C,kDAAS;AACtD;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,qEAAwC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,wEAA2C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uEAA0C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,wEAA2C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qDAAwB;AAClD;AACA;AACA;AACA,6CAA6C,kDAAS;AACtD;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,wEAA2C;AAC/C;AACA;AACA;AACA,IAAI,qEAAwC;AAC5C;AACA;AACA;AACA,IAAI,qEAAwC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,wEAA2C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uEAA0C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACnQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpEA;AACqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,2DAAkB;AAC9D;AACA;AACA;AACA,oDAAoD,0DAAiB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,6DAAoB;AAChE;AACA;AACA,gDAAgD,4DAAmB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,6DAAoB;AAChE;AACA;AACA,4CAA4C,4DAAmB;AAC/D;AACA;AACA;;;;;;;;;;;;;;;;ACvD4C;AAC5C;AACA;AACA;AACA;AACA,wBAAwB,sDAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnC8B;AACM;AACmB;AACD;AACtD;AACA,oEAAe;AACf;AACA;AACA,YAAY,+CAAM;AAClB,kBAAkB,kEAAY;AAC9B,aAAa,QAAc;AAC3B;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA,mBAAmB,kCAAK;AACxB;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;AACiB;;;;;;;UCxBjB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA,qCAAqC,8EAA8E;WACnH;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WCfA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;WChDA;;;;;UEAA;UACA;UACA;UACA;UACA","sources":["webpack://web3d/../src/core/Events.js","webpack://web3d/../src/core/Viewer.js","webpack://web3d/../src/core/model/element_group.js","webpack://web3d/../src/core/model/light_manager.js","webpack://web3d/../src/core/model/loader/edgeloader.js","webpack://web3d/../src/core/model/loader/gltfloader_ex.js","webpack://web3d/../src/core/model/loader/worker_pool.js","webpack://web3d/../src/core/model/model_manager.js","webpack://web3d/../src/core/model/shaders/shader_sky_with_sun.js","webpack://web3d/../src/core/model/sky.js","webpack://web3d/../src/core/render/MockScene.js","webpack://web3d/../src/core/render/decoration_manager.js","webpack://web3d/../src/core/render/renderer.js","webpack://web3d/../src/core/render/scene_manager.js","webpack://web3d/../src/core/utils/THREE_Ex.js","webpack://web3d/../src/core/utils/named_array.js","webpack://web3d/../src/core/utils/observed_set.js","webpack://web3d/../src/core/utils/shared_set.js","webpack://web3d/../src/web3d.js","webpack://web3d/webpack/bootstrap","webpack://web3d/webpack/runtime/chunk loaded","webpack://web3d/webpack/runtime/compat get default export","webpack://web3d/webpack/runtime/define property getters","webpack://web3d/webpack/runtime/get javascript chunk filename","webpack://web3d/webpack/runtime/global","webpack://web3d/webpack/runtime/hasOwnProperty shorthand","webpack://web3d/webpack/runtime/make namespace object","webpack://web3d/webpack/runtime/publicPath","webpack://web3d/webpack/runtime/jsonp chunk loading","webpack://web3d/webpack/runtime/nonce","webpack://web3d/webpack/before-startup","webpack://web3d/webpack/startup","webpack://web3d/webpack/after-startup"],"sourcesContent":["var Events = {\r\n    LOAD_FINISH: url => Object({\r\n        type: 'LOAD_FINISH',\r\n        url: url\r\n    }),\r\n    LOAD_CHUNK_FINISH: (url, idxChunk, cntChunks, objs) => Object({\r\n        type: 'LOAD_CHUNK_FINISH',\r\n        url: url,\r\n        index: idxChunk,\r\n        count: cntChunks,\r\n        new_objects: objs\r\n    }),\r\n    MODEL_ADD_OBJECT: obj => Object({\r\n        type: 'MODEL_ADD_OBJECT',\r\n        object: obj\r\n    }),\r\n    MODEL_BOUNDARY_CHANGE: boundary => Object({\r\n        type: 'MODEL_BOUNDARY_CHANGE',\r\n        boundary: boundary\r\n    }),\r\n    LOAD_INDEX_PROGRESS: (cur, total) => Object({\r\n        type: 'LOAD_INDEX_PROGRESS',\r\n        cur: cur,\r\n        total: total\r\n    }),\r\n    RENDER_BEGIN_A_FRAME: timeStamp => Object({\r\n        type: 'RENDER_BEGIN_A_FRAME',\r\n        timestamp: timeStamp\r\n    }),\r\n    SCENE_INCREMENT: incre_segs => Object({\r\n        type: \"SCENE_INCREMENT\",\r\n        segments: incre_segs\r\n    }),\r\n    CLIP_PLANE_CHANGE: pln => Object({\r\n        type: \"CLIP_PLANE_CHANGE\",\r\n        plane: pln\r\n    }),\r\n    CLIP_GROUP_ADD_PLANE: (grp, pln) => Object({\r\n        type: \"CLIP_GROUP_ADD_PLANE\",\r\n        group: grp,\r\n        plane: pln\r\n    }),\r\n    CLIP_GROUP_REMOVE_PLANE: (grp, pln) => Object({\r\n        type: \"CLIP_GROUP_REMOVE_PLANE\",\r\n        group: grp,\r\n        plane: pln\r\n    }),\r\n    CLIP_GROUP_STATUS_CHANGE: grp => Object({\r\n        type: \"CLIP_GROUP_STATUS_CHANGE\",\r\n        group: grp\r\n    }),\r\n    CLIP_GROUP_LOCK: () => Object({\r\n        type: \"CLIP_GROUP_LOCK\"\r\n    }),\r\n    CLIP_GROUP_UNLOCK: () => Object({\r\n        type: \"CLIP_GROUP_UNLOCK\"\r\n    }),\r\n    CLIP_GROUP_CLIPPING: (vMove) => Object({\r\n        type: \"CLIP_GROUP_CLIPPING\",\r\n        clip_vector: vMove,\r\n    }),\r\n    CLIP_GROUP_CLIPPED: () => Object({\r\n        type: \"CLIP_GROUP_CLIPPED\"\r\n    }),\r\n    SELECTION_CHANGED: (sel_obj, unsel_objs, pickPos, keys) => Object({\r\n        type: 'SELECTION_CHANGED',\r\n        object: sel_obj,\r\n        unselect_objs: unsel_objs,\r\n        pos: pickPos,\r\n        shiftKey: keys.shiftKey,\r\n        altKey: keys.altKey,\r\n        ctrlKey: keys.ctrlKey,\r\n    }),\r\n    SUN_LIGHT_POS_CHANGED: (newPos) => Object({\r\n        type: 'SUN_LIGHT_POS_CHANGED',\r\n        pos: newPos\r\n    }),\r\n    OSET_ADDING: obj => Object({\r\n        type: \"OSET_ADDING\",\r\n        object: obj\r\n    }),\r\n    OSET_ADDED: obj => Object({\r\n        type: \"OSET_ADDED\",\r\n        object: obj\r\n    }),\r\n    OSET_DELETING: obj => Object({\r\n        type: \"OSET_DELETING\",\r\n        object: obj\r\n    }),\r\n    OSET_DELETED: obj => Object({\r\n        type: \"OSET_DELETED\",\r\n        object: obj\r\n    }),\r\n\r\n};\r\n\r\nexport { Events };\r\n","// Web3D接口类\r\n\r\n\r\nimport * as THREE from \"three\";\r\n\r\nimport { ModelManager } from './model/model_manager';\r\nimport { Renderer } from './render/renderer';\r\nimport { SceneManager } from './render/scene_manager';\r\nimport { DecorationManager } from \"./render/decoration_manager\";\r\n\r\nconst INIT_MAX_SCOPE = 1000;\r\nconst DEFAULT_MODEL_NAME = THREE.Math.generateUUID();\r\n\r\nclass Viewer extends THREE.EventDispatcher {\r\n    /**\r\n     * 参数说明：\r\n     * opt - 包含一个对象，可指定如下参数\r\n     *      sky、ground、axes - 天空、地面和坐标轴的显示开关\r\n     *      width、height - 渲染时的视口宽、高\r\n     *      setPixelRatio - 如需进行页面响应式开发（针对移动设备），需要在html中加入<meta>标记，\r\n     *                      并需要在构造Viewer时，加入此参数\r\n     */\r\n    constructor(containerDOMElem, opt) {\r\n        super();\r\n        // DOM container\r\n        this.container = containerDOMElem;\r\n        var width = this.container.width;\r\n        var height = this.container.height;\r\n\r\n        // CAM\r\n        this.camera = new THREE.PerspectiveCamera(30, width / height, 0.1, INIT_MAX_SCOPE * 2000);\r\n\r\n        if (opt.camera) {\r\n            this.camera.position.set(opt.camera.pos.x, opt.camera.pos.y, opt.camera.pos.z);\r\n        } else {\r\n            this.camera.position.set(1000, 1000, 300); // 默认的相机位置\r\n        }\r\n\r\n        // model manager\r\n        this._modelManager = new ModelManager();\r\n        this._modelManager.builtin.sky.visible = !!opt.sky;\r\n        this._modelManager.builtin.ground.visible = !!opt.ground;\r\n        this._modelManager.builtin.axes.visible = !!opt.axes;\r\n        // scenes manager\r\n        this._sceneManager = new SceneManager(this._modelManager);\r\n        this._decorationManager = new DecorationManager(this.container);\r\n\r\n        // RENDERER\r\n        opt = opt || {};\r\n        opt.width = width;\r\n        opt.height = height;\r\n        opt.sceneManager = this._sceneManager;\r\n        opt.modelManager = this._modelManager;\r\n        opt.decorationManager = this._decorationManager;\r\n        opt.camera = this.camera;\r\n        opt.container = this.container;\r\n        this._renderer = new Renderer(opt);\r\n        var lastDrawObjectsNum = 0;\r\n        this._renderer.addEventListener(\"RENDER_ALL\", e => {\r\n            if (lastDrawObjectsNum != this._modelManager.all.length) {\r\n                lastDrawObjectsNum = this._modelManager.all.length;\r\n                e.info.objects = lastDrawObjectsNum;\r\n                console.groupCollapsed(`绘制完毕：${e.info.triangles}/${e.info.objects}`);\r\n                console.table([e.info], [\r\n                    \"objects\",\r\n                    \"geometries\",\r\n                    \"triangles\",\r\n                    \"textures\",\r\n                    \"frame\"\r\n                ]);\r\n                console.groupEnd();\r\n            }\r\n        });\r\n        this.rebuild_delay = 10000; // ms\r\n        this._renderer.start();\r\n\r\n        this._modelManager.addEventListener(\"LOAD_FINISH\", e => {\r\n            try {\r\n                this.dispatchEvent(e);\r\n            } catch (e) { }\r\n            // 重置场景：重新排序，并在下一次重绘时按新次序重新生成帧（场景）\r\n            this.rebuild(true, false);\r\n            // this.redraw();\r\n        });\r\n        this._modelManager.addEventListener(\"MODEL_ADD_OBJECT\", e => {\r\n            try {\r\n                this.dispatchEvent(e);\r\n            } catch (e) { }\r\n            // 重置场景：重新排序，并在下一次重绘时按新次序重新生成帧（场景）\r\n            this.rebuild(false, false);\r\n        });\r\n        this._modelManager.addEventListener(\"LOAD_CHUNK_FINISH\", e => {\r\n            // 目前一个chunk就是一个对象\r\n            if (e.index % Math.min(Math.round(e.count / 5), 2000) == 0) {\r\n                let orgdelay = this.rebuild_delay;\r\n                this.rebuild_delay = 5000;\r\n                this.rebuild();\r\n                this.rebuild_delay = orgdelay;\r\n            }\r\n            try {\r\n                this.dispatchEvent(e);\r\n            } catch (e) { }\r\n        });\r\n        this._modelManager.addEventListener(\"MODEL_BOUNDARY_CHANGE\", e => {\r\n            // 重置相机和交互控制器的范围\r\n            // TODO: 需完善更多需要更新的状态\r\n            var sz = new THREE.Vector3();\r\n            this._modelManager.BoundingBox.getSize(sz);\r\n            var maxDim = Math.max(sz.x, sz.y, sz.z);\r\n            this.camera.far = 2000 * maxDim;\r\n            if (!!this.Controller)\r\n                this.Controller.maxDistance = 50 * maxDim;\r\n        });\r\n\r\n    }\r\n\r\n    redraw(debugMsg = \"\") {\r\n        this._renderer.redraw(debugMsg);\r\n    }\r\n    rebuild(immediately = false, redraw = true) {\r\n        if (!!this._timeoutID) {\r\n            clearTimeout(this._timeoutID);\r\n        }\r\n        var rebfn = () => {\r\n            console.debug('重新排序，并重置帧（场景）信息')\r\n            var b;\r\n            if (!!this.ClipBox && this.ClipBox.active)\r\n                b = this.ClipBox.CurrentBox;\r\n            this._modelManager.resort(b);\r\n            this._sceneManager.reset();\r\n            delete this._timeoutID;\r\n            if (redraw) this.redraw(\"rebuild\");\r\n        };\r\n        if (immediately) rebfn();\r\n        else this._timeoutID = setTimeout(rebfn, this.rebuild_delay);\r\n    }\r\n\r\n    look(opt/*{pos, target/dir, redraw [optional]}*/) {\r\n        function fixV(v) {\r\n            if (v.isVector3) return v;\r\n            if (Array.isArray(v))\r\n                return new THREE.Vector3(...v);\r\n            return new THREE.Vector3(v.x, v.y, v.z);\r\n        }\r\n        if (!!opt.pos) opt.pos = fixV(opt.pos);\r\n        if (!opt.target) {\r\n            opt.target = new THREE.Vector3;\r\n            var b = this.CurrentBoundingBox;\r\n            if (!!b) {\r\n                var c = new THREE.Vector3;\r\n                b.getCenter(c);\r\n                if (!!opt.dir && !!opt.pos) {\r\n                    opt.dir = fixV(opt.dir);\r\n                    opt.dir.normalize();\r\n                    c.sub(opt.pos);\r\n                    c.projectOnVector(opt.dir);\r\n                    opt.target.addVectors(opt.pos, c);\r\n                } else {\r\n                    opt.target.copy(c);\r\n                }\r\n            }\r\n        } else\r\n            opt.target = fixV(opt.target);\r\n        if (!!opt.pos) {\r\n            this.camera.position.set(opt.pos.x, opt.pos.y, opt.pos.z);\r\n        }\r\n        if (!!this.Controller) {\r\n            this.Controller.target.set(opt.target.x, opt.target.y, opt.target.z);\r\n            this.Controller.update();\r\n        } else {\r\n            this.camera.lookAt(opt.target.x, opt.target.y, opt.target.z);\r\n            this.camera.updateProjectionMatrix();\r\n        }\r\n        if (!!opt.redraw)\r\n            this.redraw(\"calling \\\"look\\\"\");\r\n    }\r\n\r\n    getViewInfo() {\r\n        return {\r\n            pos: this.camera.position.toArray(),\r\n            target: this.Controller.target.toArray()\r\n        };\r\n    }\r\n\r\n    fitToView(box = null) {\r\n        if (!box) {\r\n            if (!!this.Selection && this.Selection.Current.size > 0) {\r\n                box = new THREE.Box3();\r\n                for (var o of this.Selection.Current) {\r\n                    box.expandByObject(o);\r\n                }\r\n            } else {\r\n                box = this.CurrentBoundingBox;\r\n            }\r\n        }\r\n        if (!box) return;\r\n        var arg = { pos: this.camera.position.clone(), target: new THREE.Vector3() };\r\n        box.getCenter(arg.target);\r\n        var dir = new THREE.Vector3();\r\n        this.camera.getWorldDirection(dir);\r\n        // 平移相机，对准模型中心\r\n        var vMove = new THREE.Vector3();\r\n        vMove.subVectors(arg.target, arg.pos);\r\n        var vDist = vMove.clone();\r\n        vDist.projectOnVector(dir);\r\n        vMove.sub(vDist);\r\n        arg.pos.add(vMove);\r\n        // 前后调整相机，以便投影整个模型\r\n        // 计算视图坐标系的横纵轴方向\r\n        var up = this.camera.up.clone();\r\n        up.projectOnPlane(dir);\r\n        up.normalize();\r\n        if (up.length() < 0.01) {\r\n            up.set(Math.cos(this.camera.rotation.z),\r\n                Math.sin(this.camera.rotation.z));\r\n        }\r\n        var left = new THREE.Vector3();\r\n        left.crossVectors(up, dir);\r\n        // 计算双向视角\r\n        var tanV = Math.tan(this.camera.fov / 2 / 180 * Math.PI);\r\n        var tanH = this.camera.aspect * tanV;\r\n        // 计算每个点位于边界时的中心点距离，并取最远的一个\r\n        var lt = 0;\r\n        for (var i = 0; i < 8; i++) {\r\n            var p = new THREE.Vector3();\r\n            if (i < 4) p.x = box.min.x; else p.x = box.max.x;\r\n            if (Math.floor(i / 2) % 2 > 0) p.y = box.max.y; else p.y = box.min.y;\r\n            if (i % 2 > 0) p.z = box.max.z; else p.z = box.min.z;\r\n            p.sub(arg.target);\r\n            var l = Math.max(\r\n                Math.abs(p.dot(up) / tanV),\r\n                Math.abs(p.dot(left) / tanH))\r\n                - p.dot(dir);\r\n            if (lt < l) {\r\n                lt = l;\r\n            }\r\n        }\r\n        dir.setLength(lt * 1.1);\r\n        arg.pos.subVectors(arg.target, dir)\r\n        this.look(arg);\r\n    }\r\n\r\n    resize(width, height) {\r\n        if (width > 0 && height > 0) {\r\n            this.container.width = width;\r\n            this.container.height = height;\r\n        }\r\n        else {\r\n            width = this.container.width;\r\n            height = this.container.height;\r\n        }\r\n\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        this._renderer.setSize(width, height, true);\r\n        this.redraw();\r\n    }\r\n\r\n    get DefaultModelName() {\r\n        return DEFAULT_MODEL_NAME;\r\n    }\r\n\r\n    load(model_url, ...args) {\r\n        var fn_mesh_callback;\r\n        var model_name = this.DefaultModelName;\r\n        var edge_url = null;\r\n        args.forEach(arg => {\r\n            switch (typeof (arg)) {\r\n                case 'function':\r\n                    fn_mesh_callback = arg;\r\n                    break;\r\n                case 'string':\r\n                    model_name = arg;\r\n                    break;\r\n                case 'object':\r\n                    edge_url = arg.edge;\r\n                    if ('model' in arg)\r\n                        model_name = arg.model;\r\n                    break;\r\n            }\r\n        });\r\n        this._modelManager.loadGLTF(model_name,\r\n            model_url, m => {\r\n                if (!fn_mesh_callback)\r\n                    return true;\r\n                return fn_mesh_callback(m);\r\n            }, edge_url);\r\n    }\r\n\r\n    add(o, modelName) {\r\n        if (!modelName)\r\n            modelName = this.DefaultModelName;\r\n        this._modelManager.add(modelName, o);\r\n    }\r\n\r\n    pick(clientPos, onPick, objsToPick, ignoreHiden = true) {\r\n        if (!objsToPick)\r\n            objsToPick = this._modelManager.segments_group.children;\r\n        else if (objsToPick.isObject3D)\r\n            objsToPick = [objsToPick];\r\n        var canvas = this._renderer.domElement;\r\n        var rect = canvas.getBoundingClientRect();\r\n        var pos = new THREE.Vector2(clientPos.x, clientPos.y);\r\n        pos.x = (pos.x / (rect.right - rect.left)) * 2 - 1;\r\n        pos.y = -(pos.y / (rect.bottom - rect.top)) * 2 + 1;\r\n\r\n        var raycaster = new THREE.Raycaster();\r\n        raycaster.setFromCamera(pos, this.camera);\r\n        var objs = raycaster.intersectObjects(objsToPick, true);\r\n        ////////////////////////\r\n        // 内置过滤\r\n        var clips = null, bIntersect = false;\r\n        if (!!this.Selection) {\r\n            clips = this.Selection.HighlightMaterial.clippingPlanes;\r\n            bIntersect = this.Selection.HighlightMaterial.clipIntersection;\r\n        }\r\n        objs = objs.filter(o => {\r\n            if (!o.object.Selectable) return false;\r\n            if (!ignoreHiden) return true;\r\n            if (!o.object.visible)\r\n                return false;\r\n            if (!!clips && clips.length > 0) {\r\n                var bAll = true;\r\n                for (var i = 0; i < clips.length; i++) {\r\n                    var clip = clips[i];\r\n                    if (o.point.dot(clip.normal) < -clip.constant) {\r\n                        if (!bIntersect) return false;\r\n                    } else if (bIntersect) {\r\n                        bAll = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (bAll && bIntersect)\r\n                    return false;\r\n            }\r\n            return true;\r\n        });\r\n        ////////////////////////\r\n        var i = 0;\r\n        if (!!onPick) {\r\n            var cnt = objs.length;\r\n            for (; i < cnt; i++) {\r\n                var ret = onPick(objs[i]);\r\n                if (ret === undefined || !!ret)\r\n                    break;\r\n            }\r\n        }\r\n        return objs[i];\r\n    }\r\n    get Renderer() {\r\n        return this._renderer;\r\n    }\r\n    get ModelManager() {\r\n        return this._modelManager;\r\n    }\r\n    get SceneManager() {\r\n        return this._sceneManager;\r\n    }\r\n    get DecorationManager() {\r\n        return this._decorationManager;\r\n    }\r\n    get LightManager() {\r\n        return this._modelManager.lights;\r\n    }\r\n    get CurrentBoundingBox() {\r\n        if (!!this.ClipBox && this.ClipBox.active)\r\n            return this.ClipBox.CurrentBox;\r\n        else\r\n            return this._modelManager.BoundingBox.clone();\r\n    }\r\n}\r\n\r\nexport { Viewer };","import * as THREE from \"three\";\r\n\r\n// import { Events } from \"../Events\";\r\nimport { ObservedSet } from \"../utils/observed_set\"\r\n\r\nconst PRIVATE = {\r\n    \"HLMATERIAL\": Symbol(\"EG_HLMATERIAL\"),\r\n    \"OPACITY\": Symbol(\"EG_OPACITY\"),\r\n    \"DYEING\": Symbol(\"EG_DYEING\"),\r\n    \"TRANSPARENT\": Symbol(\"EG_TRANSPARENT\"),\r\n    \"VISIBLE\": Symbol(\"EG_VISIBLE\"),\r\n    \"FN_TRANS_MAT\": Symbol(\"EG_FN_TRANSPARENT_MAT\"),\r\n    \"FN_TRANS_OBJ\": Symbol(\"EG_FN_TRANS_OBJ\"),\r\n    \"FN_DYE_OBJ\": Symbol(\"EG_FN_DYE_OBJ\"),\r\n    \"EG_EXCLUSIVE\": Symbol(\"EG_EXCLUSIVE\"),\r\n}\r\n\r\nclass ElementGroup extends ObservedSet {\r\n    constructor(...args) {\r\n        let init_elems = args;\r\n        if (args.length == 1 && Array.isArray(args[0]))\r\n            init_elems = args[0];\r\n        var init_exclude = true;\r\n        if (typeof (init_elems[0]) == \"boolean\") {\r\n            init_exclude = init_elems.shift();\r\n        }\r\n        super(init_elems);\r\n\r\n        this[PRIVATE.HLMATERIAL] =\r\n            new THREE.MeshLambertMaterial({ color: 0x880000 });\r\n        this[PRIVATE.HLMATERIAL].transparent = true;\r\n        this[PRIVATE.HLMATERIAL].opacity = 0.8;\r\n        this[PRIVATE.HLMATERIAL].clipShadows = true;\r\n        this[PRIVATE.OPACITY] = 1.0; // 完全不透明\r\n        this[PRIVATE.EG_EXCLUSIVE] = init_exclude;\r\n        this[PRIVATE.TRANSPARENT] = false;\r\n        this[PRIVATE.DYEING] = false;\r\n        this[PRIVATE.VISIBLE] = true;\r\n\r\n        this.trans_mat_map = new Map();\r\n\r\n        var onAdd = o => {\r\n            if (!o.elgroups) o.elgroups = new Set();\r\n            if (this[PRIVATE.EG_EXCLUSIVE]) {\r\n                let gs = [...o.elgroups];\r\n                gs.forEach(g => g.delete(o));\r\n                console.assert(o.elgroups.size == 0,\r\n                    \"ElementGroup未能正常执行排他处理！\");\r\n            }\r\n            o.elgroups.add(this);\r\n            // 优先级：隐藏 > 染色 > 透明\r\n            this[PRIVATE.FN_TRANS_OBJ](o);\r\n            this[PRIVATE.FN_DYE_OBJ](o);\r\n            o.visible = this.Visible;\r\n        }\r\n        init_elems.forEach(onAdd);\r\n\r\n        this.addEventListener(\"OSET_ADDED\", e => {\r\n            onAdd(e.object);\r\n        });\r\n        this.addEventListener(\"OSET_DELETED\", e => {\r\n            let o = e.object;\r\n            let dyeing = this[PRIVATE.DYEING];\r\n            let transparent = this[PRIVATE.TRANSPARENT];\r\n            this[PRIVATE.DYEING] = false;\r\n            this[PRIVATE.TRANSPARENT] = false;\r\n            this[PRIVATE.FN_DYE_OBJ](o);\r\n            this[PRIVATE.FN_TRANS_OBJ](o);\r\n            o.visible = true;\r\n            this[PRIVATE.DYEING] = dyeing;\r\n            this[PRIVATE.TRANSPARENT] = transparent;\r\n            o.elgroups.delete(this);\r\n        });\r\n    }\r\n    static [PRIVATE.FN_TRANS_MAT](mat, opacity) {\r\n        mat.opacity = opacity;\r\n        mat.transparent = (opacity < 1.0);\r\n    }\r\n    [PRIVATE.FN_TRANS_OBJ](o) {\r\n        if (this.isTransparent) {\r\n            if (!o.originMat) {\r\n                o.originMat = o.material;\r\n            }\r\n            if (o.material != o.originMat && o.material != this[PRIVATE.HLMATERIAL]) {\r\n                if (Array.isArray(o.material))\r\n                    o.material.forEach(m => m.dispose());\r\n                else\r\n                    o.material.dispose();\r\n            }\r\n            var clone_mat = (m) => {\r\n                var newMat = this.trans_mat_map.get(m.uuid);\r\n                if (!newMat) {\r\n                    newMat = m.clone();\r\n                    ElementGroup[PRIVATE.FN_TRANS_MAT](newMat, this[PRIVATE.OPACITY]);\r\n                    this.trans_mat_map.set(m.uuid, newMat);\r\n                }\r\n                return newMat;\r\n            };\r\n            var mat = o.originMat;\r\n            if (Array.isArray(mat)) {\r\n                mat = mat.map(clone_mat);\r\n            } else {\r\n                mat = clone_mat(mat);\r\n            }\r\n            o.material = mat;\r\n        } else {\r\n            if (!!o.originMat) {\r\n                o.material = o.originMat;\r\n                delete o.originMat;\r\n            } else {\r\n                console.debug(\"ElementGroup: Transparent status error. object was't set to be transparent!\");\r\n            }\r\n        }\r\n    }\r\n    [PRIVATE.FN_DYE_OBJ](o) {\r\n        if (this.isDyeing) {\r\n            if (!o.originMat) {\r\n                o.originMat = o.material;\r\n            }\r\n            o.material = this[PRIVATE.HLMATERIAL];\r\n            // 此处将被染色物体的剖切状态用于染色的材质，但无法支持复杂剖切情况，如同时使用复杂剖切，结果不可预料\r\n            var mat = Array.isArray(o.originMat) ? o.originMat[0] : o.originMat;\r\n            this[PRIVATE.HLMATERIAL].set_clip_planes(mat.clippingPlanes, mat.clipIntersection);\r\n        } else if (!this.isTransparent) {\r\n            if (!!o.originMat) {\r\n                o.material = o.originMat;\r\n                delete o.originMat;\r\n            } else {\r\n                console.debug(\"ElementGroup: Dye status error. object was't dyed!\");\r\n            }\r\n        }\r\n    }\r\n    get Exclusive() {\r\n        return this[PRIVATE.EG_EXCLUSIVE];\r\n    }\r\n    set Exclusive(v) {\r\n        this[PRIVATE.EG_EXCLUSIVE] = v;\r\n    }\r\n    // 染色\r\n    Dye(bSet = true) {\r\n        this[PRIVATE.DYEING] = bSet;\r\n        this.forEach(o => this[PRIVATE.FN_DYE_OBJ](o));\r\n        if (!bSet && this.isTransparent) {\r\n            this.forEach(o => this[PRIVATE.FN_TRANS_OBJ](o));\r\n        }\r\n    }\r\n    get DyeColor() {\r\n        return this[PRIVATE.HLMATERIAL].color;\r\n    }\r\n    set DyeColor(v) {\r\n        if (v.isColor) {\r\n            this[PRIVATE.HLMATERIAL].color = v;\r\n            return;\r\n        }\r\n        this[PRIVATE.HLMATERIAL].color.set(v);\r\n    }\r\n    get DyeOpacity() {\r\n        return this[PRIVATE.HLMATERIAL].opacity;\r\n    }\r\n    set DyeOpacity(v) {\r\n        ElementGroup[PRIVATE.FN_TRANS_MAT](this[PRIVATE.HLMATERIAL], v);\r\n    }\r\n    get isDyeing() {\r\n        return this[PRIVATE.DYEING];\r\n    }\r\n    get HighlightMaterial() {\r\n        return this[PRIVATE.HLMATERIAL];\r\n    }\r\n    // 透明\r\n    ShowTransparent(bSet = true) {\r\n        this[PRIVATE.TRANSPARENT] = bSet;\r\n        if (this.isDyeing) return;\r\n        this.forEach(o => this[PRIVATE.FN_TRANS_OBJ](o));\r\n    }\r\n    get Opacity() {\r\n        return this[PRIVATE.OPACITY];\r\n    }\r\n    set Opacity(v) {\r\n        this[PRIVATE.OPACITY] = v;\r\n        this.trans_mat_map.forEach(m => {\r\n            ElementGroup[PRIVATE.FN_TRANS_MAT](m, v);\r\n        });\r\n    }\r\n    get isTransparent() {\r\n        return this[PRIVATE.TRANSPARENT];\r\n    }\r\n    // 隐藏/显示\r\n    get Visible() {\r\n        return this[PRIVATE.VISIBLE];\r\n    }\r\n    set Visible(v) {\r\n        this[PRIVATE.VISIBLE] = v;\r\n        this.forEach(o => o.visible = v);\r\n    }\r\n    // 根据构件ID集合构造\r\n    static fromIDs(model_manager, idsArray) {\r\n        var idset = new Set(idsArray);\r\n        var set = new ElementGroup();\r\n        idset.forEach(id => {\r\n            set.add(model_manager.getItem(id));\r\n        });\r\n        return set;\r\n    }\r\n}\r\n\r\nexport { ElementGroup };\r\n","import * as THREE from \"three\";\r\nimport { NamedArray } from \"../utils/named_array\";\r\nimport { Events } from \"../Events\";\r\n\r\n\r\n// 模型管理类\r\nclass LightManager extends NamedArray {\r\n    constructor() {\r\n        super(null, []);\r\n        this._builtInNames.push(\"Ambient\");\r\n        this._builtInNames.push(\"Hemisphere\");\r\n        this._builtInNames.push(\"Directional\");\r\n        this.add(\"Ambient\", THREE.AmbientLight, 0xffffff, 0.8);\r\n        this.add(\"Hemisphere\", THREE.HemisphereLight, 0xffffff, 0xffffff, 0);\r\n        this.add(\"Directional\", THREE.DirectionalLight, 0xffffff, 0.8);\r\n        this.Directional.castShadow = false;\r\n        this.Directional.shadow.mapSize.width = 2048;\r\n        this.Directional.shadow.mapSize.height = 2048;\r\n        var d = 100000;\r\n        this.Directional.shadow.camera.left = - d;\r\n        this.Directional.shadow.camera.right = d;\r\n        this.Directional.shadow.camera.top = d;\r\n        this.Directional.shadow.camera.bottom = - d;\r\n        this.Directional.shadow.camera.far = d;\r\n        this.Directional.shadow.camera.near = 0.1;\r\n        this.Directional.shadow.bias = - 0.0001;\r\n        // 平行光源默认位置\r\n        this.setSunLightDirection(5000, 5000, 7000);\r\n    }\r\n    setSunLightDirection(...sunPos) {\r\n        if (!sunPos) return;\r\n        var newpos = new THREE.Vector3();\r\n        // TODO：研究Hemisphere光源的Position属性的作用\r\n        if (!!sunPos[0].x) {\r\n            function fix(v) {\r\n                return typeof (v) != 'number' ? 0 : v;\r\n            }\r\n            sunPos[0].x = fix(sunPos[0].x);\r\n            sunPos[0].y = fix(sunPos[0].y);\r\n            sunPos[0].z = fix(sunPos[0].z);\r\n            newpos.copy(sunPos[0]);\r\n        } else {\r\n            newpos.set(...sunPos);\r\n        }\r\n        this.Hemisphere.position.copy(newpos);\r\n        this.Directional.position.copy(newpos);\r\n        this.events.dispatchEvent(Events.SUN_LIGHT_POS_CHANGED(newpos));\r\n    }\r\n    _changeSunDir(dimName, value) {\r\n        var newpos = new THREE.Vector3();\r\n        this.getSunLightPosition(newpos);\r\n        newpos[dimName] = value;\r\n        this.setSunLightDirection(newpos);\r\n    }\r\n    set SunLightDirX(v) {\r\n        this._changeSunDir('x', v);\r\n    }\r\n    set SunLightDirY(v) {\r\n        this._changeSunDir('y', v);\r\n    }\r\n    set SunLightDirZ(v) {\r\n        this._changeSunDir('z', v);\r\n    }\r\n    set SunLightAngle(a) {\r\n        this.SunLightDirX = 10000 * Math.cos(a * Math.PI / 180);\r\n        this.SunLightDirY = 10000 * Math.sin(a * Math.PI / 180);\r\n    }\r\n    get SunLightDirX() {\r\n        return this.Directional.position.x;\r\n    }\r\n    get SunLightDirY() {\r\n        return this.Directional.position.y;\r\n    }\r\n    get SunLightDirZ() {\r\n        return this.Directional.position.z;\r\n    }\r\n    get SunLightAngle() {\r\n        if (Math.abs(this.SunLightDirX) > 0) {\r\n            let a = Math.atan(this.SunLightDirY\r\n                / this.SunLightDirX) * 180 / Math.PI;\r\n            if (a * this.SunLightDirY < 0) a += 180;\r\n            if (a > 360) a -= 360;\r\n            return a;\r\n        }\r\n        else\r\n            return this.SunLightDirY > 0 ? 90 : -90;\r\n    }\r\n    getSunLightPosition(posBuf) {\r\n        posBuf.x = this.Directional.position.x;\r\n        posBuf.y = this.Directional.position.y;\r\n        posBuf.z = this.Directional.position.z;\r\n    }\r\n\r\n    get events() {\r\n        if (!this._events)\r\n            this._events = new THREE.EventDispatcher();\r\n        return this._events;\r\n    }\r\n    addEventListener(...params) {\r\n        this.events.addEventListener(...params);\r\n    }\r\n    removeEventListener(...params) {\r\n        this.events.removeEventListener(...params);\r\n    }\r\n}\r\n\r\nexport { LightManager };\r\n","import { WorkerPool, WorkerFactories } from './worker_pool'\r\nimport {\r\n    LoaderUtils,\r\n    BufferGeometry,\r\n    Float32BufferAttribute,\r\n    LineBasicMaterial,\r\n    LineSegments\r\n} from 'three';\r\n\r\nclass EdgeLoader {\r\n    constructor() {\r\n        this.loader_worker_pool = new WorkerPool(WorkerFactories.LOADER, 1);\r\n        this.loaded_cbs = new Map;\r\n        this.chunk_colors = new Map;\r\n        this.loader_worker_pool.onmessage = e => {\r\n            var url = e.data.url;\r\n            var fnCallbacks = this.loaded_cbs.get(url);\r\n            if (!fnCallbacks) return;\r\n            var color = this.chunk_colors.get(url);\r\n            if (!color) color = 0x9999bb;\r\n            switch (e.data.type) {\r\n                case \"loading\":\r\n                    if (!!fnCallbacks.loading) {\r\n                        fnCallbacks.loading(url,\r\n                            e.data.download_info.loaded,\r\n                            e.data.download_info.total);\r\n                    }\r\n                    break;\r\n                case \"loaded\":\r\n                    var jsonEdges = null;\r\n                    jsonEdges = JSON.parse(LoaderUtils.decodeText(e.data.data_buffer));\r\n                    if (!('edges' in jsonEdges)) jsonEdges.edges = jsonEdges.borders;\r\n                    var material = null;\r\n                    if (color.isMaterial)\r\n                        material = color;\r\n                    else\r\n                        material = new LineBasicMaterial({ color: color });\r\n                    jsonEdges.edges.forEach(B => {\r\n                        var geometry = new BufferGeometry();\r\n                        geometry.setIndex(B.index);\r\n                        geometry.setAttribute('position',\r\n                            new Float32BufferAttribute(B.vertices, 3));\r\n                        var linesEdge = new LineSegments(geometry, material);\r\n                        linesEdge.uuid = B.uuid;\r\n                        fnCallbacks.chunk(linesEdge);\r\n                    });\r\n                    break;\r\n                case \"load_error\":\r\n                    if (!!fnCallbacks.error) {\r\n                        fnCallbacks.error(e.data.error);\r\n                    } else {\r\n                        console.error(e.data.error);\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n    }\r\n    load(url, onDownload, onLoadChunk, onError = null, mat = 0x9999bb) {\r\n        this.loaded_cbs.set(url, {\r\n            loading: onDownload,\r\n            chunk: onLoadChunk,\r\n            error: onError\r\n        });\r\n        this.chunk_colors.set(url, mat);\r\n        this.loader_worker_pool.run_a_worker({\r\n            url: url\r\n        });\r\n    }\r\n}\r\n\r\nexport { EdgeLoader };\r\n","import { ObjectLoader, LoaderUtils } from 'three';\r\nimport { WorkerPool, WorkerFactories } from './worker_pool'\r\n\r\nclass GLTFLoaderEx {\r\n    constructor() {\r\n        // 场景文件加载线程\r\n        // 只创建一个场景文件加载线程，多个索引文件将排队\r\n        this.loader_worker_pool = new WorkerPool(WorkerFactories.LOADER, 2);\r\n        this.parser_worker_pool = new WorkerPool(WorkerFactories.PARSER);\r\n        this.loaded_cbs = new Map;\r\n        this.chunk_count = new Map;\r\n\r\n        this.loader_worker_pool.onmessage = e => {\r\n            var url = e.data.url;\r\n            var fnCallbacks = this.loaded_cbs.get(url);\r\n            if (!fnCallbacks) return;\r\n            switch (e.data.type) {\r\n                case \"loading\":\r\n                    fnCallbacks.loading(url,\r\n                        e.data.download_info.loaded,\r\n                        e.data.download_info.total);\r\n                    break;\r\n                case \"loaded\":\r\n                    delete e.data.type;\r\n                    var url_base = LoaderUtils.extractUrlBase(url);\r\n                    var arrData = new Uint8Array(e.data.data_buffer);\r\n                    switch (arrData[0]) {\r\n                        case 91: // '['\r\n                            var gltf_urls = JSON.parse((new TextDecoder()).decode(arrData));\r\n                            for (var gltfurl of gltf_urls) {\r\n                                this.load(url_base + gltfurl,\r\n                                    fnCallbacks.loading,\r\n                                    fnCallbacks.chunk,\r\n                                    fnCallbacks.error);\r\n                            }\r\n                            break;\r\n                        case 123: // '{'\r\n                            e.data.gltf_data = e.data.data_buffer;\r\n                            delete e.data.data_buffer;\r\n                            this.parser_worker_pool.run_a_worker(\r\n                                e.data, // {url, gltf_data}\r\n                                [e.data.gltf_data]);\r\n                            break;\r\n                    }\r\n                    break;\r\n                case \"load_error\":\r\n                    if (!!fnCallbacks.error) {\r\n                        fnCallbacks.error(e.data.error);\r\n                    } else {\r\n                        console.error(e.data.error);\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n        // 场景解析线程\r\n        this.parser_worker_pool.onmessage = e => {\r\n            var { type, url, chunk } = e.data;\r\n            var fnCallbacks = this.loaded_cbs.get(url);\r\n            if (!fnCallbacks) return;\r\n            var count = this.chunk_count.get(url);\r\n            switch (type) {\r\n                case \"count\":\r\n                    this.chunk_count.set(url, count + e.data.count);\r\n                    break;\r\n                case \"chunk\":\r\n                    var loader = new ObjectLoader();\r\n                    var threeScene = loader.parse(chunk);\r\n                    fnCallbacks.chunk(threeScene, url, count);\r\n                    break;\r\n            }\r\n        };\r\n    }\r\n    load(url, onDownload, onLoadChunk, onError) {\r\n        this.loaded_cbs.set(url, {\r\n            loading: onDownload,\r\n            chunk: onLoadChunk,\r\n            error: onError\r\n        });\r\n        this.chunk_count.set(url, 0);\r\n        this.loader_worker_pool.run_a_worker({\r\n            url: url\r\n        });\r\n    }\r\n}\r\n\r\nexport { GLTFLoaderEx };","let WorkerFactories = {\r\n    LOADER() {\r\n        return new Worker(new URL(\r\n            /* webpackChunkName: 'worker.loader' */\r\n            './worker_loader',\r\n            import.meta.url\r\n        ));\r\n    },\r\n    PARSER() {\r\n        return new Worker(new URL(\r\n            /* webpackChunkName: 'worker.parser' */\r\n            './worker_parser',\r\n            import.meta.url\r\n        ));\r\n    }\r\n};\r\n\r\n// TODO: 在WorkerFactory类中考虑worker的最终释放\r\nclass WorkerPool {\r\n    // constructor(WorkerClass, max) {\r\n    constructor(worker_factory, max) {\r\n        this.maxWorkers = max ? max : 4;\r\n        this.workers = [];\r\n        this.onmessage = null;\r\n\r\n        for (var i = 0; i < this.maxWorkers; i++) {\r\n            this.workers.push(worker_factory());\r\n        }\r\n        var scopt = this;\r\n        this.workers.forEach(w => {\r\n            w.jobs = 0;\r\n            w.onmessage = (msg => {\r\n                if (msg.data.type == \"done\") {\r\n                    w.jobs--;\r\n                } else {\r\n                    if (!!scopt.onmessage)\r\n                        scopt.onmessage(msg);\r\n                }\r\n            })\r\n        });\r\n    }\r\n    run_a_worker(param, blob_to_worker/* arraybuffer */) {\r\n        var select, cnt = -1;;\r\n        for (var i in this.workers) {\r\n            var w = this.workers[i];\r\n            if (cnt < 0 || cnt > w.jobs) {\r\n                cnt = w.jobs;\r\n                select = w;\r\n            }\r\n        }\r\n        select.jobs++;\r\n        select.postMessage(param, blob_to_worker);\r\n    }\r\n}\r\n\r\nexport { WorkerPool, WorkerFactories }","import * as THREE from \"three\";\r\n//import { Sky } from \"three/examples/jsm/objects/Sky\";\r\nimport { Sky } from \"./sky\";\r\n\r\nimport { NamedArray } from \"../utils/named_array\";\r\nimport { EdgeLoader } from \"./loader/edgeloader\";\r\nimport { GLTFLoaderEx } from \"./loader/gltfloader_ex\";\r\nimport { LightManager } from \"./light_manager\"\r\nimport { Events } from \"../Events\";\r\nimport { ElementGroup } from \"./element_group\";\r\n\r\n\r\n// 模型管理类\r\nclass ModelManager extends THREE.EventDispatcher {\r\n    constructor() {\r\n        super();\r\n        this.builtin = new NamedArray(); // 包含场景所需的所有的内置元素\r\n        this.builtin.add(\"axes\", THREE.AxesHelper, 1);\r\n        this.builtin.add(\"sky\", Sky);\r\n        var hexGroundAxisColor = 0xffdddd, hexGroundColor = 0xffffff;\r\n        this.builtin.add(\"ground\", THREE.GridHelper, 100000, 10000,\r\n            hexGroundAxisColor, hexGroundColor);\r\n        this.builtin.axes.scale.setScalar(1);\r\n        this.builtin.sky.scale.setScalar(100000);\r\n        this.builtin.sky.material.uniforms.luminance.value = 0.9;\r\n        this.builtin.ground.rotation.x = Math.PI / 2;\r\n        this.builtin.ground.material.transparent = true;\r\n        this.builtin.ground.material.opacity = 0.4;\r\n\r\n        // 模型元素管理\r\n        this.segments_group = new THREE.Group(); // 包含除builtin以外，所有需要渲染的模型元素，用于拾取操作\r\n        this.segments_not_transparent = []; // 渲染时先绘制不透明元素\r\n        this.segments_transparent = []; // 后渲染透明元素\r\n        // 多模型管理\r\n        this.models = new NamedArray(Array);\r\n\r\n        var scope = this;\r\n        this.lights = new LightManager(); // 包含添加到所有场景中的灯光\r\n        function set_sun_pos(...p) {\r\n            if (typeof (p[0]) == \"number\") {\r\n                p = { x: p[0], y: p[1], z: p[2] };\r\n            } else if ('x' in p[0]) {\r\n                p = { x: p[0].x, y: p[0].y, z: p[0].z };\r\n            } else {\r\n                throw \"平行光源位置参数错误！\";\r\n            }\r\n            scope.builtin.sky.material.uniforms.sunPosition.value.x = p.x;\r\n            scope.builtin.sky.material.uniforms.sunPosition.value.y = p.y;\r\n            scope.builtin.sky.material.uniforms.sunPosition.value.z = p.z;\r\n        }\r\n        this.lights.addEventListener(\"SUN_LIGHT_POS_CHANGED\", e => {\r\n            set_sun_pos(e.pos);\r\n        });\r\n        set_sun_pos(this.lights.SunLightDirX, this.lights.SunLightDirY,\r\n            this.lights.SunLightDirZ);\r\n\r\n        this._obj_id_map = new Map();\r\n        this._edge_id_map = new Map();\r\n        this._obj_mat_map = new Map();\r\n\r\n        this.addEventListener(\"MODEL_BOUNDARY_CHANGE\", e => {\r\n            this._updateGroundSizeByBoundary();\r\n        });\r\n    }\r\n\r\n    setGroundSize(size) {\r\n        this.builtin.ground.geometry.dispose();\r\n        var hexGroundAxisColor = 0xffdddd, hexGroundColor = 0xffffff;\r\n        var cnt = Math.floor(size / 32.8); // 单位英尺\r\n        if (cnt % 2 != 0) cnt += 1;\r\n        if (cnt < 2) cnt = 2;\r\n        this.builtin.ground.geometry = (new THREE.GridHelper(\r\n            size, cnt, hexGroundAxisColor, hexGroundColor\r\n        )).geometry;\r\n    }\r\n\r\n    _updateGroundSizeByBoundary() {\r\n        var size = new THREE.Vector3(), center = new THREE.Vector3();\r\n        this.segments_group.BoundingBox.getSize(size);\r\n        size = Math.max(size.x, size.y) * 1.2;\r\n        this.segments_group.BoundingBox.getCenter(center);\r\n        this.builtin.ground.position.copy(center);\r\n        this.builtin.ground.position.z = 0;\r\n        this.setGroundSize(size);\r\n    }\r\n\r\n    loadGLTF(model_name, model_url, fn_mesh_callback, edges_url = null) {\r\n        if (!!edges_url) {\r\n            let edgeloader = new EdgeLoader();\r\n            edgeloader.load(edges_url, null, edge => {\r\n                edge.Selectable = false;\r\n                this._edge_id_map.set(edge.uuid, edge);\r\n                var obj = this._obj_id_map.get(edge.uuid);\r\n                if (!!obj && !obj.edge) {\r\n                    obj.add(edge);\r\n                    obj.edge = edge;\r\n                }\r\n            }, null, new THREE.LineBasicMaterial({ color: 0x9999bb }));\r\n        }\r\n        // 单个glTF加载完毕后调用回调函数，以便调用方干预加载结果\r\n        var cntLoadedChunk = 0;\r\n        var chunk_finish_cb = (chunk, url, cntChunks) => {\r\n            var cnt = chunk.children.length;\r\n            this.loading = true;\r\n            var chunk_objs = [];\r\n            for (var i = 0; i < cnt; i++) {\r\n                var mesh = chunk.children.pop(0);\r\n                if (fn_mesh_callback) {\r\n                    try {\r\n                        if (!fn_mesh_callback(mesh)) continue;\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n                //////////////////\r\n                // 归并材质 begin\r\n                mesh.traverse(c => {\r\n                    var m0 = c.material;\r\n                    if (!m0) return;\r\n                    if (!Array.isArray(m0) && !m0.isMaterial) {\r\n                        throw \"类型错误：glTF加载时Mesh对象的材质字段无效！\";\r\n                    }\r\n                    var matSum;\r\n                    var transMat2Str = (m) => {\r\n                        var m1 = m.clone();\r\n                        delete m1.uuid;\r\n                        var s = JSON.stringify(m1);\r\n                        m1.dispose();\r\n                        return s;\r\n                    };\r\n                    if (m0.isMaterial) {\r\n                        matSum = transMat2Str(m0);\r\n                    } else { // isArray\r\n                        matSum = m0.reduce((s, m) => {\r\n                            s += transMat2Str(m);\r\n                            return s;\r\n                        }, \"\");\r\n                    }\r\n                    if (!this._obj_mat_map.has(matSum)) {\r\n                        this._obj_mat_map.set(matSum, c.material);\r\n                    }\r\n                    m0 = this._obj_mat_map.get(matSum);\r\n                    if (m0 != c.material) {\r\n                        if (Array.isArray(c.material)) {\r\n                            c.material.forEach(m => m.dispose());\r\n                        } else {\r\n                            c.material.dispose();\r\n                        }\r\n                        c.material = m0;\r\n                    }\r\n                });\r\n                // 归并材质 end\r\n                //////////////////\r\n                this.add(model_name, mesh);\r\n                chunk_objs.push(mesh);\r\n            }\r\n            delete this.loading;\r\n            cntLoadedChunk++;\r\n            this.dispatchEvent(Events.LOAD_CHUNK_FINISH(url, cntLoadedChunk, cntChunks, chunk_objs));\r\n            if (cntLoadedChunk % Math.floor(cntChunks / 5) == 0)\r\n                console.info(`模型加载: ${cntLoadedChunk}/${cntChunks}`);\r\n            else\r\n                console.debug(`模型加载: ${cntLoadedChunk}/${cntChunks}`);\r\n            if (cntLoadedChunk === cntChunks) {\r\n                console.info(\"模型加载完毕\");\r\n                this.dispatchEvent(Events.LOAD_FINISH(url));\r\n                this.dispatchEvent(Events.MODEL_BOUNDARY_CHANGE(this.segments_group.BoundingBox));\r\n            }\r\n        }\r\n        // 索引文件加载过程调试信息显示\r\n        var load_index_progress_cb = (url, cur, total) => {\r\n            console.info(`下载：${url} => ${Math.round(cur * 10000 / total) / 100}%`);\r\n            this.dispatchEvent(Events.LOAD_INDEX_PROGRESS(cur, total));\r\n        }\r\n\r\n        var loader = new GLTFLoaderEx();\r\n        loader.load(model_url, load_index_progress_cb, chunk_finish_cb,\r\n            // called when loading has errors\r\n            error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    // 重新排序，决定分批绘制的次序\r\n    resort(boundary) {\r\n        if (!boundary) boundary = this.segments_group.BoundingBox;\r\n        // 按尺寸优先、从外到内、从上到下顺序排序\r\n        var c = new THREE.Vector3();\r\n        var s = new THREE.Vector3();\r\n        boundary.getCenter(c);\r\n        boundary.getSize(s);\r\n        // 重新计算每个物体的最大尺寸（X、Y、Z）和距模型中心的距离（归1后的距离）\r\n        this.segments_group.traverse(o => {\r\n            o.sortInfo = o.sortInfo || {};\r\n            var b = o.BoundingBox;\r\n            // 计算尺寸（体积）\r\n            o.sortInfo.s = new THREE.Vector3();\r\n            b.getSize(o.sortInfo.s);\r\n            // o.sortInfo.s = Math.max(o.sortInfo.s.x, o.sortInfo.s.y, o.sortInfo.s.z);\r\n            o.sortInfo.s = o.sortInfo.s.x * o.sortInfo.s.y * o.sortInfo.s.z;\r\n            // 中心点归一化\r\n            o.sortInfo.c = new THREE.Vector3();\r\n            b.getCenter(o.sortInfo.c);\r\n            o.sortInfo.c.sub(c);\r\n            o.sortInfo.c.x /= s.x / 2;\r\n            o.sortInfo.c.y /= s.y / 2;\r\n            o.sortInfo.c.z /= s.z / 2;\r\n            // 剖切计数\r\n            o.sortInfo.cc = 0;\r\n            var m = o.material;\r\n            if (Array.isArray(m)) m = m[0];\r\n            if (!!m) {\r\n                var clips = m.clippingPlanes;\r\n                if (!!clips) {\r\n                    for (var p of clips) {\r\n                        for (var pnt of b.vertices()) {\r\n                            if (pnt.dot(p.normal) < -p.constant)\r\n                                o.sortInfo.cc++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        // 排序依据\r\n        function sort_policy(o1, o2) {\r\n            // 剖切状态\r\n            if (o1.sortInfo.cc != o2.sortInfo.cc) {\r\n                return o1.sortInfo.cc - o2.sortInfo.cc;\r\n            }\r\n            var s1 = o1.sortInfo.s;\r\n            var s2 = o2.sortInfo.s;\r\n            var d1 = o1.sortInfo.c.length() * s1;\r\n            var d2 = o2.sortInfo.c.length() * s2;\r\n            // 距离差\r\n            var dd = Math.abs(d1 - d2);\r\n            // 尺寸比\r\n            var ds = s2 / s1;\r\n            // 综合比较\r\n            if (dd > 0.2) {\r\n                return d2 - d1;\r\n            }\r\n            if (ds > 2) return 1;\r\n            else if (ds < 0.5) return -1;\r\n            // 高度\r\n            return o2.sortInfo.c.z - o1.sortInfo.c.z;\r\n        }\r\n        this.segments_not_transparent.sort(sort_policy);\r\n        this.segments_transparent.sort(sort_policy);\r\n    }\r\n\r\n    add(model_name, obj) {\r\n        if (!(obj && obj.isObject3D)) {\r\n            console.error(\"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object);\r\n            return;\r\n        }\r\n        var isTransparent = false;\r\n        // 修正过于理想的金属效果\r\n        function fixMat(m) {\r\n            // m.isMeshStandardMaterial == true\r\n            if (!!m.metalness && m.metalness > 0.999) {\r\n                m.roughness = 0.7; // 粗糙度\r\n                m.metalness = 0.6; // 类金属\r\n            }\r\n        }\r\n        obj.traverse(c => {\r\n            if (!c.material) return;\r\n            if (Array.isArray(c.material)) {\r\n                c.material.forEach(fixMat);\r\n            } else {\r\n                fixMat(c.material);\r\n            }\r\n        });\r\n        // 区分是否透明\r\n        obj.traverse_interruptible(c => {\r\n            if (!c.isMesh) return true;\r\n            if (Array.isArray(c.material)) {\r\n                for (var i in c.material) {\r\n                    if (c.material[i].transparent) {\r\n                        isTransparent = true;\r\n                        return false;\r\n                    }\r\n                }\r\n            } else {\r\n                isTransparent = c.material.transparent;\r\n                if (isTransparent) return false;\r\n            }\r\n        });\r\n        obj.isTransparent = isTransparent;\r\n        obj.model = model_name;\r\n        if (isTransparent) this.segments_transparent.push(obj);\r\n        else this.segments_not_transparent.push(obj);\r\n        // 保存拾取对象集合\r\n        this.segments_group.add(obj);\r\n        obj.invalidBoundary();\r\n        obj.parent = null; // 避免加入场景时，从segments_group中移除\r\n        // 尝试添加边框数据\r\n        var edge = this._edge_id_map.get(obj.uuid);\r\n        if (!!edge) {\r\n            obj.add(edge);\r\n            obj.edge = edge;\r\n        }\r\n        // 存入对应模型集合\r\n        this.models.add(model_name).push(obj);\r\n        this._obj_id_map.set(obj.uuid, obj);\r\n        if (!this.loading) {\r\n            this.dispatchEvent(Events.MODEL_ADD_OBJECT(obj));\r\n            this.dispatchEvent(Events.MODEL_BOUNDARY_CHANGE(this.segments_group.BoundingBox));\r\n        }\r\n    }\r\n\r\n    remove(model_or_obj) {\r\n        if (typeof (model_or_obj) == \"string\") {\r\n            var model = this.models[model_or_obj];\r\n            if (!!model) {\r\n                this.models.remove(model_or_obj);\r\n                model.forEach(o => this.remove(o));;\r\n            }\r\n        } else {\r\n            var obj = model_or_obj;\r\n            var t, m;\r\n            m = this.models[obj.model];\r\n            if (obj.isTransparent) {\r\n                t = this.segments_transparent;\r\n            } else {\r\n                t = this.segments_not_transparent;\r\n            }\r\n            var im, it;\r\n            if (!!m) {\r\n                im = m.indexOf(obj);\r\n                if (im > -1) m.splice(im, 1);\r\n            }\r\n            it = t.indexOf(obj);\r\n            if (it > -1) t.splice(it, 1);\r\n            this.segments_group.remove(obj);\r\n            // TODO: 触发删除事件\r\n        }\r\n        this.segments_group.invalidBoundary();\r\n        this.dispatchEvent(Events.MODEL_BOUNDARY_CHANGE(this.segments_group.BoundingBox));\r\n    }\r\n\r\n    getModel(model_name) {\r\n        if (!model_name || !(typeof (model_name) == \"string\"))\r\n            return;\r\n        var m = this.models[model_name];\r\n        if (!!m) {\r\n            return new ElementGroup(m);\r\n        }\r\n        return;\r\n    }\r\n\r\n    getItem(uuid) {\r\n        return this._obj_id_map.get(uuid)\r\n    }\r\n\r\n    get all() { return this.segments_group.children; }\r\n\r\n    get BoundingBox() { return this.segments_group.BoundingBox; }\r\n\r\n    invalidBoundary() {\r\n        this.segments_group.invalidBoundary();\r\n        this.dispatchEvent(Events.MODEL_BOUNDARY_CHANGE(this.segments_group.BoundingBox));\r\n    }\r\n}\r\n\r\nexport { ModelManager };","import {\r\n    Vector3\r\n} from \"three\";\r\n\r\nvar uniforms = {\r\n    \"sunPosition\": { value: new Vector3() },\r\n    \"luminance\": { value: 1 },\r\n\r\n    \"turbidity\": { value: 2 },\r\n    \"rayleigh\": { value: 1 },\r\n    \"mieCoefficient\": { value: 0.005 },\r\n    \"mieDirectionalG\": { value: 0.8 }\r\n};\r\n\r\nvar vertexShader = [\r\n    'uniform vec3 sunPosition;',\r\n    'uniform float rayleigh;',\r\n    'uniform float turbidity;',\r\n    'uniform float mieCoefficient;',\r\n\r\n    'varying vec3 vWorldPosition;',\r\n    'varying vec3 vSunDirection;',\r\n    'varying float vSunfade;',\r\n    'varying vec3 vBetaR;',\r\n    'varying vec3 vBetaM;',\r\n    'varying float vSunE;',\r\n\r\n    'const vec3 up = vec3( 0.0, 0.0, 1.0 );',\r\n\r\n    // constants for atmospheric scattering\r\n    'const float e = 2.71828182845904523536028747135266249775724709369995957;',\r\n    'const float pi = 3.141592653589793238462643383279502884197169;',\r\n\r\n    // wavelength of used primaries, according to preetham\r\n    'const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );',\r\n    // this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\r\n    // (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\r\n    'const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );',\r\n\r\n    // mie stuff\r\n    // K coefficient for the primaries\r\n    'const float v = 4.0;',\r\n    'const vec3 K = vec3( 0.686, 0.678, 0.666 );',\r\n    // MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\r\n    'const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );',\r\n\r\n    // earth shadow hack\r\n    // cutoffAngle = pi / 1.95;\r\n    'const float cutoffAngle = 1.6110731556870734;',\r\n    'const float steepness = 1.5;',\r\n    'const float EE = 1000.0;',\r\n\r\n    'float sunIntensity( float zenithAngleCos ) {',\r\n    '\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );',\r\n    '\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );',\r\n    '}',\r\n\r\n    'vec3 totalMie( float T ) {',\r\n    '\tfloat c = ( 0.2 * T ) * 10E-18;',\r\n    '\treturn 0.434 * c * MieConst;',\r\n    '}',\r\n\r\n    'void main() {',\r\n\r\n    '\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\r\n    '\tvWorldPosition = worldPosition.xyz;',\r\n\r\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n    '\tgl_Position.z = gl_Position.w;', // set z to camera.far\r\n\r\n    '\tvSunDirection = normalize( sunPosition );',\r\n\r\n    '\tvSunE = sunIntensity( dot( vSunDirection, up ) );',\r\n\r\n    '\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.z / 450000.0 ) ), 0.0, 1.0 );',\r\n\r\n    '\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );',\r\n\r\n    // extinction (absorbtion + out scattering)\r\n    // rayleigh coefficients\r\n    '\tvBetaR = totalRayleigh * rayleighCoefficient;',\r\n\r\n    // mie coefficients\r\n    '\tvBetaM = totalMie( turbidity ) * mieCoefficient;',\r\n\r\n    '}'\r\n].join('\\n');\r\n\r\nvar fragmentShader = [\r\n    'varying vec3 vWorldPosition;',\r\n    'varying vec3 vSunDirection;',\r\n    'varying float vSunfade;',\r\n    'varying vec3 vBetaR;',\r\n    'varying vec3 vBetaM;',\r\n    'varying float vSunE;',\r\n\r\n    'uniform float luminance;',\r\n    'uniform float mieDirectionalG;',\r\n\r\n    'const vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );',\r\n\r\n    // constants for atmospheric scattering\r\n    'const float pi = 3.141592653589793238462643383279502884197169;',\r\n\r\n    'const float n = 1.0003;', // refractive index of air\r\n    'const float N = 2.545E25;', // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)\r\n\r\n    // optical length at zenith for molecules\r\n    'const float rayleighZenithLength = 8.4E3;',\r\n    'const float mieZenithLength = 1.25E3;',\r\n    'const vec3 up = vec3( 0.0, 0.0, 1.0 );',\r\n    // 66 arc seconds -> degrees, and the cosine of that\r\n    'const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;',\r\n\r\n    // 3.0 / ( 16.0 * pi )\r\n    'const float THREE_OVER_SIXTEENPI = 0.05968310365946075;',\r\n    // 1.0 / ( 4.0 * pi )\r\n    'const float ONE_OVER_FOURPI = 0.07957747154594767;',\r\n\r\n    'float rayleighPhase( float cosTheta ) {',\r\n    '\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );',\r\n    '}',\r\n\r\n    'float hgPhase( float cosTheta, float g ) {',\r\n    '\tfloat g2 = pow( g, 2.0 );',\r\n    '\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );',\r\n    '\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );',\r\n    '}',\r\n\r\n    // Filmic ToneMapping http://filmicgames.com/archives/75\r\n    'const float A = 0.15;',\r\n    'const float B = 0.50;',\r\n    'const float C = 0.10;',\r\n    'const float D = 0.20;',\r\n    'const float E = 0.02;',\r\n    'const float F = 0.30;',\r\n\r\n    'const float whiteScale = 1.0748724675633854;', // 1.0 / Uncharted2Tonemap(1000.0)\r\n\r\n    'vec3 Uncharted2Tonemap( vec3 x ) {',\r\n    '\treturn ( ( x * ( A * x + C * B ) + D * E ) / ( x * ( A * x + B ) + D * F ) ) - E / F;',\r\n    '}',\r\n\r\n\r\n    'void main() {',\r\n    // optical length\r\n    // cutoff angle at 90 to avoid singularity in next formula.\r\n    '\tfloat zenithAngle = acos( max( 0.0, dot( up, normalize( vWorldPosition - cameraPos ) ) ) );',\r\n    '\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );',\r\n    '\tfloat sR = rayleighZenithLength * inverse;',\r\n    '\tfloat sM = mieZenithLength * inverse;',\r\n\r\n    // combined extinction factor\r\n    '\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );',\r\n\r\n    // in scattering\r\n    '\tfloat cosTheta = dot( normalize( vWorldPosition - cameraPos ), vSunDirection );',\r\n\r\n    '\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );',\r\n    '\tvec3 betaRTheta = vBetaR * rPhase;',\r\n\r\n    '\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );',\r\n    '\tvec3 betaMTheta = vBetaM * mPhase;',\r\n\r\n    '\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );',\r\n    '\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );',\r\n\r\n    // nightsky\r\n    '\tvec3 direction = normalize( vWorldPosition - cameraPos );',\r\n    '\tfloat theta = acos( direction.z ); // elevation --> y-axis, [-pi/2, pi/2]',\r\n    '\tfloat phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]',\r\n    '\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );',\r\n    '\tvec3 L0 = vec3( 0.1 ) * Fex;',\r\n\r\n    // composition + solar disc\r\n    '\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );',\r\n    '\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;',\r\n\r\n    '\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );',\r\n\r\n    '\tvec3 curr = Uncharted2Tonemap( ( log2( 2.0 / pow( luminance, 4.0 ) ) ) * texColor );',\r\n    '\tvec3 color = curr * whiteScale;',\r\n\r\n    '\tvec3 retColor = pow( color, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );',\r\n\r\n    '\tgl_FragColor = vec4( retColor, 1.0 );',\r\n\r\n    '}'\r\n].join('\\n');\r\n\r\nexport { uniforms, vertexShader, fragmentShader };","/**\r\n * @author zz85 / https://github.com/zz85\r\n *\r\n * Based on \"A Practical Analytic Model for Daylight\"\r\n * aka The Preetham Model, the de facto standard analytic skydome model\r\n * http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\r\n *\r\n * First implemented by Simon Wallner\r\n * http://www.simonwallner.at/projects/atmospheric-scattering\r\n *\r\n * Improved by Martin Upitis\r\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\r\n *\r\n * Three.js integration by zz85 http://twitter.com/blurspline\r\n*/\r\n\r\nimport {\r\n\tBackSide,\r\n\tBoxBufferGeometry,\r\n\tMesh,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n} from \"three\";\r\nimport * as SHADER from \"./shaders/shader_sky_with_sun\";\r\n\r\nclass Sky extends Mesh {\r\n\tconstructor() {\r\n\t\tvar material = new ShaderMaterial({\r\n\t\t\tfragmentShader: SHADER.fragmentShader,\r\n\t\t\tvertexShader: SHADER.vertexShader,\r\n\t\t\tuniforms: UniformsUtils.clone(SHADER.uniforms),\r\n\t\t\tside: BackSide\r\n\t\t});\r\n\t\tsuper(new BoxBufferGeometry(1, 1, 1), material);\r\n\t}\r\n}\r\n\r\nexport { Sky };","import { ObservedSet } from \"../utils/observed_set\";\r\n\r\nclass MockScene {\r\n    constructor() {\r\n        this.hasCSS2D = false;\r\n    }\r\n    get type() { return \"Scene\"; }\r\n    get children() {\r\n        if (!this._children)\r\n            this._children = new ObservedSet();\r\n        return this._children;\r\n    }\r\n    add(...oset) {\r\n        this.children.add(...oset);\r\n        oset.forEach(o => this.hasCSS2D = this.hasCSS2D || o.isCSS2DObject);\r\n    }\r\n    traverse_interruptible(callback) {\r\n        if (!callback(this))\r\n            return false;\r\n        var ret = true;\r\n        for (var o of this.children) {\r\n            ret = o.traverse_interruptible(callback);\r\n            if (!ret)\r\n                break;\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n\r\nexport { MockScene }\r\n","import * as THREE from \"three\";\r\nimport { NamedArray } from '../utils/named_array';\r\nimport { MockScene } from \"./MockScene\";\r\nimport { CSS2DRenderer } from \"three/examples/jsm/renderers/CSS2DRenderer\"\r\nimport { Scene } from \"three\";\r\n\r\nclass DecorationManager extends NamedArray {\r\n    constructor(domParent) {\r\n        super(MockScene);\r\n        this._renders = {\r\n            CSS2D: new CSS2DRenderer()\r\n        };\r\n        let cssHtmlElem = this._renders.CSS2D.domElement;\r\n        cssHtmlElem.style.position = 'absolute';\r\n        cssHtmlElem.style.top = '0px';\r\n        cssHtmlElem.style.pointerEvents = 'none';\r\n        domParent.appendChild(cssHtmlElem);\r\n\r\n        this._scene = new THREE.Scene();\r\n    }\r\n    setSize(w, h) {\r\n        this._renders.CSS2D.setSize(w, h);\r\n    }\r\n    addDecoScene(sceneIndex) {\r\n        let item = super.add(sceneIndex);\r\n        // 目前接口尽可能仅使用index进行调用，场景名称暂未完善\r\n        if (typeof (sceneIndex) == \"string\") {\r\n            item.name = sceneIndex;\r\n        }\r\n        return item;\r\n    }\r\n    addDecoration(obj, sceneIndex) {\r\n        let scene = this.addDecoScene(sceneIndex);\r\n        if (!scene) throw \"无法找到或创建附加场景！\";\r\n        obj.deco_scene = scene;\r\n        scene.add(obj);\r\n    }\r\n    removeDecoration(obj) {\r\n        obj.deco_scene.children.delete(obj);\r\n        delete obj.deco_scene;\r\n    }\r\n    render(is_first_frame, cam, ...indices) {\r\n        if (is_first_frame)\r\n            this._scene.clear();\r\n        for (let i of indices) {\r\n            let c = this[i];\r\n            if (!c || !c.hasCSS2D || c.children.size < 1) continue;\r\n            this._scene.add(...c.children);\r\n        }\r\n        this._renders.CSS2D.render(this._scene, cam);\r\n    }\r\n}\r\n\r\nexport { DecorationManager }\r\n","import * as THREE from \"three\";\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\r\nimport { TexturePass } from 'three/examples/jsm/postprocessing/TexturePass.js';\r\nimport { SavePass } from 'three/examples/jsm/postprocessing/SavePass.js';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\r\nimport { ClearPass } from 'three/examples/jsm/postprocessing/ClearPass.js';\r\nimport { CopyShader } from 'three/examples/jsm/shaders/CopyShader.js';\r\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader.js';\r\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\r\n\r\nimport { Events } from \"../Events\";\r\n\r\nconst FRAME_INFO = {\r\n    SINGLE_FRAME_TIME: null, // 在第一次执行动画桢函数时记录当前浏览器单帧时间\r\n    calc: function (timeStamp) {\r\n        if (!!this.SINGLE_FRAME_TIME) return;\r\n        // 计算最小单帧时间\r\n        this.tmp = this.tmp || { cnt: 0 };\r\n        if (!this.tmp.timeStamp) {\r\n            this.tmp.timeStamp = timeStamp;\r\n        } else {\r\n            this.tmp.timespan = Math.round((timeStamp - this.tmp.timeStamp) * 1000) / 1000;\r\n            if (this.tmp.cnt < 60) { // 计算60次的最小\r\n                if (this.tmp.timespan < 100) { // 认为大于100无效\r\n                    if (!this.tmp.min_time || this.tmp.timespan < this.tmp.min_time)\r\n                        this.tmp.min_time = this.tmp.timespan;\r\n                    this.tmp.cnt++;\r\n                }\r\n                this.tmp.timeStamp = timeStamp;\r\n            } else {\r\n                this.SINGLE_FRAME_TIME = this.tmp.min_time / 1000;\r\n                delete this.tmp;\r\n                delete this.calc;\r\n                console.debug(`单帧绘制时间（平均）：${this.SINGLE_FRAME_TIME}s`);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nclass Renderer extends THREE.EventDispatcher {\r\n    constructor(opt) {\r\n        super();\r\n        // RENDERER\r\n        opt = opt || {};\r\n        this._sceneManager = opt.sceneManager;\r\n        this._modelManager = opt.modelManager;\r\n        this._camera = opt.camera;\r\n        var width = opt.width, height = opt.height;\r\n        if (typeof (opt.setPixelRatio) == 'undefined')\r\n            opt.setPixelRatio = false;\r\n        this._renderer = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n            preserveDrawingBuffer: true\r\n        });\r\n        if (!!opt.setPixelRatio)\r\n            this._renderer.setPixelRatio(window.devicePixelRatio);\r\n        this._renderer.shadowMap.enabled = true;\r\n        this._renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n        this._renderer.autoClear = false;\r\n        this._renderer.info.autoReset = false;\r\n        this._renderer.localClippingEnabled = true;\r\n        this._renderer.debug.checkShaderErrors = false;\r\n        opt.container.appendChild(this.domElement);\r\n\r\n        this._decorations = opt.decorationManager;\r\n        // 此处仅为兼容原有的addDirectly接口\r\n        this._sceneManager._decos = this._decorations;\r\n\r\n        // COMPOSERs\r\n        this._effects = {};\r\n        this._effects.clear = new ClearPass(0xffffff, 1.0);\r\n\r\n        //this._effects.outline = new OutlinePass({ x: width, y: height }, this.scenes.scene, this.camera);\r\n        //this._effects.outline.clear = false;\r\n\r\n        this._effects.fxaa = new ShaderPass(FXAAShader);\r\n        this._effects.fxaa.clear = false;\r\n\r\n        this.setSize(width, height);\r\n\r\n        this.frame_time_ratio = opt.frameTimeRatio ?\r\n            opt.frameTimeRatio : 0.5;\r\n    }\r\n\r\n    _render_loop(timeStamp) {\r\n        if (FRAME_INFO.SINGLE_FRAME_TIME) {\r\n            // 临时的规则：根据相机与模型的距离决定一次绘制多少三角面\r\n            var box = this._modelManager.BoundingBox;\r\n            var maxScenes = 6;\r\n            if (!!box) {\r\n                var size = new THREE.Vector3();\r\n                box.getSize(size);\r\n                var dist = box.distanceToPoint(this._camera.position);\r\n                dist /= Math.max(size.x, size.y, size.z);\r\n                if (dist < 0.2) {\r\n                    maxScenes = 10;\r\n                } else if (dist < 1) {\r\n                    maxScenes = 8;\r\n                } else if (dist < 2) {\r\n                    maxScenes = 6;\r\n                } else if (dist < 3) {\r\n                    maxScenes = 4;\r\n                } else {\r\n                    maxScenes = 2;\r\n                }\r\n            }\r\n            var sceneToRender;\r\n            for (var i = 0; i < maxScenes; i++) {\r\n                var scene = this.iterScene.next();\r\n                if (scene.done) {\r\n                    break;\r\n                } else {\r\n                    scene = scene.value;\r\n                    if (!sceneToRender) {\r\n                        sceneToRender = new THREE.Scene();\r\n                        sceneToRender.decos = [];\r\n                    }\r\n                    let decos = this._decorations[scene.index];\r\n                    sceneToRender.add(...scene.children);\r\n                    if (!!decos && decos.children.size > 0)\r\n                        sceneToRender.add(...decos.children);\r\n                    sceneToRender.name += scene.name + \" \";\r\n                    sceneToRender.decos.push(scene.index);\r\n                    // if (!!this.Controller)\r\n                    //     this.Controller.update();\r\n                }\r\n            }\r\n            if (!!sceneToRender) {\r\n                // var clock = new THREE.Clock(true);\r\n                this._render(this._camera, sceneToRender, this._isFirstScene);\r\n                this._isFirstScene = false;\r\n            }\r\n            if (i < maxScenes && !this._isFirstScene) {\r\n                var info = this.get_cur_info();\r\n                this.dispatchEvent(Renderer.Events.RENDER_ALL(info));\r\n                this._isFirstScene = true;\r\n            }\r\n        } else {\r\n            FRAME_INFO.calc(timeStamp);\r\n        }\r\n        requestAnimationFrame(this._render_loop.bind(this));\r\n    }\r\n    _render(camera, scene, is_first_frame) {\r\n        if (is_first_frame) {\r\n            this._renderer.info.reset();\r\n        }\r\n\r\n        this._renderer.autoClear = is_first_frame;\r\n        console.debug(`绘制场景：${scene.name}`);\r\n        this._renderer.render(scene, camera);\r\n        this._decorations.render(is_first_frame, camera, ...scene.decos);\r\n    }\r\n\r\n    start() {\r\n        // 绘制流程\r\n        this.redraw(\"start\");\r\n        requestAnimationFrame(this._render_loop.bind(this));\r\n    }\r\n\r\n    redraw(debugMsg = \"\") {\r\n        console.debug(`重绘 ${!!debugMsg ? \"(\" + debugMsg + \")\" : \"\"} ... `);\r\n        this.iterScene = this._sceneManager.iterator();\r\n        this._isFirstScene = true;\r\n    }\r\n\r\n    get_cur_info() {\r\n        var output = {}, info = this._renderer.info;\r\n        Object.assign(output, info.memory);\r\n        Object.assign(output, info.render);\r\n        return output;\r\n    }\r\n\r\n    setSize(width, height, updateStyle) {\r\n        // this._renderBuffer.setSize(width, height);\r\n        this._renderer.setSize(width, height, updateStyle);\r\n        //this._effects.fxaa.uniforms['resolution'].value.set(1 / width, 1 / height);\r\n        //this._effects.outline.resolution.set(width, height);\r\n\r\n        this._decorations.setSize(width, height);\r\n    }\r\n\r\n    getSize(size) {\r\n        this._renderer.getSize(size);\r\n    }\r\n\r\n    get domElement() {\r\n        return this._renderer.domElement;\r\n    }\r\n}\r\n\r\nRenderer.Events = {\r\n    RENDER_ALL: info => Object({\r\n        type: 'RENDER_ALL',\r\n        info: info\r\n    }),\r\n};\r\n\r\nexport { Renderer };\r\n","import * as THREE from \"three\";\r\nimport { NamedArray } from '../utils/named_array';\r\nimport { Events } from \"../Events\";\r\nimport { MockScene } from \"./MockScene\";\r\n\r\nclass SceneManager extends THREE.EventDispatcher {\r\n    constructor(modelMgr, decoMgr) {\r\n        super();\r\n        this.scenes = new NamedArray(MockScene/*THREE.Scene*/);\r\n        this.scenes._add_with_index = function () {\r\n            var newIndex = this.length;\r\n            var scene = this.add(`scene_${newIndex}`);\r\n            if (scene.index === undefined) scene.index = newIndex;\r\n            return scene;\r\n        };\r\n        this._modelMgr = modelMgr;\r\n        this.dataEngine = {\r\n            buildInfos: [0, 0, 0],\r\n            segments: [\r\n                modelMgr.segments_not_transparent,\r\n                modelMgr.segments_transparent\r\n            ],\r\n            _curIndex: 0,\r\n            next() {\r\n                if (this._curIndex < this.buildInfos.length)\r\n                    this._curIndex++;\r\n                return this.current;\r\n            },\r\n            get current() {\r\n                if (this._curIndex >= this.buildInfos.length)\r\n                    return null;\r\n                if (!this.segments[this._curIndex])\r\n                    return null;\r\n                var scope = this;\r\n                return {\r\n                    index: scope._curIndex,\r\n                    get objIndex() {\r\n                        return scope.buildInfos[scope._curIndex];\r\n                    },\r\n                    set objIndex(v) {\r\n                        scope.buildInfos[scope._curIndex] = v;\r\n                    },\r\n                    segments: scope.segments[scope._curIndex]\r\n                };\r\n            },\r\n            reset() {\r\n                this.buildInfos = [0, 0, 0];\r\n                this._curIndex = 0;\r\n            }\r\n        };\r\n        this.reset();\r\n\r\n        this._decos = decoMgr;\r\n    }\r\n\r\n    * iterator() {\r\n        this._build_a_scene();\r\n        for (let s of this.scenes) {\r\n            this._build_a_scene();\r\n            var empty = true;\r\n            s.traverse_interruptible(c => {\r\n                if (c.isGroup || c.isLight || c.isCamera || c.type == \"Scene\")\r\n                    return true;\r\n                if (c.visible) {\r\n                    empty = false;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            if (empty) {\r\n                continue;\r\n            } else {\r\n                this._modelMgr.lights.forEach(l => s.add(l));\r\n                yield s;\r\n            }\r\n        }\r\n    }\r\n\r\n    get Count() {\r\n        return this.scenes.length;\r\n    }\r\n\r\n    // 需要重置所有场景时调用此函数\r\n    reset() {\r\n        this.scenes.remove();\r\n        this.dataEngine.reset();\r\n\r\n        var scene_0 = this.scenes._add_with_index();\r\n        this._modelMgr.builtin.forEach(o => {\r\n            scene_0.add(o);\r\n        });\r\n    }\r\n\r\n    _build_a_scene(timeStamp) {\r\n        const MAX_TRIANGLES = 10000;// 单场景的面片数控制参考值\r\n        // 整理待处理的数据\r\n        var cur = this.dataEngine.current;\r\n        while (!!cur && cur.objIndex >= cur.segments.length)\r\n            cur = this.dataEngine.next();\r\n        if (!cur) return false; // 所有数据均已转换\r\n        var curScene = this.scenes._add_with_index();\r\n        var cntFaces = 0;\r\n\r\n        // 将segments中buildInfo指向的对象加入场景curScene\r\n        while (!!cur && cntFaces < MAX_TRIANGLES) {\r\n            var cnt = cur.segments.length;\r\n            for (var i = cur.objIndex; i < cnt && cntFaces < MAX_TRIANGLES; i++) {\r\n                var obj3d = cur.segments[i];\r\n                curScene.add(obj3d);\r\n                cntFaces += obj3d.FacesCount;\r\n            }\r\n            cur.objIndex = i;\r\n            if (cntFaces < MAX_TRIANGLES)\r\n                cur = this.dataEngine.next();\r\n        }\r\n        // 增量绘制事件通知\r\n        // this.dispatchEvent(Events.SCENE_INCREMENT(tmpScene));\r\n\r\n        return true;\r\n    }\r\n\r\n    addDirectly(obj, sceneIndex = 0) {\r\n        if (!this._decos) {\r\n            throw \"附加场景未初始化！\";\r\n        }\r\n        this._decos.addDecoration(obj, sceneIndex);\r\n        // this._modelMgr.dispatchEvent(Events.MODEL_ADD_OBJECT(obj));\r\n    }\r\n}\r\n\r\nexport { SceneManager };\r\n","import * as THREE from \"three\";\r\nimport { SharedSet } from \"./shared_set\";\r\n\r\n\r\nfunction enhance_threejs() {\r\n    THREE.Object3D.DefaultUp.set(0, 0, 1);\r\n\r\n    Object.defineProperty(THREE.Object3D.prototype, 'BoundingBox', {\r\n        enumerable: false,\r\n        configurable: false,\r\n        get: function () {\r\n            if (!this._boundary) {\r\n                if (!!this.geometry) {\r\n                    this.geometry.computeBoundingBox();\r\n                    this._boundary = this.geometry.boundingBox.clone().\r\n                        applyMatrix4(this.matrixWorld);\r\n                }\r\n                var cnt = this.children.length;\r\n                for (var i = 0; i < cnt; i++) {\r\n                    var c = this.children[i];\r\n                    if (!c.visible) continue;\r\n                    var b = c.BoundingBox;\r\n                    if (!!b) {\r\n                        if (!!this._boundary) {\r\n                            this._boundary = this._boundary.union(b);\r\n                        } else {\r\n                            this._boundary = b.clone();\r\n                        }\r\n                    }\r\n                }\r\n                if (!this.geometry && !!this._boundary) {\r\n                    this._boundary = this._boundary.applyMatrix4(this.matrixWorld);\r\n                }\r\n            }\r\n            return this._boundary;\r\n        }\r\n    });\r\n    THREE.Object3D.prototype.invalidBoundary = function () {\r\n        delete this._boundary;\r\n        if (!!this.parent)\r\n            this.parent.invalidBoundary();\r\n    };\r\n\r\n    Object.defineProperty(THREE.Object3D.prototype, 'FacesCount', {\r\n        enumerable: false,\r\n        configurable: false,\r\n        get: function () {\r\n            if (!this.geometry) return 0;\r\n            if (!this.geometry.index) {\r\n                var pos = this.geometry.attributes.position;\r\n                if (!pos || (pos.count % 3) != 0) {\r\n                    return 0;\r\n                }\r\n                return pos.count / 3;\r\n            } else {\r\n                // ASSERT(this.geometry.index.itemSize == 1)\r\n                return this.geometry.index.count / 3;\r\n            }\r\n        }\r\n    });\r\n\r\n    Object.defineProperty(THREE.Object3D.prototype, 'Selectable', {\r\n        enumerable: false,\r\n        configurable: false,\r\n        set: function (v) {\r\n            this._selable = v;\r\n        },\r\n        get: function () {\r\n            if (!(\"_selable\" in this))\r\n                this._selable = true;\r\n            return this._selable;\r\n        }\r\n    });\r\n\r\n    Object.defineProperty(THREE.Object3D.prototype, 'edge', {\r\n        enumerable: false,\r\n        configurable: false,\r\n        set: function (v) {\r\n            this._edge = v;\r\n            let mat = null;\r\n            if (Array.isArray(this.material)) {\r\n                mat = this.material[0];\r\n            } else {\r\n                mat = this.material;\r\n            }\r\n            if (!!mat.clippingPlanes)\r\n                this._edge.add_clip_planes(mat.clippingPlanes, mat.clipIntersection);\r\n        },\r\n        get: function () {\r\n            if (!(\"_edge\" in this))\r\n                return null;\r\n            return this._edge;\r\n        }\r\n    });\r\n\r\n    THREE.Object3D.prototype.traverse_interruptible = function (callback) {\r\n        if (!callback(this))\r\n            return false;\r\n        var children = this.children;\r\n        var ret = true;\r\n        for (var i = 0, l = children.length; i < l; i++) {\r\n            ret = children[i].traverse_interruptible(callback);\r\n            if (!ret)\r\n                break;\r\n        }\r\n        return ret;\r\n    };\r\n\r\n    THREE.Box3.prototype.vertices = function* () {\r\n        var m = [\"min\", \"max\"];\r\n        var c = [\"x\", \"y\", \"z\"];\r\n        for (var i = 0; i < 8; i++) {\r\n            var z = m[Math.floor(i / 4)],\r\n                y = m[Math.floor(i / 2) % 2],\r\n                x = m[i % 2];\r\n            yield new THREE.Vector3(\r\n                this[x].x,\r\n                this[y].y,\r\n                this[z].z\r\n            );\r\n        }\r\n    }\r\n\r\n    THREE.Box3.prototype.toJson = function () {\r\n        return {\r\n            max: this.max.toArray(),\r\n            min: this.min.toArray()\r\n        };\r\n    }\r\n\r\n    THREE.Box3.prototype.fromJson = function (boxJson) {\r\n        this.max.fromArray(boxJson.max);\r\n        this.min.fromArray(boxJson.min);\r\n    }\r\n\r\n    //////////////////////////////////\r\n    // 对象剖切相关的功能封装\r\n    // begin\r\n    function traverse_mats(mats, fn) {\r\n        if (Array.isArray(mats)) {\r\n            for (var m of mats) {\r\n                fn(m);\r\n            }\r\n        } else {\r\n            fn(mats);\r\n        }\r\n    }\r\n    function set_mats_clipping(materials, clippingPlanes, isIntersect) {\r\n        if (!materials) return;\r\n        if (!clippingPlanes) return;\r\n        traverse_mats(materials, mat => {\r\n            mat.clippingPlanes = [...clippingPlanes];\r\n            mat.clipShadows = true;\r\n            if (undefined !== isIntersect)\r\n                mat.clipIntersection = !!isIntersect;\r\n        });\r\n    };\r\n\r\n    function set_mats_clip_intersect(materials, isIntersect = false) {\r\n        if (!materials) return;\r\n        traverse_mats(materials, mat => {\r\n            mat.clipIntersection = isIntersect;\r\n        });\r\n    }\r\n\r\n    function clear_mats_clipping(materials) {\r\n        if (!materials) return;\r\n        traverse_mats(materials, mat => mat.clippingPlanes = []);\r\n    };\r\n\r\n    Object.defineProperty(THREE.Object3D.prototype, 'ClippingPlanesSet', {\r\n        enumerable: false, configurable: false,\r\n        get: function () {\r\n            if (!this.clippingPlanesSet) {\r\n                this.clippingPlanesSet = new SharedSet;\r\n            }\r\n            return this.clippingPlanesSet;\r\n        }\r\n    });\r\n\r\n    THREE.Object3D.prototype.add_clip_planes = function (clippingPlanes, isIntersect) {\r\n        var materials = this.material;\r\n        if (!materials) return;\r\n        for (var p of clippingPlanes) {\r\n            this.ClippingPlanesSet.add(p);\r\n        }\r\n        set_mats_clipping(materials, this.ClippingPlanesSet, isIntersect);\r\n        if (!!this._edge)\r\n            this._edge.add_clip_planes(clippingPlanes, isIntersect);\r\n    };\r\n\r\n    THREE.Object3D.prototype.remove_clip_planes = function (clippingPlanes) {\r\n        var materials = this.material;\r\n        if (!materials) return;\r\n        for (var p of clippingPlanes) {\r\n            this.ClippingPlanesSet.delete(p);\r\n        }\r\n        set_mats_clipping(materials, this.ClippingPlanesSet);\r\n        if (!!this._edge)\r\n            this._edge.remove_clip_planes(clippingPlanes);\r\n    };\r\n\r\n    THREE.Object3D.prototype.clear_clip_planes = function () {\r\n        var materials = this.material;\r\n        if (!materials) return;\r\n        clear_mats_clipping(materials);\r\n        this.ClippingPlanesSet.clear();\r\n        if (!!this._edge)\r\n            this._edge.clear_clip_planes();\r\n    };\r\n\r\n    THREE.Object3D.prototype.set_clip_intersect = function (isIntersect = false) {\r\n        var materials = this.material;\r\n        if (!materials) return;\r\n        set_mats_clip_intersect(materials, isIntersect);\r\n        if (!!this._edge)\r\n            this._edge.set_clip_intersect(isIntersect);\r\n    };\r\n\r\n    Object.defineProperty(THREE.Material.prototype, 'ClippingPlanesSet', {\r\n        enumerable: false, configurable: false,\r\n        get: function () {\r\n            if (!this.clippingPlanesSet) {\r\n                this.clippingPlanesSet = new SharedSet;\r\n            }\r\n            return this.clippingPlanesSet;\r\n        }\r\n    });\r\n\r\n    THREE.Material.prototype.set_clip_intersect = function (isIntersect = false) {\r\n        set_mats_clip_intersect(this, isIntersect);\r\n    };\r\n\r\n    THREE.Material.prototype.set_clip_planes = function (clippingPlanes, isIntersect) {\r\n        set_mats_clipping(this, clippingPlanes, isIntersect);\r\n    }\r\n\r\n    THREE.Material.prototype.add_clip_planes = function (clippingPlanes, isIntersect) {\r\n        for (var p of clippingPlanes) {\r\n            this.ClippingPlanesSet.add(p);\r\n        }\r\n        set_mats_clipping(this, this.ClippingPlanesSet, isIntersect);\r\n    }\r\n\r\n    THREE.Material.prototype.remove_clip_planes = function (clippingPlanes) {\r\n        for (var p of clippingPlanes) {\r\n            this.ClippingPlanesSet.delete(p);\r\n        }\r\n        set_mats_clipping(this, this.ClippingPlanesSet);\r\n    }\r\n\r\n    THREE.Material.prototype.clear_clip_planes = function () {\r\n        clear_mats_clipping(this);\r\n    }\r\n    // 对象剖切相关的功能封装\r\n    // end\r\n    //////////////////////////////////\r\n\r\n}\r\n\r\nexport { enhance_threejs };","\r\n\r\nconst PRI_ADD = Symbol(\"NARR_ADD\");\r\nclass NamedArray extends Array {\r\n    constructor(type, builtInNames) {\r\n        super();\r\n        this.elemType = type;\r\n        if (!!builtInNames && builtInNames instanceof Array) {\r\n            this._builtInNames = builtInNames.slice(0); // clone\r\n            this._builtInNames.forEach(nm => {\r\n                this.add(nm);\r\n            });\r\n        }\r\n    }\r\n\r\n    get BuiltInNames() {\r\n        return this._builtInNames.slice(0);\r\n    }\r\n\r\n    [PRI_ADD](real_op, name, type, ...contructor_args) {\r\n        if (name in this)\r\n            return this[name];\r\n        if (!type) type = this.elemType;\r\n        if (!type) return null;\r\n        var s = new type(...contructor_args);\r\n        s.name = name;\r\n        real_op(s);\r\n        Object.defineProperty(this, name, {\r\n            enumerable: false,\r\n            configurable: true,\r\n            get: function () {\r\n                return s;\r\n            }\r\n        });\r\n        return s;\r\n    }\r\n\r\n    add(name, type, ...contructor_args) {\r\n        var This = this;\r\n        return this[PRI_ADD](s => This.push(s),\r\n            name, type, ...contructor_args);\r\n    }\r\n\r\n    insert(index, name, type, ...contructor_args) {\r\n        var This = this;\r\n        return this[PRI_ADD](s => This.splice(index, 0, s),\r\n            name, type, ...contructor_args);\r\n    }\r\n\r\n    remove(...args) {\r\n        if (args.length > 2) return;\r\n        if (args.length == 0) {\r\n            this.remove(0, this.length);\r\n        } else if (args.length == 1) {\r\n            var name = args[0];\r\n            //if (!(name in this))\r\n            if (!(name in this) || this._builtInNames.indexOf(name) > -1)\r\n                return null;\r\n            this.splice(this.indexOf(this[name]), 1);\r\n            delete this[name];\r\n        } else {\r\n            var drop = this.splice(args[0], args[1]);\r\n            for (var i in drop) {\r\n                delete this[drop[i].name];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport { NamedArray };","\r\nimport { Events } from \"core/Events\";\r\n\r\nconst PRIVATE = {\r\n    \"EVENT_MANAGER\": Symbol(\"EVENT_MANAGER\"),\r\n}\r\n\r\nclass ObservedSet extends Set {\r\n    constructor(arg) {\r\n        super(arg);\r\n    }\r\n    get EventManager() {\r\n        if (!this[PRIVATE.EVENT_MANAGER])\r\n            this[PRIVATE.EVENT_MANAGER] = new THREE.EventDispatcher;\r\n        return this[PRIVATE.EVENT_MANAGER];\r\n    }\r\n    addEventListener(...args) {\r\n        this.EventManager.addEventListener(...args);\r\n    }\r\n    removeEventListener(...args) {\r\n        this.EventManager.removeEventListener(...args);\r\n    }\r\n    // 集合操作重载\r\n    add(...os) {\r\n        var ret;\r\n        for (var o of os) {\r\n            this.EventManager.dispatchEvent(Events.OSET_ADDING(o));\r\n            if (!super.has(o)) {\r\n                ret = super.add(o);\r\n                if (super.has(o))\r\n                    this.EventManager.dispatchEvent(Events.OSET_ADDED(o));\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    delete(...os) {\r\n        var ret = false;\r\n        for (var o of os) {\r\n            this.EventManager.dispatchEvent(Events.OSET_DELETING(o));\r\n            if (super.delete(o)) {\r\n                ret = true;\r\n                this.EventManager.dispatchEvent(Events.OSET_DELETED(o));\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    clear() {\r\n        var elarray = [...this];\r\n        for (var o of elarray)\r\n            this.EventManager.dispatchEvent(Events.OSET_DELETING(o));\r\n        super.clear();\r\n        for (var o of elarray)\r\n            this.EventManager.dispatchEvent(Events.OSET_DELETED(o));\r\n    }\r\n}\r\n\r\nexport { ObservedSet };","import { ObservedSet } from \"./observed_set\"\r\n// 定义一个集合类，其中存储的对象均对应一个引用计数，\r\n// 即如果一个对象被add多次，也需要被delete多次才会从集合中去除\r\nconst REF_CNT = Symbol(\"REF_CNT\");\r\n\r\nclass SharedSet extends ObservedSet {\r\n    constructor(arg) {\r\n        super(arg);\r\n        this[REF_CNT] = new Map();\r\n    }\r\n    add(v) {\r\n        if (this[REF_CNT].has(v)) {\r\n            this[REF_CNT].set(v, this[REF_CNT].get(v) + 1);\r\n            return this;\r\n        }\r\n        super.add(v);\r\n        this[REF_CNT].set(v, 1);\r\n        return this;\r\n    }\r\n    delete(v) {\r\n        if (!this[REF_CNT].has(v)) return false;\r\n        var cnt = this[REF_CNT].get(v);\r\n        if (cnt < 2) {\r\n            this[REF_CNT].delete(v);\r\n            return super.delete(v);\r\n        } else {\r\n            this[REF_CNT].set(v, this[REF_CNT].get(v) - 1);\r\n            return true;\r\n        }\r\n    }\r\n    clear() {\r\n        super.clear();\r\n        this[REF_CNT].clear();\r\n    }\r\n}\r\n\r\nexport { SharedSet };","import * as THREE from \"three\"\r\nimport { Viewer } from 'core/Viewer'\r\nimport { ElementGroup } from 'core/model/element_group'\r\nimport { enhance_threejs } from \"core/utils/THREE_Ex\";\r\n\r\nenhance_threejs();\r\n\r\nvar Web3D = {\r\n    Viewer: Viewer,\r\n    ElementGroup: ElementGroup,\r\n    Version: ENGINE_VERSION,\r\n    toString() {\r\n        return `Web3D Engine ${this.Version}`\r\n    }\r\n}\r\n\r\nif (!window.Web3D) {\r\n    window.Web3D = Web3D;\r\n    window.THREE = THREE;\r\n\r\n}\r\n\r\nconsole.info(`Engine version: ${Web3D.Version}`)\r\n\r\nexport { Web3D };\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"engine/\" + chunkId + \".\" + {\"worker.loader\":\"ef1f9a76622c609ac9c3\",\"worker.parser\":\"b138cc66c1a703085851\"}[chunkId] + \".js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl + \"../\";","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"engine/web3d-engine\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = this[\"webpackChunkweb3d\"] = this[\"webpackChunkweb3d\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","__webpack_require__.nc = undefined;","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"engine/three\"], () => (__webpack_require__(\"../src/web3d.js\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":[],"sourceRoot":""}